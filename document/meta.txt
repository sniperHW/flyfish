meta的作用

1) 请求到达时检查字段是否符合scheme定义

2) 回写时使用meta产生正确的回写操作

对于sql后端，meta中的table对应了DB中的table。因此如果meta与DB定义不一致将会产生回写错误。

flyfish采用异步回写，意味着回写执行的时候操作响应已经返回给客户端。因此，要避免回写时发生因为定义不一致导致回写失败。

下面讨论meta的处理

增加table

首先，请求DB创建table。接着向meta添加table。通告flykv更新meta。

当flykv获取到最新meta之前，所有操作请求都因为在meta中找不到相应的table而拒绝。


table增加字段

首先，请求DB给table增加字段。接着向meta添加新字段。通告flykv更新meta。

当flykv获取到最新meta之前，所有操作请求都因为在meta中找不到相应的字段而拒绝。


新增不会产生问题，但是删除的处理需要讨论。


方案1，不对DB执行表格删除操作。

删除table

DB不删除table,从meta中移除。在获取到新meta前，因为DB中并未删除table,所以回写继续正确执行。

如果回写时已经获取了最新meta，执行前先检查table是否还存在，如果不存在放弃回写。


删除字段

DB不删除table,从meta中移除。在获取到新meta前，因为DB中并未删除table,所以回写继续正确执行。

如果回写时已经获取了最新meta，使用最新meta创建回写操作，忽略掉已经被删除的字段。


以上方案存在一个小问题，

table或字段删除之后，不能再次添加同名table或字段。因为此时DB中还存在同名table或字段。


方案2，DB同时执行删除

删除table

DB先删除table,接着再从meta中移除。

此时正在执行的回写将会出错。检查出错信息，如果发现是因为表格不存在导致的，丢弃本次回写。


删除字段

DB先删除字段,接着再从meta中移除。

此时正在执行的回写将会出错。检查出错信息，如果发现是因为字段不存在导致的，丢弃本次回写。
并保持kv的dirty标记，待之后获取到最新meta之后再次执行回写。


以上方案的问题。

如果table或字段先被删除，然后又再次添加。

例如table的情况。

对于旧table的回写操作实际上应该要错误丢弃，但因为在db中再次添加，使得回写成功。



方案3

利用meta版本号给table名添加后缀

table本身也记录一个版本号，给字段名添加后缀。


例如初始时meta版本号为0

现在添加一个table1。这个table1的版本号也是0

那么此时table1(field1,field2)实际上将被定义成

table1_0(field1_0,field2_0)

之后meta和table1的版本号都变成1。

回到table1先删后增的情况。


删除后meta版本号为2

再次增加table1，table1的真实名字就变成了table1_2

没有获取到最新meta的回写操作将不会回写到table1_2中。





















































































flykv依赖DB的表格定义,表格定义称为元数据

flykv接到一个请求，需要判断表格是否在元数据中存在，字段是否在元数据中存在，字段的类型跟元数据中的是否匹配。

如果无法通过检测，将直接返回错误。

在kv回写的时候，需要使用kv关联的元数据，生成DB更新操作。

DB表格定义

db不允许删除表格，删除fileds,对filed做变更（改名，更改类型）

meta允许删除表格，删除fileds, 禁止对filed做变更（改名，更改类型）


DB变更操作

1）对DB进行变更。注意，所有新增字段都要设置默认值（如果flyfish尚未获取到元数据的更新，此时执行insert语句将会失败，设置了默认值insert对缺失的字段
使用默认值填充）。


2）通知flyfish变更元数据。


3）flyfish响应更新成功后，与变更相关的操作才能正常执行。


flyfish元数据的变更


任意一个store都可能处理任何一个表格，因此变更处理需要做成事务。一旦事务完成，所有store都更新到最新元数据。

变更事务。

变更事务只允许存在一个，如果前一个事务尚未完成不允许启动新的事务。

flypd向所有store发送变更通知，携带最新的meta。

store leader接收通知，将通知复制到所有副本，一旦复制到一个多数集，应用最新meta，响应更新成功。

flypd接收到所有store的响应后变更结束。

如果flypd未能接收到所有的响应，则定时再次向所有store发送通告，直到接收到所有的响应。


meta携带版本号，leader发现版本号与当前一致，直接响应。

为了避免错误。在meta变更事务尚未完成的情况下，不允许执行集群配置变更相关的操作。



kv对meta的使用


1）接收到客户端请求时，使用tablemeta检查参数


2）从数据库加载时，使用tablemeta填充默认值


3）回写时，使用tablemeta生产更新操作


需要确保在每次使用时取得最新meta






















































































