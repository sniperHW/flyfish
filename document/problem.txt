sql回写

flyfish采取sql异步回写，应保证flyfish内存数据与sql的最终一致性。

1）如果在leader执行sql回写前leader崩溃，将无法将数据回写sql。为了避免此问题，follower成为leader后需要对自己管理的所有kv发起一次
sql回写。


2）数据覆盖问题。

考虑如下场景,A是leader，执行sql回写前，因为网络分区，集群选举B为leader,此时A尚未感知到自己已经不是leader继续发出sql回写请求。
B此时也收到更新请求，执行回写。如果A回写在B之后执行，将导致老数据覆盖新数据。


解决方法:

使用lease,leader发出proposal申请租约，并定期续租，拥有lease才允许执行sql回写。如果lease失效丢弃所有回写操作。
这样A因为无法续约最终将无法执行sql回写。B等到A的租约失效后申请到租约后执行sql回写，即可保证回写有序。


lease

只有leader可以发起proposal,一旦proposal被commited,租约生效，leader需要定期续租，一旦发现失去leader权或租约过期，丢弃sql回写操作。

新的leader判断是否存在老的lease以及是否失效，如果已经失效发起proposal申请租约。租约需要保存到快照中。

租约使用固定的相对时间，所有节点在apply租约时，将失效时间设置为当前时间+租约时间。


3) 如前1所述，为了避免回写丢失，follower成为leader后需要对所有的kv发起一次sql回写。但此时leader可能尚未获得租约，因此回写无法执行。
此时kick操作不能执行，否则将导致数据丢失。因此需要增加一个kick锁，在follower成为leader之后将所有kv的kick锁锁住，以防止被执行kick。
当leader获得租约的时候释放kick锁，并发起回写请求（回写状态本身也会保护kv不会被kick）。

2022-2-11更新

取消回写lease机制

所有回写操作需要比较__version__字段，只有匹配才能成功更新。

updatetask执行成功后记录下当前__version__,下一次执行时用于__version__比较。

如果新leader先完成回写，则老leader的回写因为__version__不匹配导致更新失败。

问题，新leader需要执行一次全量回写，此时updatetask记录的__version__可能跟数据库中的不匹配。

这种情况下，可以将updatetask.__version__设为0，执行不比较版本号的更新。

考虑以下情况

leader1执行执行记录1的全量回写。之后leader1与其它成员隔离，选出leader2，leader2请求执行全量回写，在记录1执行回写前再次收到更新请求。
因此在记录1执行回写时，将回写最新的变更。之后leader1才执行记录1的全量回写，因为无需对比__version__,记录1被leader1的旧记录覆盖。


回写执行前的leader判断是否能避免此问题？

flykv开启了check CheckQuorum,











































































