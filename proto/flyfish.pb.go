// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flyfish.proto

package proto

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CmdType int32

const (
	CmdType_Ping            CmdType = 1
	CmdType_Set             CmdType = 2
	CmdType_Get             CmdType = 3
	CmdType_Del             CmdType = 4
	CmdType_IncrBy          CmdType = 5
	CmdType_SetNx           CmdType = 6
	CmdType_CompareAndSet   CmdType = 7
	CmdType_CompareAndSetNx CmdType = 8
	CmdType_Kick            CmdType = 9
	CmdType_ScanNext        CmdType = 10
)

var CmdType_name = map[int32]string{
	1:  "Ping",
	2:  "Set",
	3:  "Get",
	4:  "Del",
	5:  "IncrBy",
	6:  "SetNx",
	7:  "CompareAndSet",
	8:  "CompareAndSetNx",
	9:  "Kick",
	10: "ScanNext",
}

var CmdType_value = map[string]int32{
	"Ping":            1,
	"Set":             2,
	"Get":             3,
	"Del":             4,
	"IncrBy":          5,
	"SetNx":           6,
	"CompareAndSet":   7,
	"CompareAndSetNx": 8,
	"Kick":            9,
	"ScanNext":        10,
}

func (x CmdType) Enum() *CmdType {
	p := new(CmdType)
	*p = x
	return p
}

func (x CmdType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(CmdType_name, int32(x))
}

func (x *CmdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CmdType_value, data, "CmdType")
	if err != nil {
		return err
	}
	*x = CmdType(value)
	return nil
}

func (CmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{0}
}

type ValueType int32

const (
	ValueType_invaild ValueType = 0
	ValueType_nil     ValueType = 1
	ValueType_string  ValueType = 2
	ValueType_int     ValueType = 3
	ValueType_float   ValueType = 4
	ValueType_blob    ValueType = 5
)

var ValueType_name = map[int32]string{
	0: "invaild",
	1: "nil",
	2: "string",
	3: "int",
	4: "float",
	5: "blob",
}

var ValueType_value = map[string]int32{
	"invaild": 0,
	"nil":     1,
	"string":  2,
	"int":     3,
	"float":   4,
	"blob":    5,
}

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ValueType_name, int32(x))
}

func (x *ValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ValueType_value, data, "ValueType")
	if err != nil {
		return err
	}
	*x = ValueType(value)
	return nil
}

func (ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{1}
}

type LoginReq struct {
	Compress bool   `protobuf:"varint,1,opt,name=compress" json:"compress"`
	Scanner  bool   `protobuf:"varint,2,opt,name=scanner" json:"scanner"`
	Key      []byte `protobuf:"bytes,3,opt,name=key" json:"key"`
}

func (m *LoginReq) Reset()      { *m = LoginReq{} }
func (*LoginReq) ProtoMessage() {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{0}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetCompress() bool {
	if m != nil {
		return m.Compress
	}
	return false
}

func (m *LoginReq) GetScanner() bool {
	if m != nil {
		return m.Scanner
	}
	return false
}

func (m *LoginReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type LoginResp struct {
	Ok       bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Compress bool   `protobuf:"varint,2,opt,name=compress" json:"compress"`
	Reason   string `protobuf:"bytes,3,opt,name=reason" json:"reason"`
}

func (m *LoginResp) Reset()      { *m = LoginResp{} }
func (*LoginResp) ProtoMessage() {}
func (*LoginResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{1}
}
func (m *LoginResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResp.Merge(m, src)
}
func (m *LoginResp) XXX_Size() int {
	return m.Size()
}
func (m *LoginResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResp proto.InternalMessageInfo

func (m *LoginResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *LoginResp) GetCompress() bool {
	if m != nil {
		return m.Compress
	}
	return false
}

func (m *LoginResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type Value struct {
	Type    ValueType `protobuf:"varint,1,req,name=Type,enum=proto.ValueType" json:"Type"`
	Int     int64     `protobuf:"varint,2,opt,name=Int" json:"Int"`
	Float   float64   `protobuf:"fixed64,3,opt,name=Float" json:"Float"`
	String_ string    `protobuf:"bytes,4,opt,name=String" json:"String"`
	Blob    []byte    `protobuf:"bytes,5,opt,name=Blob" json:"Blob"`
}

func (m *Value) Reset()      { *m = Value{} }
func (*Value) ProtoMessage() {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{2}
}
func (m *Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return m.Size()
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_invaild
}

func (m *Value) GetInt() int64 {
	if m != nil {
		return m.Int
	}
	return 0
}

func (m *Value) GetFloat() float64 {
	if m != nil {
		return m.Float
	}
	return 0
}

func (m *Value) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *Value) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type Field struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	V    *Value `protobuf:"bytes,2,opt,name=v" json:"v,omitempty"`
}

func (m *Field) Reset()      { *m = Field{} }
func (*Field) ProtoMessage() {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{3}
}
func (m *Field) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Field.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(m, src)
}
func (m *Field) XXX_Size() int {
	return m.Size()
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetV() *Value {
	if m != nil {
		return m.V
	}
	return nil
}

type PingReq struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp"`
}

func (m *PingReq) Reset()      { *m = PingReq{} }
func (*PingReq) ProtoMessage() {}
func (*PingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{4}
}
func (m *PingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReq.Merge(m, src)
}
func (m *PingReq) XXX_Size() int {
	return m.Size()
}
func (m *PingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReq.DiscardUnknown(m)
}

var xxx_messageInfo_PingReq proto.InternalMessageInfo

func (m *PingReq) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PingResp struct {
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp"`
}

func (m *PingResp) Reset()      { *m = PingResp{} }
func (*PingResp) ProtoMessage() {}
func (*PingResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{5}
}
func (m *PingResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResp.Merge(m, src)
}
func (m *PingResp) XXX_Size() int {
	return m.Size()
}
func (m *PingResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResp.DiscardUnknown(m)
}

var xxx_messageInfo_PingResp proto.InternalMessageInfo

func (m *PingResp) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

//获取记录的指定字段
type GetReq struct {
	Version *int64   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Fields  []string `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
	All     bool     `protobuf:"varint,3,opt,name=all" json:"all"`
}

func (m *GetReq) Reset()      { *m = GetReq{} }
func (*GetReq) ProtoMessage() {}
func (*GetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{6}
}
func (m *GetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReq.Merge(m, src)
}
func (m *GetReq) XXX_Size() int {
	return m.Size()
}
func (m *GetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetReq proto.InternalMessageInfo

func (m *GetReq) GetVersion() int64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *GetReq) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *GetReq) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type GetResp struct {
	Version *int64   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Fields  []*Field `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (m *GetResp) Reset()      { *m = GetResp{} }
func (*GetResp) ProtoMessage() {}
func (*GetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{7}
}
func (m *GetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResp.Merge(m, src)
}
func (m *GetResp) XXX_Size() int {
	return m.Size()
}
func (m *GetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetResp proto.InternalMessageInfo

func (m *GetResp) GetVersion() int64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *GetResp) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

//
//  设置记录的指定字段，如果version被指定则只有当存储数据的版本号与指定的version一致时才执行设置
//  (注:未指定版本好的情况下，如果记录不存在则新增记录，新增记录时如果有未设定的字段，将会用设定的默认值初始化)
type SetReq struct {
	Version *int64   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Fields  []*Field `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (m *SetReq) Reset()      { *m = SetReq{} }
func (*SetReq) ProtoMessage() {}
func (*SetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{8}
}
func (m *SetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReq.Merge(m, src)
}
func (m *SetReq) XXX_Size() int {
	return m.Size()
}
func (m *SetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetReq proto.InternalMessageInfo

func (m *SetReq) GetVersion() int64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *SetReq) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type SetResp struct {
}

func (m *SetResp) Reset()      { *m = SetResp{} }
func (*SetResp) ProtoMessage() {}
func (*SetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{9}
}
func (m *SetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetResp.Merge(m, src)
}
func (m *SetResp) XXX_Size() int {
	return m.Size()
}
func (m *SetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetResp proto.InternalMessageInfo

//
//  与set指令类似，只有当记录不存在时才能成功设置
type SetNxReq struct {
	Fields []*Field `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (m *SetNxReq) Reset()      { *m = SetNxReq{} }
func (*SetNxReq) ProtoMessage() {}
func (*SetNxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{10}
}
func (m *SetNxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetNxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetNxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetNxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetNxReq.Merge(m, src)
}
func (m *SetNxReq) XXX_Size() int {
	return m.Size()
}
func (m *SetNxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetNxReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetNxReq proto.InternalMessageInfo

func (m *SetNxReq) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type SetNxResp struct {
	Fields []*Field `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (m *SetNxResp) Reset()      { *m = SetNxResp{} }
func (*SetNxResp) ProtoMessage() {}
func (*SetNxResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{11}
}
func (m *SetNxResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetNxResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetNxResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetNxResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetNxResp.Merge(m, src)
}
func (m *SetNxResp) XXX_Size() int {
	return m.Size()
}
func (m *SetNxResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetNxResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetNxResp proto.InternalMessageInfo

func (m *SetNxResp) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

//
//  将记录的field.name字段增加field.value,并返回增加后的值(field.value只支持int类型，如果记录不存在会用
//  记录的默认值初始化记录，int类型默认值为0，并在此基础上增加)
type IncrByReq struct {
	Field *Field `protobuf:"bytes,1,req,name=field" json:"field,omitempty"`
}

func (m *IncrByReq) Reset()      { *m = IncrByReq{} }
func (*IncrByReq) ProtoMessage() {}
func (*IncrByReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{12}
}
func (m *IncrByReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncrByReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncrByReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncrByReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrByReq.Merge(m, src)
}
func (m *IncrByReq) XXX_Size() int {
	return m.Size()
}
func (m *IncrByReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrByReq.DiscardUnknown(m)
}

var xxx_messageInfo_IncrByReq proto.InternalMessageInfo

func (m *IncrByReq) GetField() *Field {
	if m != nil {
		return m.Field
	}
	return nil
}

type IncrByResp struct {
	Field *Field `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *IncrByResp) Reset()      { *m = IncrByResp{} }
func (*IncrByResp) ProtoMessage() {}
func (*IncrByResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{13}
}
func (m *IncrByResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncrByResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncrByResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncrByResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrByResp.Merge(m, src)
}
func (m *IncrByResp) XXX_Size() int {
	return m.Size()
}
func (m *IncrByResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrByResp.DiscardUnknown(m)
}

var xxx_messageInfo_IncrByResp proto.InternalMessageInfo

func (m *IncrByResp) GetField() *Field {
	if m != nil {
		return m.Field
	}
	return nil
}

//
//  如果记录存在且old.name的值与old.value相等，将其设定为new.value
//  如果错误码为ERR_CAS_NOT_EQUAL，返回old.name的当前值。
type CompareAndSetReq struct {
	Old *Field `protobuf:"bytes,1,req,name=old" json:"old,omitempty"`
	New *Field `protobuf:"bytes,2,req,name=new" json:"new,omitempty"`
}

func (m *CompareAndSetReq) Reset()      { *m = CompareAndSetReq{} }
func (*CompareAndSetReq) ProtoMessage() {}
func (*CompareAndSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{14}
}
func (m *CompareAndSetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareAndSetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareAndSetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareAndSetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareAndSetReq.Merge(m, src)
}
func (m *CompareAndSetReq) XXX_Size() int {
	return m.Size()
}
func (m *CompareAndSetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareAndSetReq.DiscardUnknown(m)
}

var xxx_messageInfo_CompareAndSetReq proto.InternalMessageInfo

func (m *CompareAndSetReq) GetOld() *Field {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *CompareAndSetReq) GetNew() *Field {
	if m != nil {
		return m.New
	}
	return nil
}

type CompareAndSetResp struct {
	Value *Field `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *CompareAndSetResp) Reset()      { *m = CompareAndSetResp{} }
func (*CompareAndSetResp) ProtoMessage() {}
func (*CompareAndSetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{15}
}
func (m *CompareAndSetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareAndSetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareAndSetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareAndSetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareAndSetResp.Merge(m, src)
}
func (m *CompareAndSetResp) XXX_Size() int {
	return m.Size()
}
func (m *CompareAndSetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareAndSetResp.DiscardUnknown(m)
}

var xxx_messageInfo_CompareAndSetResp proto.InternalMessageInfo

func (m *CompareAndSetResp) GetValue() *Field {
	if m != nil {
		return m.Value
	}
	return nil
}

//
//  如果记录不存在，或old.name的值与old.value相等，将其设定为new.value
//  如果错误码为ERR_CAS_NOT_EQUAL，返回old.name的当前值。(注意:如果记录不存在，old.name以外的字段将被设置为初始值)
type CompareAndSetNxReq struct {
	Old *Field `protobuf:"bytes,1,req,name=old" json:"old,omitempty"`
	New *Field `protobuf:"bytes,2,req,name=new" json:"new,omitempty"`
}

func (m *CompareAndSetNxReq) Reset()      { *m = CompareAndSetNxReq{} }
func (*CompareAndSetNxReq) ProtoMessage() {}
func (*CompareAndSetNxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{16}
}
func (m *CompareAndSetNxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareAndSetNxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareAndSetNxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareAndSetNxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareAndSetNxReq.Merge(m, src)
}
func (m *CompareAndSetNxReq) XXX_Size() int {
	return m.Size()
}
func (m *CompareAndSetNxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareAndSetNxReq.DiscardUnknown(m)
}

var xxx_messageInfo_CompareAndSetNxReq proto.InternalMessageInfo

func (m *CompareAndSetNxReq) GetOld() *Field {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *CompareAndSetNxReq) GetNew() *Field {
	if m != nil {
		return m.New
	}
	return nil
}

type CompareAndSetNxResp struct {
	Value *Field `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *CompareAndSetNxResp) Reset()      { *m = CompareAndSetNxResp{} }
func (*CompareAndSetNxResp) ProtoMessage() {}
func (*CompareAndSetNxResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{17}
}
func (m *CompareAndSetNxResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareAndSetNxResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareAndSetNxResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareAndSetNxResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareAndSetNxResp.Merge(m, src)
}
func (m *CompareAndSetNxResp) XXX_Size() int {
	return m.Size()
}
func (m *CompareAndSetNxResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareAndSetNxResp.DiscardUnknown(m)
}

var xxx_messageInfo_CompareAndSetNxResp proto.InternalMessageInfo

func (m *CompareAndSetNxResp) GetValue() *Field {
	if m != nil {
		return m.Value
	}
	return nil
}

//删除命令(只支持删除整个记录，不支持删除记录的字段)
type DelReq struct {
}

func (m *DelReq) Reset()      { *m = DelReq{} }
func (*DelReq) ProtoMessage() {}
func (*DelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{18}
}
func (m *DelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelReq.Merge(m, src)
}
func (m *DelReq) XXX_Size() int {
	return m.Size()
}
func (m *DelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelReq proto.InternalMessageInfo

type DelResp struct {
}

func (m *DelResp) Reset()      { *m = DelResp{} }
func (*DelResp) ProtoMessage() {}
func (*DelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{19}
}
func (m *DelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelResp.Merge(m, src)
}
func (m *DelResp) XXX_Size() int {
	return m.Size()
}
func (m *DelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DelResp.DiscardUnknown(m)
}

var xxx_messageInfo_DelResp proto.InternalMessageInfo

type KickReq struct {
}

func (m *KickReq) Reset()      { *m = KickReq{} }
func (*KickReq) ProtoMessage() {}
func (*KickReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{20}
}
func (m *KickReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickReq.Merge(m, src)
}
func (m *KickReq) XXX_Size() int {
	return m.Size()
}
func (m *KickReq) XXX_DiscardUnknown() {
	xxx_messageInfo_KickReq.DiscardUnknown(m)
}

var xxx_messageInfo_KickReq proto.InternalMessageInfo

type KickResp struct {
}

func (m *KickResp) Reset()      { *m = KickResp{} }
func (*KickResp) ProtoMessage() {}
func (*KickResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{21}
}
func (m *KickResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickResp.Merge(m, src)
}
func (m *KickResp) XXX_Size() int {
	return m.Size()
}
func (m *KickResp) XXX_DiscardUnknown() {
	xxx_messageInfo_KickResp.DiscardUnknown(m)
}

var xxx_messageInfo_KickResp proto.InternalMessageInfo

type ScanField struct {
	Field   string `protobuf:"bytes,1,opt,name=field" json:"field"`
	Version int64  `protobuf:"varint,2,opt,name=version" json:"version"`
}

func (m *ScanField) Reset()      { *m = ScanField{} }
func (*ScanField) ProtoMessage() {}
func (*ScanField) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{22}
}
func (m *ScanField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanField.Merge(m, src)
}
func (m *ScanField) XXX_Size() int {
	return m.Size()
}
func (m *ScanField) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanField.DiscardUnknown(m)
}

var xxx_messageInfo_ScanField proto.InternalMessageInfo

func (m *ScanField) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *ScanField) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type ScannerReq struct {
	Table   string       `protobuf:"bytes,1,opt,name=table" json:"table"`
	Version int64        `protobuf:"varint,2,opt,name=version" json:"version"`
	Slots   []byte       `protobuf:"bytes,3,opt,name=slots" json:"slots"`
	Store   int32        `protobuf:"varint,4,opt,name=store" json:"store"`
	Fields  []*ScanField `protobuf:"bytes,5,rep,name=fields" json:"fields,omitempty"`
	Timeout int64        `protobuf:"varint,6,opt,name=timeout" json:"timeout"`
}

func (m *ScannerReq) Reset()      { *m = ScannerReq{} }
func (*ScannerReq) ProtoMessage() {}
func (*ScannerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{23}
}
func (m *ScannerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScannerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScannerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScannerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScannerReq.Merge(m, src)
}
func (m *ScannerReq) XXX_Size() int {
	return m.Size()
}
func (m *ScannerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ScannerReq.DiscardUnknown(m)
}

var xxx_messageInfo_ScannerReq proto.InternalMessageInfo

func (m *ScannerReq) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *ScannerReq) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ScannerReq) GetSlots() []byte {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *ScannerReq) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *ScannerReq) GetFields() []*ScanField {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ScannerReq) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type ScannerResp struct {
	ErrCode int32 `protobuf:"varint,1,opt,name=errCode" json:"errCode"`
}

func (m *ScannerResp) Reset()      { *m = ScannerResp{} }
func (*ScannerResp) ProtoMessage() {}
func (*ScannerResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{24}
}
func (m *ScannerResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScannerResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScannerResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScannerResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScannerResp.Merge(m, src)
}
func (m *ScannerResp) XXX_Size() int {
	return m.Size()
}
func (m *ScannerResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ScannerResp.DiscardUnknown(m)
}

var xxx_messageInfo_ScannerResp proto.InternalMessageInfo

func (m *ScannerResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

type ScanNextReq struct {
	Count   int32 `protobuf:"varint,1,opt,name=count" json:"count"`
	Timeout int64 `protobuf:"varint,2,opt,name=timeout" json:"timeout"`
}

func (m *ScanNextReq) Reset()      { *m = ScanNextReq{} }
func (*ScanNextReq) ProtoMessage() {}
func (*ScanNextReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{25}
}
func (m *ScanNextReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanNextReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanNextReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanNextReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanNextReq.Merge(m, src)
}
func (m *ScanNextReq) XXX_Size() int {
	return m.Size()
}
func (m *ScanNextReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanNextReq.DiscardUnknown(m)
}

var xxx_messageInfo_ScanNextReq proto.InternalMessageInfo

func (m *ScanNextReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ScanNextReq) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type Row struct {
	Key     string   `protobuf:"bytes,1,req,name=key" json:"key"`
	Version int64    `protobuf:"varint,2,req,name=version" json:"version"`
	Fields  []*Field `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty"`
	Dummy   bool     `protobuf:"varint,4,opt,name=dummy" json:"dummy"`
}

func (m *Row) Reset()      { *m = Row{} }
func (*Row) ProtoMessage() {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{26}
}
func (m *Row) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Row.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return m.Size()
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Row) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Row) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Row) GetDummy() bool {
	if m != nil {
		return m.Dummy
	}
	return false
}

type ScanNextResp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode" json:"errCode"`
	Slot    int32  `protobuf:"varint,2,opt,name=slot" json:"slot"`
	Rows    []*Row `protobuf:"bytes,3,rep,name=rows" json:"rows,omitempty"`
}

func (m *ScanNextResp) Reset()      { *m = ScanNextResp{} }
func (*ScanNextResp) ProtoMessage() {}
func (*ScanNextResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_178c4910b45e4c52, []int{27}
}
func (m *ScanNextResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanNextResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanNextResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanNextResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanNextResp.Merge(m, src)
}
func (m *ScanNextResp) XXX_Size() int {
	return m.Size()
}
func (m *ScanNextResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanNextResp.DiscardUnknown(m)
}

var xxx_messageInfo_ScanNextResp proto.InternalMessageInfo

func (m *ScanNextResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ScanNextResp) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ScanNextResp) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.CmdType", CmdType_name, CmdType_value)
	proto.RegisterEnum("proto.ValueType", ValueType_name, ValueType_value)
	proto.RegisterType((*LoginReq)(nil), "proto.loginReq")
	proto.RegisterType((*LoginResp)(nil), "proto.loginResp")
	proto.RegisterType((*Value)(nil), "proto.value")
	proto.RegisterType((*Field)(nil), "proto.field")
	proto.RegisterType((*PingReq)(nil), "proto.ping_req")
	proto.RegisterType((*PingResp)(nil), "proto.ping_resp")
	proto.RegisterType((*GetReq)(nil), "proto.get_req")
	proto.RegisterType((*GetResp)(nil), "proto.get_resp")
	proto.RegisterType((*SetReq)(nil), "proto.set_req")
	proto.RegisterType((*SetResp)(nil), "proto.set_resp")
	proto.RegisterType((*SetNxReq)(nil), "proto.set_nx_req")
	proto.RegisterType((*SetNxResp)(nil), "proto.set_nx_resp")
	proto.RegisterType((*IncrByReq)(nil), "proto.incr_by_req")
	proto.RegisterType((*IncrByResp)(nil), "proto.incr_by_resp")
	proto.RegisterType((*CompareAndSetReq)(nil), "proto.compare_and_set_req")
	proto.RegisterType((*CompareAndSetResp)(nil), "proto.compare_and_set_resp")
	proto.RegisterType((*CompareAndSetNxReq)(nil), "proto.compare_and_set_nx_req")
	proto.RegisterType((*CompareAndSetNxResp)(nil), "proto.compare_and_set_nx_resp")
	proto.RegisterType((*DelReq)(nil), "proto.del_req")
	proto.RegisterType((*DelResp)(nil), "proto.del_resp")
	proto.RegisterType((*KickReq)(nil), "proto.kick_req")
	proto.RegisterType((*KickResp)(nil), "proto.kick_resp")
	proto.RegisterType((*ScanField)(nil), "proto.scan_field")
	proto.RegisterType((*ScannerReq)(nil), "proto.scanner_req")
	proto.RegisterType((*ScannerResp)(nil), "proto.scanner_resp")
	proto.RegisterType((*ScanNextReq)(nil), "proto.scan_next_req")
	proto.RegisterType((*Row)(nil), "proto.row")
	proto.RegisterType((*ScanNextResp)(nil), "proto.scan_next_resp")
}

func init() { proto.RegisterFile("flyfish.proto", fileDescriptor_178c4910b45e4c52) }

var fileDescriptor_178c4910b45e4c52 = []byte{
	// 949 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0x76, 0x8f, 0x3d, 0x1e, 0x4f, 0xd9, 0x59, 0x66, 0x7b, 0xa3, 0x60, 0x59, 0x68, 0x88, 0x5a,
	0x1c, 0x42, 0x0e, 0x59, 0x11, 0x2e, 0x08, 0x69, 0x0f, 0x24, 0x08, 0x88, 0x22, 0x85, 0x95, 0x03,
	0x08, 0x4e, 0xd6, 0xd8, 0xee, 0x98, 0xc1, 0xe3, 0xee, 0xd9, 0xe9, 0x8e, 0x7f, 0x4e, 0x70, 0xe1,
	0xce, 0x1b, 0x70, 0xe5, 0x51, 0x72, 0xe0, 0x90, 0xe3, 0x9e, 0x10, 0x71, 0x2e, 0x1c, 0xf7, 0x11,
	0x50, 0xff, 0x8c, 0x3d, 0xb3, 0x71, 0x48, 0x24, 0x4e, 0x2e, 0x7f, 0x35, 0x55, 0xdf, 0x57, 0xd5,
	0x55, 0xdd, 0xb0, 0x75, 0x91, 0x2c, 0x2e, 0x62, 0xf1, 0xe3, 0x41, 0x9a, 0x71, 0xc9, 0xb1, 0xab,
	0x7f, 0x3a, 0xdb, 0x23, 0x3e, 0xe2, 0xda, 0x7c, 0xae, 0x2c, 0xe3, 0x24, 0x43, 0x68, 0x24, 0x7c,
	0x14, 0xb3, 0x2e, 0x7d, 0x85, 0x77, 0xa1, 0x31, 0xe0, 0x93, 0x34, 0xa3, 0x42, 0xb4, 0xd1, 0x2e,
	0xda, 0x6b, 0x1c, 0xd5, 0xae, 0xfe, 0x7a, 0xbf, 0xd2, 0x5d, 0xa1, 0x38, 0x04, 0x4f, 0x0c, 0x22,
	0xc6, 0x68, 0xd6, 0x76, 0x0a, 0x1f, 0xe4, 0x20, 0xde, 0x81, 0xea, 0x98, 0x2e, 0xda, 0xd5, 0x5d,
	0xb4, 0xd7, 0xb2, 0x3e, 0x05, 0x90, 0x08, 0x7c, 0xcb, 0x22, 0x52, 0xbc, 0x0d, 0x0e, 0x1f, 0x97,
	0x08, 0x1c, 0x3e, 0x2e, 0x91, 0x3b, 0x1b, 0xc9, 0xdf, 0x83, 0x7a, 0x46, 0x23, 0xc1, 0x99, 0xce,
	0xef, 0x5b, 0xbf, 0xc5, 0xc8, 0xef, 0x08, 0xdc, 0x69, 0x94, 0x5c, 0x52, 0xbc, 0x0f, 0xb5, 0x6f,
	0x16, 0x29, 0x6d, 0xa3, 0x5d, 0x67, 0xef, 0xc9, 0x61, 0x60, 0x0a, 0x3d, 0xf8, 0x4e, 0xf9, 0x14,
	0x6e, 0xe3, 0xf4, 0x37, 0x4a, 0xf0, 0x09, 0x93, 0x9a, 0xb0, 0x9a, 0x0b, 0x3e, 0x61, 0x12, 0x77,
	0xc0, 0xfd, 0x22, 0xe1, 0x91, 0xd4, 0x54, 0xc8, 0x7a, 0x0c, 0xa4, 0x74, 0x9c, 0xcb, 0x2c, 0x66,
	0xa3, 0x76, 0xad, 0xa8, 0xc3, 0x60, 0xb8, 0x0d, 0xb5, 0xa3, 0x84, 0xf7, 0xdb, 0x6e, 0xa1, 0x07,
	0x1a, 0x21, 0x2f, 0xc0, 0xbd, 0x88, 0x69, 0x32, 0x54, 0x9f, 0xb0, 0x68, 0x42, 0x75, 0x0b, 0xf2,
	0x70, 0x8d, 0xe0, 0x0e, 0xa0, 0xa9, 0x16, 0xd3, 0x3c, 0x6c, 0x59, 0xdd, 0xba, 0xa6, 0x2e, 0x9a,
	0x92, 0x03, 0x68, 0xa4, 0x31, 0x1b, 0xf5, 0x32, 0xfa, 0x0a, 0x13, 0xf0, 0x65, 0x3c, 0xa1, 0x42,
	0x46, 0x93, 0x54, 0xa7, 0xc9, 0xc5, 0xaf, 0x61, 0xf2, 0x1c, 0x7c, 0xfb, 0xbd, 0x48, 0xcb, 0x01,
	0xce, 0xe6, 0x80, 0x1f, 0xc0, 0x1b, 0x51, 0xa9, 0xf3, 0x87, 0xe0, 0x4d, 0x69, 0x26, 0x62, 0xce,
	0x0a, 0xd9, 0x51, 0x37, 0x07, 0xf1, 0x0e, 0xd4, 0x75, 0x29, 0xea, 0xa8, 0xaa, 0x7b, 0x7e, 0xd7,
	0xfe, 0x53, 0xed, 0x8c, 0x92, 0x44, 0x37, 0x2d, 0x3f, 0x3f, 0x05, 0x90, 0x97, 0xd0, 0x30, 0xa9,
	0x45, 0xfa, 0x60, 0xee, 0x0f, 0x4a, 0xb9, 0xd7, 0x8d, 0xd0, 0x60, 0xce, 0x44, 0xbe, 0x06, 0x4f,
	0x3c, 0x52, 0xec, 0xe3, 0x12, 0x02, 0x34, 0x84, 0x95, 0x48, 0x0e, 0x01, 0x94, 0xcd, 0xe6, 0x3a,
	0xff, 0x3a, 0x1e, 0xfd, 0x47, 0xfc, 0xc7, 0xd0, 0x5c, 0xc5, 0x88, 0xf4, 0x91, 0x41, 0x1f, 0x41,
	0x33, 0x66, 0x83, 0xac, 0xd7, 0x5f, 0xd8, 0x63, 0x35, 0x13, 0xa2, 0x47, 0xf7, 0xed, 0x18, 0xe3,
	0x22, 0x87, 0xd0, 0x5a, 0x87, 0xe8, 0x93, 0x5d, 0xc5, 0xa0, 0xfb, 0x62, 0xbe, 0x85, 0x67, 0x6a,
	0x8b, 0xa2, 0x8c, 0xf6, 0x22, 0x36, 0xec, 0xad, 0x1b, 0x57, 0xe5, 0xf7, 0x90, 0x29, 0x87, 0xf2,
	0x33, 0x3a, 0x6b, 0x3b, 0x9b, 0xfc, 0x8c, 0xce, 0xc8, 0xa7, 0xb0, 0x7d, 0x37, 0xad, 0x91, 0xa4,
	0xa7, 0x76, 0xb3, 0x24, 0xed, 0x22, 0xdf, 0xc3, 0xce, 0xdb, 0xb1, 0xb6, 0xdd, 0xff, 0x57, 0xd5,
	0x0b, 0x78, 0x77, 0x63, 0xe6, 0x47, 0x0a, 0xf3, 0xc1, 0x1b, 0xd2, 0x44, 0x29, 0x51, 0x23, 0x61,
	0x4c, 0x91, 0x2a, 0x7b, 0x1c, 0x0f, 0xc6, 0x1a, 0x6f, 0x82, 0x6f, 0x6d, 0x91, 0x92, 0xaf, 0x00,
	0xd4, 0xed, 0xd7, 0x33, 0xab, 0xdd, 0x29, 0x9e, 0x46, 0xbe, 0xdb, 0x76, 0xed, 0x0b, 0x73, 0x5a,
	0xdc, 0xc0, 0x1c, 0x24, 0x7f, 0x22, 0x68, 0xda, 0x8b, 0x54, 0x37, 0xa2, 0x03, 0xae, 0x8c, 0xfa,
	0x49, 0xf9, 0x9e, 0x30, 0xd0, 0x43, 0xb9, 0x54, 0xac, 0x48, 0xb8, 0x14, 0xa5, 0xab, 0xd8, 0x40,
	0xda, 0x27, 0x79, 0x46, 0xf5, 0xf5, 0xe5, 0xae, 0x7c, 0x0a, 0xc2, 0x1f, 0xae, 0xc6, 0xd6, 0xd5,
	0x63, 0xfb, 0xd4, 0xb6, 0x68, 0x5d, 0xe2, 0x6a, 0xd7, 0x43, 0xf0, 0xd4, 0xdd, 0xc1, 0x2f, 0x65,
	0xbb, 0x5e, 0x94, 0x60, 0x41, 0x72, 0x00, 0xad, 0x75, 0x35, 0x66, 0xef, 0x69, 0x96, 0x1d, 0xf3,
	0xa1, 0x29, 0x28, 0x27, 0xce, 0x41, 0x72, 0x0a, 0x5b, 0x9a, 0x85, 0xd1, 0xb9, 0xcc, 0xeb, 0x1f,
	0xf0, 0x4b, 0x26, 0x4b, 0x9f, 0x1b, 0xa8, 0x48, 0xee, 0x6c, 0x22, 0xff, 0x19, 0xaa, 0x19, 0x9f,
	0xe5, 0xef, 0x91, 0x9a, 0x25, 0xbf, 0xf0, 0x1e, 0x95, 0xdb, 0xe7, 0xdc, 0x6d, 0xdf, 0x7a, 0x7b,
	0xab, 0xf7, 0x6f, 0xaf, 0x12, 0x38, 0xbc, 0x9c, 0x4c, 0x16, 0xba, 0x91, 0xf9, 0x7d, 0x67, 0x20,
	0xf2, 0x13, 0x3c, 0x29, 0x56, 0xf3, 0x70, 0xfd, 0xea, 0x55, 0x50, 0xe7, 0xa3, 0xeb, 0xc9, 0x9d,
	0x1a, 0xc1, 0x21, 0xd4, 0x32, 0x3e, 0xcb, 0xb5, 0x80, 0xd5, 0x92, 0xf1, 0x59, 0x57, 0xe3, 0xfb,
	0xbf, 0x22, 0xf0, 0x8e, 0x27, 0x43, 0xfd, 0xa0, 0x35, 0xa0, 0xf6, 0x32, 0x66, 0xa3, 0x00, 0x61,
	0x0f, 0xaa, 0xe7, 0x54, 0x06, 0x8e, 0x32, 0xbe, 0xa4, 0x32, 0xa8, 0x2a, 0xe3, 0x73, 0x9a, 0x04,
	0x35, 0x0c, 0x50, 0x3f, 0x61, 0x83, 0xec, 0x68, 0x11, 0xb8, 0xd8, 0x07, 0xf7, 0x9c, 0xca, 0xb3,
	0x79, 0x50, 0xc7, 0x4f, 0x61, 0xeb, 0xd8, 0x6c, 0xce, 0x67, 0x6c, 0xa8, 0x62, 0x3d, 0xfc, 0x0c,
	0xde, 0x29, 0x41, 0x67, 0xf3, 0xa0, 0xa1, 0x38, 0x4e, 0xe3, 0xc1, 0x38, 0xf0, 0x71, 0x0b, 0x1a,
	0xe7, 0x83, 0x88, 0x9d, 0xd1, 0xb9, 0x0c, 0x60, 0xff, 0x14, 0xfc, 0xd5, 0x2b, 0x8b, 0x9b, 0xe0,
	0xc5, 0x6c, 0x1a, 0xc5, 0xc9, 0x30, 0xa8, 0x28, 0x66, 0x16, 0x27, 0x01, 0x52, 0xcc, 0x42, 0xbf,
	0x93, 0x46, 0x57, 0xcc, 0x94, 0x2e, 0x1f, 0xdc, 0x0b, 0xf5, 0xb2, 0x06, 0x35, 0x95, 0xba, 0x9f,
	0xf0, 0x7e, 0xe0, 0x1e, 0x7d, 0x72, 0x75, 0x13, 0xa2, 0xeb, 0x9b, 0x10, 0xbd, 0xbe, 0x09, 0x2b,
	0x6f, 0x6e, 0x42, 0xf4, 0xcb, 0x32, 0x44, 0x7f, 0x2c, 0x43, 0x74, 0xb5, 0x0c, 0xd1, 0xf5, 0x32,
	0x44, 0x7f, 0x2f, 0x43, 0xf4, 0xcf, 0x32, 0xac, 0xbc, 0x59, 0x86, 0xe8, 0xb7, 0xdb, 0xb0, 0x72,
	0x7d, 0x1b, 0x56, 0x5e, 0xdf, 0x86, 0x95, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x7c, 0x07,
	0xf0, 0xff, 0x08, 0x00, 0x00,
}

func (x CmdType) String() string {
	s, ok := CmdType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ValueType) String() string {
	s, ok := ValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LoginReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginReq)
	if !ok {
		that2, ok := that.(LoginReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Compress != that1.Compress {
		return false
	}
	if this.Scanner != that1.Scanner {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *LoginResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginResp)
	if !ok {
		that2, ok := that.(LoginResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Compress != that1.Compress {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value)
	if !ok {
		that2, ok := that.(Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Int != that1.Int {
		return false
	}
	if this.Float != that1.Float {
		return false
	}
	if this.String_ != that1.String_ {
		return false
	}
	if !bytes.Equal(this.Blob, that1.Blob) {
		return false
	}
	return true
}
func (this *Field) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field)
	if !ok {
		that2, ok := that.(Field)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.V.Equal(that1.V) {
		return false
	}
	return true
}
func (this *PingReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingReq)
	if !ok {
		that2, ok := that.(PingReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *PingResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingResp)
	if !ok {
		that2, ok := that.(PingResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *GetReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReq)
	if !ok {
		that2, ok := that.(GetReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != nil && that1.Version != nil {
		if *this.Version != *that1.Version {
			return false
		}
	} else if this.Version != nil {
		return false
	} else if that1.Version != nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if this.Fields[i] != that1.Fields[i] {
			return false
		}
	}
	if this.All != that1.All {
		return false
	}
	return true
}
func (this *GetResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResp)
	if !ok {
		that2, ok := that.(GetResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != nil && that1.Version != nil {
		if *this.Version != *that1.Version {
			return false
		}
	} else if this.Version != nil {
		return false
	} else if that1.Version != nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *SetReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetReq)
	if !ok {
		that2, ok := that.(SetReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != nil && that1.Version != nil {
		if *this.Version != *that1.Version {
			return false
		}
	} else if this.Version != nil {
		return false
	} else if that1.Version != nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *SetResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetResp)
	if !ok {
		that2, ok := that.(SetResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetNxReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetNxReq)
	if !ok {
		that2, ok := that.(SetNxReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *SetNxResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetNxResp)
	if !ok {
		that2, ok := that.(SetNxResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *IncrByReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IncrByReq)
	if !ok {
		that2, ok := that.(IncrByReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Field.Equal(that1.Field) {
		return false
	}
	return true
}
func (this *IncrByResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IncrByResp)
	if !ok {
		that2, ok := that.(IncrByResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Field.Equal(that1.Field) {
		return false
	}
	return true
}
func (this *CompareAndSetReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompareAndSetReq)
	if !ok {
		that2, ok := that.(CompareAndSetReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Old.Equal(that1.Old) {
		return false
	}
	if !this.New.Equal(that1.New) {
		return false
	}
	return true
}
func (this *CompareAndSetResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompareAndSetResp)
	if !ok {
		that2, ok := that.(CompareAndSetResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *CompareAndSetNxReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompareAndSetNxReq)
	if !ok {
		that2, ok := that.(CompareAndSetNxReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Old.Equal(that1.Old) {
		return false
	}
	if !this.New.Equal(that1.New) {
		return false
	}
	return true
}
func (this *CompareAndSetNxResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompareAndSetNxResp)
	if !ok {
		that2, ok := that.(CompareAndSetNxResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *DelReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelReq)
	if !ok {
		that2, ok := that.(DelReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DelResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelResp)
	if !ok {
		that2, ok := that.(DelResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *KickReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KickReq)
	if !ok {
		that2, ok := that.(KickReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *KickResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KickResp)
	if !ok {
		that2, ok := that.(KickResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ScanField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScanField)
	if !ok {
		that2, ok := that.(ScanField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *ScannerReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScannerReq)
	if !ok {
		that2, ok := that.(ScannerReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Table != that1.Table {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.Slots, that1.Slots) {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *ScannerResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScannerResp)
	if !ok {
		that2, ok := that.(ScannerResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	return true
}
func (this *ScanNextReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScanNextReq)
	if !ok {
		that2, ok := that.(ScanNextReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *Row) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Row)
	if !ok {
		that2, ok := that.(Row)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	if this.Dummy != that1.Dummy {
		return false
	}
	return true
}
func (this *ScanNextResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScanNextResp)
	if !ok {
		that2, ok := that.(ScanNextResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if len(this.Rows) != len(that1.Rows) {
		return false
	}
	for i := range this.Rows {
		if !this.Rows[i].Equal(that1.Rows[i]) {
			return false
		}
	}
	return true
}
func (this *LoginReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.LoginReq{")
	s = append(s, "Compress: "+fmt.Sprintf("%#v", this.Compress)+",\n")
	s = append(s, "Scanner: "+fmt.Sprintf("%#v", this.Scanner)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.LoginResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Compress: "+fmt.Sprintf("%#v", this.Compress)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.Value{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Int: "+fmt.Sprintf("%#v", this.Int)+",\n")
	s = append(s, "Float: "+fmt.Sprintf("%#v", this.Float)+",\n")
	s = append(s, "String_: "+fmt.Sprintf("%#v", this.String_)+",\n")
	s = append(s, "Blob: "+fmt.Sprintf("%#v", this.Blob)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Field) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Field{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.V != nil {
		s = append(s, "V: "+fmt.Sprintf("%#v", this.V)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PingReq{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PingResp{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.GetReq{")
	if this.Version != nil {
		s = append(s, "Version: "+valueToGoStringFlyfish(this.Version, "int64")+",\n")
	}
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "All: "+fmt.Sprintf("%#v", this.All)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.GetResp{")
	if this.Version != nil {
		s = append(s, "Version: "+valueToGoStringFlyfish(this.Version, "int64")+",\n")
	}
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.SetReq{")
	if this.Version != nil {
		s = append(s, "Version: "+valueToGoStringFlyfish(this.Version, "int64")+",\n")
	}
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.SetResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetNxReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SetNxReq{")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetNxResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SetNxResp{")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IncrByReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.IncrByReq{")
	if this.Field != nil {
		s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IncrByResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.IncrByResp{")
	if this.Field != nil {
		s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompareAndSetReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.CompareAndSetReq{")
	if this.Old != nil {
		s = append(s, "Old: "+fmt.Sprintf("%#v", this.Old)+",\n")
	}
	if this.New != nil {
		s = append(s, "New: "+fmt.Sprintf("%#v", this.New)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompareAndSetResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.CompareAndSetResp{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompareAndSetNxReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.CompareAndSetNxReq{")
	if this.Old != nil {
		s = append(s, "Old: "+fmt.Sprintf("%#v", this.Old)+",\n")
	}
	if this.New != nil {
		s = append(s, "New: "+fmt.Sprintf("%#v", this.New)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompareAndSetNxResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.CompareAndSetNxResp{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.DelReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.DelResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KickReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.KickReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KickResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.KickResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScanField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ScanField{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScannerReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&proto.ScannerReq{")
	s = append(s, "Table: "+fmt.Sprintf("%#v", this.Table)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Slots: "+fmt.Sprintf("%#v", this.Slots)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScannerResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.ScannerResp{")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScanNextReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ScanNextReq{")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Row) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.Row{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "Dummy: "+fmt.Sprintf("%#v", this.Dummy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScanNextResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.ScanNextResp{")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	if this.Rows != nil {
		s = append(s, "Rows: "+fmt.Sprintf("%#v", this.Rows)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlyfish(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintFlyfish(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	i--
	if m.Scanner {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i--
	if m.Compress {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LoginResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfish(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x1a
	i--
	if m.Compress {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Blob != nil {
		i -= len(m.Blob)
		copy(dAtA[i:], m.Blob)
		i = encodeVarintFlyfish(dAtA, i, uint64(len(m.Blob)))
		i--
		dAtA[i] = 0x2a
	}
	i -= len(m.String_)
	copy(dAtA[i:], m.String_)
	i = encodeVarintFlyfish(dAtA, i, uint64(len(m.String_)))
	i--
	dAtA[i] = 0x22
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float))))
	i--
	dAtA[i] = 0x19
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Int))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Field) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.V != nil {
		{
			size, err := m.V.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintFlyfish(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Timestamp))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PingResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Timestamp))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *GetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.All {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintFlyfish(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != nil {
		i = encodeVarintFlyfish(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != nil {
		i = encodeVarintFlyfish(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != nil {
		i = encodeVarintFlyfish(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetNxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetNxReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetNxReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetNxResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetNxResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetNxResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IncrByReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncrByReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncrByReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Field == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("field")
	} else {
		{
			size, err := m.Field.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncrByResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncrByResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncrByResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Field != nil {
		{
			size, err := m.Field.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompareAndSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareAndSetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompareAndSetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.New == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("new")
	} else {
		{
			size, err := m.New.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Old == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("old")
	} else {
		{
			size, err := m.Old.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompareAndSetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareAndSetResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompareAndSetResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompareAndSetNxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareAndSetNxReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompareAndSetNxReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.New == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("new")
	} else {
		{
			size, err := m.New.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Old == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("old")
	} else {
		{
			size, err := m.Old.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompareAndSetNxResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareAndSetNxResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompareAndSetNxResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *KickReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *KickResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ScanField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	i -= len(m.Field)
	copy(dAtA[i:], m.Field)
	i = encodeVarintFlyfish(dAtA, i, uint64(len(m.Field)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ScannerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScannerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScannerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Timeout))
	i--
	dAtA[i] = 0x30
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x20
	if m.Slots != nil {
		i -= len(m.Slots)
		copy(dAtA[i:], m.Slots)
		i = encodeVarintFlyfish(dAtA, i, uint64(len(m.Slots)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	i -= len(m.Table)
	copy(dAtA[i:], m.Table)
	i = encodeVarintFlyfish(dAtA, i, uint64(len(m.Table)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ScannerResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScannerResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScannerResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfish(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ScanNextReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanNextReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanNextReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Timeout))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Dummy {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	i -= len(m.Key)
	copy(dAtA[i:], m.Key)
	i = encodeVarintFlyfish(dAtA, i, uint64(len(m.Key)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ScanNextResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanNextResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanNextResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for iNdEx := len(m.Rows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintFlyfish(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfish(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintFlyfish(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlyfish(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 2
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovFlyfish(uint64(l))
	}
	return n
}

func (m *LoginResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfish(uint64(l))
	return n
}

func (m *Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfish(uint64(m.Type))
	n += 1 + sovFlyfish(uint64(m.Int))
	n += 9
	l = len(m.String_)
	n += 1 + l + sovFlyfish(uint64(l))
	if m.Blob != nil {
		l = len(m.Blob)
		n += 1 + l + sovFlyfish(uint64(l))
	}
	return n
}

func (m *Field) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovFlyfish(uint64(l))
	if m.V != nil {
		l = m.V.Size()
		n += 1 + l + sovFlyfish(uint64(l))
	}
	return n
}

func (m *PingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfish(uint64(m.Timestamp))
	return n
}

func (m *PingResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfish(uint64(m.Timestamp))
	return n
}

func (m *GetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += 1 + sovFlyfish(uint64(*m.Version))
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovFlyfish(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *GetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += 1 + sovFlyfish(uint64(*m.Version))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfish(uint64(l))
		}
	}
	return n
}

func (m *SetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += 1 + sovFlyfish(uint64(*m.Version))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfish(uint64(l))
		}
	}
	return n
}

func (m *SetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetNxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfish(uint64(l))
		}
	}
	return n
}

func (m *SetNxResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfish(uint64(l))
		}
	}
	return n
}

func (m *IncrByReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != nil {
		l = m.Field.Size()
		n += 1 + l + sovFlyfish(uint64(l))
	}
	return n
}

func (m *IncrByResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != nil {
		l = m.Field.Size()
		n += 1 + l + sovFlyfish(uint64(l))
	}
	return n
}

func (m *CompareAndSetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Old != nil {
		l = m.Old.Size()
		n += 1 + l + sovFlyfish(uint64(l))
	}
	if m.New != nil {
		l = m.New.Size()
		n += 1 + l + sovFlyfish(uint64(l))
	}
	return n
}

func (m *CompareAndSetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovFlyfish(uint64(l))
	}
	return n
}

func (m *CompareAndSetNxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Old != nil {
		l = m.Old.Size()
		n += 1 + l + sovFlyfish(uint64(l))
	}
	if m.New != nil {
		l = m.New.Size()
		n += 1 + l + sovFlyfish(uint64(l))
	}
	return n
}

func (m *CompareAndSetNxResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovFlyfish(uint64(l))
	}
	return n
}

func (m *DelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *KickReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *KickResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ScanField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	n += 1 + l + sovFlyfish(uint64(l))
	n += 1 + sovFlyfish(uint64(m.Version))
	return n
}

func (m *ScannerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Table)
	n += 1 + l + sovFlyfish(uint64(l))
	n += 1 + sovFlyfish(uint64(m.Version))
	if m.Slots != nil {
		l = len(m.Slots)
		n += 1 + l + sovFlyfish(uint64(l))
	}
	n += 1 + sovFlyfish(uint64(m.Store))
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfish(uint64(l))
		}
	}
	n += 1 + sovFlyfish(uint64(m.Timeout))
	return n
}

func (m *ScannerResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfish(uint64(m.ErrCode))
	return n
}

func (m *ScanNextReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfish(uint64(m.Count))
	n += 1 + sovFlyfish(uint64(m.Timeout))
	return n
}

func (m *Row) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovFlyfish(uint64(l))
	n += 1 + sovFlyfish(uint64(m.Version))
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfish(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *ScanNextResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfish(uint64(m.ErrCode))
	n += 1 + sovFlyfish(uint64(m.Slot))
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovFlyfish(uint64(l))
		}
	}
	return n
}

func sovFlyfish(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlyfish(x uint64) (n int) {
	return sovFlyfish(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LoginReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginReq{`,
		`Compress:` + fmt.Sprintf("%v", this.Compress) + `,`,
		`Scanner:` + fmt.Sprintf("%v", this.Scanner) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Compress:` + fmt.Sprintf("%v", this.Compress) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Int:` + fmt.Sprintf("%v", this.Int) + `,`,
		`Float:` + fmt.Sprintf("%v", this.Float) + `,`,
		`String_:` + fmt.Sprintf("%v", this.String_) + `,`,
		`Blob:` + fmt.Sprintf("%v", this.Blob) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`V:` + strings.Replace(fmt.Sprintf("%v", this.V), "Value", "Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingReq{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingResp{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReq{`,
		`Version:` + valueToStringFlyfish(this.Version) + `,`,
		`Fields:` + fmt.Sprintf("%v", this.Fields) + `,`,
		`All:` + fmt.Sprintf("%v", this.All) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*Field{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "Field", "Field", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&GetResp{`,
		`Version:` + valueToStringFlyfish(this.Version) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetReq) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*Field{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "Field", "Field", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&SetReq{`,
		`Version:` + valueToStringFlyfish(this.Version) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetResp{`,
		`}`,
	}, "")
	return s
}
func (this *SetNxReq) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*Field{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "Field", "Field", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&SetNxReq{`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetNxResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*Field{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "Field", "Field", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&SetNxResp{`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *IncrByReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IncrByReq{`,
		`Field:` + strings.Replace(fmt.Sprintf("%v", this.Field), "Field", "Field", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IncrByResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IncrByResp{`,
		`Field:` + strings.Replace(fmt.Sprintf("%v", this.Field), "Field", "Field", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompareAndSetReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompareAndSetReq{`,
		`Old:` + strings.Replace(fmt.Sprintf("%v", this.Old), "Field", "Field", 1) + `,`,
		`New:` + strings.Replace(fmt.Sprintf("%v", this.New), "Field", "Field", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompareAndSetResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompareAndSetResp{`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "Field", "Field", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompareAndSetNxReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompareAndSetNxReq{`,
		`Old:` + strings.Replace(fmt.Sprintf("%v", this.Old), "Field", "Field", 1) + `,`,
		`New:` + strings.Replace(fmt.Sprintf("%v", this.New), "Field", "Field", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompareAndSetNxResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompareAndSetNxResp{`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "Field", "Field", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelReq{`,
		`}`,
	}, "")
	return s
}
func (this *DelResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelResp{`,
		`}`,
	}, "")
	return s
}
func (this *KickReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KickReq{`,
		`}`,
	}, "")
	return s
}
func (this *KickResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KickResp{`,
		`}`,
	}, "")
	return s
}
func (this *ScanField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScanField{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScannerReq) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*ScanField{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "ScanField", "ScanField", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&ScannerReq{`,
		`Table:` + fmt.Sprintf("%v", this.Table) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Slots:` + fmt.Sprintf("%v", this.Slots) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScannerResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScannerResp{`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScanNextReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScanNextReq{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Row) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*Field{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "Field", "Field", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&Row{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`Dummy:` + fmt.Sprintf("%v", this.Dummy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScanNextResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRows := "[]*Row{"
	for _, f := range this.Rows {
		repeatedStringForRows += strings.Replace(fmt.Sprintf("%v", f), "Row", "Row", 1) + ","
	}
	repeatedStringForRows += "}"
	s := strings.Join([]string{`&ScanNextResp{`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Rows:` + repeatedStringForRows + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlyfish(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Compress = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scanner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Scanner = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loginResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loginResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Compress = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int", wireType)
			}
			m.Int = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Float = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blob = append(m.Blob[:0], dAtA[iNdEx:postIndex]...)
			if m.Blob == nil {
				m.Blob = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.V == nil {
				m.V = &Value{}
			}
			if err := m.V.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ping_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ping_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ping_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ping_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetNxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set_nx_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set_nx_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetNxResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set_nx_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set_nx_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncrByReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: incr_by_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: incr_by_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Field == nil {
				m.Field = &Field{}
			}
			if err := m.Field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("field")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncrByResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: incr_by_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: incr_by_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Field == nil {
				m.Field = &Field{}
			}
			if err := m.Field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompareAndSetReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: compare_and_set_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: compare_and_set_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Old == nil {
				m.Old = &Field{}
			}
			if err := m.Old.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.New == nil {
				m.New = &Field{}
			}
			if err := m.New.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("old")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("new")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompareAndSetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: compare_and_set_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: compare_and_set_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Field{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompareAndSetNxReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: compare_and_set_nx_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: compare_and_set_nx_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Old == nil {
				m.Old = &Field{}
			}
			if err := m.Old.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.New == nil {
				m.New = &Field{}
			}
			if err := m.New.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("old")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("new")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompareAndSetNxResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: compare_and_set_nx_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: compare_and_set_nx_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Field{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: del_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: del_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: del_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: del_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kick_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kick_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kick_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kick_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: scan_field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: scan_field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScannerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: scanner_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: scanner_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots[:0], dAtA[iNdEx:postIndex]...)
			if m.Slots == nil {
				m.Slots = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &ScanField{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScannerResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: scanner_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: scanner_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanNextReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: scan_next_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: scan_next_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dummy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("version")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanNextResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: scan_next_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: scan_next_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &Row{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlyfish(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlyfish
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyfish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlyfish
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFlyfish
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFlyfish
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFlyfish(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFlyfish
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFlyfish = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlyfish   = fmt.Errorf("proto: integer overflow")
)
