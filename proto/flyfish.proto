syntax = "proto2";
package proto;


import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;


enum CmdType {
  Ping = 1;
  Set = 2;
  Get = 3;
  Del = 4;
  IncrBy = 5;
  SetNx = 6;
  CompareAndSet = 7;
  CompareAndSetNx = 8;
  Kick = 9;
  ScanNext = 10;
}

message loginReq {
  optional bool   compress = 1; //客户端是否支持压缩
  optional bool   scanner  = 2; //是否scanner连接
  optional bytes  key      = 3; 
}

message loginResp {
  optional bool   ok = 1;
  optional bool   compress = 2;
  optional string reason = 3;
}

enum ValueType {
  invaild  = 0;
  nil      = 1;
  string   = 2;
  int      = 3;
  float    = 4;
  blob     = 5;
}

message value {
    required ValueType Type     = 1;
    optional int64     Int      = 2;
    optional double    Float    = 3;
    optional string    String   = 4;
    optional bytes     Blob     = 5;
}

message field {
    optional string name  = 1;
    optional value  v     = 2;
}

message ping_req {
  optional int64 timestamp = 1; 
}

message ping_resp {
  optional int64 timestamp = 2;
}

///get系列命令

//获取记录的指定字段
message get_req {
  optional int64  version = 1[(gogoproto.nullable) = true];
  repeated string fields  = 2;
  optional bool all = 3;
}

message get_resp {
  optional int64  version = 1[(gogoproto.nullable) = true];    
  repeated field  fields = 2; 
}

//更改系列命令

/*
*  设置记录的指定字段，如果version被指定则只有当存储数据的版本号与指定的version一致时才执行设置
*  (注:未指定版本好的情况下，如果记录不存在则新增记录，新增记录时如果有未设定的字段，将会用设定的默认值初始化)
*/
message set_req {
  optional int64  version = 1[(gogoproto.nullable) = true];
  repeated field  fields  = 2;  
}

message set_resp {   
}

/*
*  与set指令类似，只有当记录不存在时才能成功设置
*/
message set_nx_req {
  repeated field  fields  = 1;
}

message set_nx_resp {  
  repeated field  fields  = 1; 
}


/*
*  将记录的field.name字段增加field.value,并返回增加后的值(field.value只支持int类型，如果记录不存在会用
*  记录的默认值初始化记录，int类型默认值为0，并在此基础上增加)  
*/
message incr_by_req {
  required field field  = 1;
}

message incr_by_resp {
  optional field  field = 1;    
}

/*
*  如果记录存在且old.name的值与old.value相等，将其设定为new.value
*  如果错误码为ERR_CAS_NOT_EQUAL，返回old.name的当前值。     
*/
message compare_and_set_req {
  required field  old = 1;
  required field  new = 2;  
}

message compare_and_set_resp {   
  optional field  value = 1;  
}

/*
*  如果记录不存在，或old.name的值与old.value相等，将其设定为new.value
*  如果错误码为ERR_CAS_NOT_EQUAL，返回old.name的当前值。(注意:如果记录不存在，old.name以外的字段将被设置为初始值)
*/ 
message compare_and_set_nx_req {
  required field  old = 1;
  required field  new = 2;   
}

message compare_and_set_nx_resp {  
  optional field  value = 1;  
}


//删除命令(只支持删除整个记录，不支持删除记录的字段)
message del_req {
}

message del_resp {     
}

message kick_req {

}

message kick_resp {
  
}

message scan_field {
  optional string field    = 1;
  optional int64  version  = 2;
}

message scanner_req {
  optional string      table     = 1;
  optional int64       version   = 2;
  optional bytes       slots     = 3;
  optional int32       store     = 4;
  repeated scan_field  fields    = 5;
  optional int64       timeout   = 6;
}

message scanner_resp {
  optional int32  errCode  = 1;
}

message scan_next_req {  
  optional int32  count    = 1;  
  optional int64  timeout  = 2; 
}

message row {
  required string key      = 1;
  required int64  version  = 2;
  repeated field  fields   = 3;
  optional bool   dummy    = 4;
}

message scan_next_resp {
  optional int32  errCode      = 1;
  optional int32  slot         = 2;  
  repeated row    rows         = 3;
}

