// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pd.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KvnodeStoreTransType int32

const (
	KvnodeStoreTransType_TransAddStore KvnodeStoreTransType = 1
	KvnodeStoreTransType_TransRemStore KvnodeStoreTransType = 2
)

var KvnodeStoreTransType_name = map[int32]string{
	1: "TransAddStore",
	2: "TransRemStore",
}

var KvnodeStoreTransType_value = map[string]int32{
	"TransAddStore": 1,
	"TransRemStore": 2,
}

func (x KvnodeStoreTransType) Enum() *KvnodeStoreTransType {
	p := new(KvnodeStoreTransType)
	*p = x
	return p
}

func (x KvnodeStoreTransType) String() string {
	return proto.EnumName(KvnodeStoreTransType_name, int32(x))
}

func (x *KvnodeStoreTransType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KvnodeStoreTransType_value, data, "KvnodeStoreTransType")
	if err != nil {
		return err
	}
	*x = KvnodeStoreTransType(value)
	return nil
}

func (KvnodeStoreTransType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{0}
}

type CmdType int32

const (
	CmdType_KvnodeBoot                 CmdType = 10
	CmdType_KvnodeBootResp             CmdType = 11
	CmdType_NotifyKvnodeStoreTrans     CmdType = 12
	CmdType_NotifyKvnodeStoreTransResp CmdType = 13
	CmdType_SlotTransferPrepare        CmdType = 14
	CmdType_SlotTransferPrepareAck     CmdType = 15
	CmdType_SlotTransferCancel         CmdType = 16
	CmdType_SlotTransferCommit         CmdType = 17
	//控制消息
	CmdType_AddKvnode          CmdType = 20
	CmdType_AddKvnodeResp      CmdType = 21
	CmdType_RemKvnode          CmdType = 22
	CmdType_RemKvnodeResp      CmdType = 23
	CmdType_AddStore           CmdType = 24
	CmdType_AddStoreResp       CmdType = 25
	CmdType_RemStore           CmdType = 26
	CmdType_RemStoreResp       CmdType = 27
	CmdType_KvnodeAddStore     CmdType = 28
	CmdType_KvnodeAddStoreResp CmdType = 29
	CmdType_KvnodeRemStore     CmdType = 30
	CmdType_KvnodeRemStoreResp CmdType = 31
)

var CmdType_name = map[int32]string{
	10: "KvnodeBoot",
	11: "KvnodeBootResp",
	12: "NotifyKvnodeStoreTrans",
	13: "NotifyKvnodeStoreTransResp",
	14: "SlotTransferPrepare",
	15: "SlotTransferPrepareAck",
	16: "SlotTransferCancel",
	17: "SlotTransferCommit",
	20: "AddKvnode",
	21: "AddKvnodeResp",
	22: "RemKvnode",
	23: "RemKvnodeResp",
	24: "AddStore",
	25: "AddStoreResp",
	26: "RemStore",
	27: "RemStoreResp",
	28: "KvnodeAddStore",
	29: "KvnodeAddStoreResp",
	30: "KvnodeRemStore",
	31: "KvnodeRemStoreResp",
}

var CmdType_value = map[string]int32{
	"KvnodeBoot":                 10,
	"KvnodeBootResp":             11,
	"NotifyKvnodeStoreTrans":     12,
	"NotifyKvnodeStoreTransResp": 13,
	"SlotTransferPrepare":        14,
	"SlotTransferPrepareAck":     15,
	"SlotTransferCancel":         16,
	"SlotTransferCommit":         17,
	"AddKvnode":                  20,
	"AddKvnodeResp":              21,
	"RemKvnode":                  22,
	"RemKvnodeResp":              23,
	"AddStore":                   24,
	"AddStoreResp":               25,
	"RemStore":                   26,
	"RemStoreResp":               27,
	"KvnodeAddStore":             28,
	"KvnodeAddStoreResp":         29,
	"KvnodeRemStore":             30,
	"KvnodeRemStoreResp":         31,
}

func (x CmdType) Enum() *CmdType {
	p := new(CmdType)
	*p = x
	return p
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}

func (x *CmdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CmdType_value, data, "CmdType")
	if err != nil {
		return err
	}
	*x = CmdType(value)
	return nil
}

func (CmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{1}
}

type KvnodeBoot struct {
	NodeID               *int32   `protobuf:"varint,1,opt,name=nodeID" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KvnodeBoot) Reset()         { *m = KvnodeBoot{} }
func (m *KvnodeBoot) String() string { return proto.CompactTextString(m) }
func (*KvnodeBoot) ProtoMessage()    {}
func (*KvnodeBoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{0}
}
func (m *KvnodeBoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeBoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeBoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeBoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeBoot.Merge(m, src)
}
func (m *KvnodeBoot) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeBoot) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeBoot.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeBoot proto.InternalMessageInfo

func (m *KvnodeBoot) GetNodeID() int32 {
	if m != nil && m.NodeID != nil {
		return *m.NodeID
	}
	return 0
}

type StoreInfo struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RaftCluster          *string  `protobuf:"bytes,2,opt,name=raftCluster" json:"raftCluster,omitempty"`
	Slots                []byte   `protobuf:"bytes,3,opt,name=slots" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreInfo) Reset()         { *m = StoreInfo{} }
func (m *StoreInfo) String() string { return proto.CompactTextString(m) }
func (*StoreInfo) ProtoMessage()    {}
func (*StoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{1}
}
func (m *StoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreInfo.Merge(m, src)
}
func (m *StoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *StoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StoreInfo proto.InternalMessageInfo

func (m *StoreInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *StoreInfo) GetRaftCluster() string {
	if m != nil && m.RaftCluster != nil {
		return *m.RaftCluster
	}
	return ""
}

func (m *StoreInfo) GetSlots() []byte {
	if m != nil {
		return m.Slots
	}
	return nil
}

type KvnodeBootResp struct {
	Ok                   *bool        `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Reason               *string      `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	Service              *string      `protobuf:"bytes,3,opt,name=service" json:"service,omitempty"`
	UdpService           *string      `protobuf:"bytes,4,opt,name=udpService" json:"udpService,omitempty"`
	RaftService          *string      `protobuf:"bytes,5,opt,name=raftService" json:"raftService,omitempty"`
	Stores               []*StoreInfo `protobuf:"bytes,6,rep,name=stores" json:"stores,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *KvnodeBootResp) Reset()         { *m = KvnodeBootResp{} }
func (m *KvnodeBootResp) String() string { return proto.CompactTextString(m) }
func (*KvnodeBootResp) ProtoMessage()    {}
func (*KvnodeBootResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{2}
}
func (m *KvnodeBootResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeBootResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeBootResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeBootResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeBootResp.Merge(m, src)
}
func (m *KvnodeBootResp) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeBootResp) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeBootResp.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeBootResp proto.InternalMessageInfo

func (m *KvnodeBootResp) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *KvnodeBootResp) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *KvnodeBootResp) GetService() string {
	if m != nil && m.Service != nil {
		return *m.Service
	}
	return ""
}

func (m *KvnodeBootResp) GetUdpService() string {
	if m != nil && m.UdpService != nil {
		return *m.UdpService
	}
	return ""
}

func (m *KvnodeBootResp) GetRaftService() string {
	if m != nil && m.RaftService != nil {
		return *m.RaftService
	}
	return ""
}

func (m *KvnodeBootResp) GetStores() []*StoreInfo {
	if m != nil {
		return m.Stores
	}
	return nil
}

type NotifyKvnodeStoreTrans struct {
	TransID              *int64                `protobuf:"varint,1,opt,name=transID" json:"transID,omitempty"`
	TransType            *KvnodeStoreTransType `protobuf:"varint,2,opt,name=transType,enum=proto.KvnodeStoreTransType" json:"transType,omitempty"`
	NodeId               *int32                `protobuf:"varint,3,opt,name=nodeId" json:"nodeId,omitempty"`
	StoreId              *int32                `protobuf:"varint,4,opt,name=storeId" json:"storeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NotifyKvnodeStoreTrans) Reset()         { *m = NotifyKvnodeStoreTrans{} }
func (m *NotifyKvnodeStoreTrans) String() string { return proto.CompactTextString(m) }
func (*NotifyKvnodeStoreTrans) ProtoMessage()    {}
func (*NotifyKvnodeStoreTrans) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{3}
}
func (m *NotifyKvnodeStoreTrans) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyKvnodeStoreTrans) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyKvnodeStoreTrans.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyKvnodeStoreTrans) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyKvnodeStoreTrans.Merge(m, src)
}
func (m *NotifyKvnodeStoreTrans) XXX_Size() int {
	return m.Size()
}
func (m *NotifyKvnodeStoreTrans) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyKvnodeStoreTrans.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyKvnodeStoreTrans proto.InternalMessageInfo

func (m *NotifyKvnodeStoreTrans) GetTransID() int64 {
	if m != nil && m.TransID != nil {
		return *m.TransID
	}
	return 0
}

func (m *NotifyKvnodeStoreTrans) GetTransType() KvnodeStoreTransType {
	if m != nil && m.TransType != nil {
		return *m.TransType
	}
	return KvnodeStoreTransType_TransAddStore
}

func (m *NotifyKvnodeStoreTrans) GetNodeId() int32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *NotifyKvnodeStoreTrans) GetStoreId() int32 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

type NotifyKvnodeStoreTransResp struct {
	TransID              *int64   `protobuf:"varint,1,opt,name=transID" json:"transID,omitempty"`
	NodeId               *int32   `protobuf:"varint,2,opt,name=nodeId" json:"nodeId,omitempty"`
	IsLeader             *int32   `protobuf:"varint,3,opt,name=isLeader" json:"isLeader,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyKvnodeStoreTransResp) Reset()         { *m = NotifyKvnodeStoreTransResp{} }
func (m *NotifyKvnodeStoreTransResp) String() string { return proto.CompactTextString(m) }
func (*NotifyKvnodeStoreTransResp) ProtoMessage()    {}
func (*NotifyKvnodeStoreTransResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{4}
}
func (m *NotifyKvnodeStoreTransResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyKvnodeStoreTransResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyKvnodeStoreTransResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyKvnodeStoreTransResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyKvnodeStoreTransResp.Merge(m, src)
}
func (m *NotifyKvnodeStoreTransResp) XXX_Size() int {
	return m.Size()
}
func (m *NotifyKvnodeStoreTransResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyKvnodeStoreTransResp.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyKvnodeStoreTransResp proto.InternalMessageInfo

func (m *NotifyKvnodeStoreTransResp) GetTransID() int64 {
	if m != nil && m.TransID != nil {
		return *m.TransID
	}
	return 0
}

func (m *NotifyKvnodeStoreTransResp) GetNodeId() int32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *NotifyKvnodeStoreTransResp) GetIsLeader() int32 {
	if m != nil && m.IsLeader != nil {
		return *m.IsLeader
	}
	return 0
}

type AddKvnode struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	NodeId               *int32   `protobuf:"varint,2,opt,name=nodeId" json:"nodeId,omitempty"`
	Service              *string  `protobuf:"bytes,3,opt,name=service" json:"service,omitempty"`
	UdpService           *string  `protobuf:"bytes,4,opt,name=udpService" json:"udpService,omitempty"`
	RaftService          *string  `protobuf:"bytes,5,opt,name=raftService" json:"raftService,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddKvnode) Reset()         { *m = AddKvnode{} }
func (m *AddKvnode) String() string { return proto.CompactTextString(m) }
func (*AddKvnode) ProtoMessage()    {}
func (*AddKvnode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{5}
}
func (m *AddKvnode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddKvnode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddKvnode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddKvnode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddKvnode.Merge(m, src)
}
func (m *AddKvnode) XXX_Size() int {
	return m.Size()
}
func (m *AddKvnode) XXX_DiscardUnknown() {
	xxx_messageInfo_AddKvnode.DiscardUnknown(m)
}

var xxx_messageInfo_AddKvnode proto.InternalMessageInfo

func (m *AddKvnode) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *AddKvnode) GetNodeId() int32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *AddKvnode) GetService() string {
	if m != nil && m.Service != nil {
		return *m.Service
	}
	return ""
}

func (m *AddKvnode) GetUdpService() string {
	if m != nil && m.UdpService != nil {
		return *m.UdpService
	}
	return ""
}

func (m *AddKvnode) GetRaftService() string {
	if m != nil && m.RaftService != nil {
		return *m.RaftService
	}
	return ""
}

type AddKvnodeResp struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	Ok                   *bool    `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Reason               *string  `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddKvnodeResp) Reset()         { *m = AddKvnodeResp{} }
func (m *AddKvnodeResp) String() string { return proto.CompactTextString(m) }
func (*AddKvnodeResp) ProtoMessage()    {}
func (*AddKvnodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{6}
}
func (m *AddKvnodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddKvnodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddKvnodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddKvnodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddKvnodeResp.Merge(m, src)
}
func (m *AddKvnodeResp) XXX_Size() int {
	return m.Size()
}
func (m *AddKvnodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddKvnodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddKvnodeResp proto.InternalMessageInfo

func (m *AddKvnodeResp) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *AddKvnodeResp) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *AddKvnodeResp) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type RemKvnode struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	NodeId               *int32   `protobuf:"varint,2,opt,name=nodeId" json:"nodeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemKvnode) Reset()         { *m = RemKvnode{} }
func (m *RemKvnode) String() string { return proto.CompactTextString(m) }
func (*RemKvnode) ProtoMessage()    {}
func (*RemKvnode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{7}
}
func (m *RemKvnode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemKvnode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemKvnode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemKvnode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemKvnode.Merge(m, src)
}
func (m *RemKvnode) XXX_Size() int {
	return m.Size()
}
func (m *RemKvnode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemKvnode.DiscardUnknown(m)
}

var xxx_messageInfo_RemKvnode proto.InternalMessageInfo

func (m *RemKvnode) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *RemKvnode) GetNodeId() int32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

type RemKvnodeResp struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	Ok                   *bool    `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Reason               *string  `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemKvnodeResp) Reset()         { *m = RemKvnodeResp{} }
func (m *RemKvnodeResp) String() string { return proto.CompactTextString(m) }
func (*RemKvnodeResp) ProtoMessage()    {}
func (*RemKvnodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{8}
}
func (m *RemKvnodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemKvnodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemKvnodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemKvnodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemKvnodeResp.Merge(m, src)
}
func (m *RemKvnodeResp) XXX_Size() int {
	return m.Size()
}
func (m *RemKvnodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemKvnodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemKvnodeResp proto.InternalMessageInfo

func (m *RemKvnodeResp) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *RemKvnodeResp) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *RemKvnodeResp) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type AddStore struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	Id                   *int32   `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddStore) Reset()         { *m = AddStore{} }
func (m *AddStore) String() string { return proto.CompactTextString(m) }
func (*AddStore) ProtoMessage()    {}
func (*AddStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{9}
}
func (m *AddStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddStore.Merge(m, src)
}
func (m *AddStore) XXX_Size() int {
	return m.Size()
}
func (m *AddStore) XXX_DiscardUnknown() {
	xxx_messageInfo_AddStore.DiscardUnknown(m)
}

var xxx_messageInfo_AddStore proto.InternalMessageInfo

func (m *AddStore) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *AddStore) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type AddStoreResp struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	Ok                   *bool    `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Reason               *string  `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddStoreResp) Reset()         { *m = AddStoreResp{} }
func (m *AddStoreResp) String() string { return proto.CompactTextString(m) }
func (*AddStoreResp) ProtoMessage()    {}
func (*AddStoreResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{10}
}
func (m *AddStoreResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddStoreResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddStoreResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddStoreResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddStoreResp.Merge(m, src)
}
func (m *AddStoreResp) XXX_Size() int {
	return m.Size()
}
func (m *AddStoreResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddStoreResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddStoreResp proto.InternalMessageInfo

func (m *AddStoreResp) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *AddStoreResp) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *AddStoreResp) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type RemStore struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	Id                   *int32   `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemStore) Reset()         { *m = RemStore{} }
func (m *RemStore) String() string { return proto.CompactTextString(m) }
func (*RemStore) ProtoMessage()    {}
func (*RemStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{11}
}
func (m *RemStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemStore.Merge(m, src)
}
func (m *RemStore) XXX_Size() int {
	return m.Size()
}
func (m *RemStore) XXX_DiscardUnknown() {
	xxx_messageInfo_RemStore.DiscardUnknown(m)
}

var xxx_messageInfo_RemStore proto.InternalMessageInfo

func (m *RemStore) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *RemStore) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type RemStoreResp struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	Ok                   *bool    `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Reason               *string  `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemStoreResp) Reset()         { *m = RemStoreResp{} }
func (m *RemStoreResp) String() string { return proto.CompactTextString(m) }
func (*RemStoreResp) ProtoMessage()    {}
func (*RemStoreResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{12}
}
func (m *RemStoreResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemStoreResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemStoreResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemStoreResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemStoreResp.Merge(m, src)
}
func (m *RemStoreResp) XXX_Size() int {
	return m.Size()
}
func (m *RemStoreResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemStoreResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemStoreResp proto.InternalMessageInfo

func (m *RemStoreResp) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *RemStoreResp) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *RemStoreResp) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type KvnodeAddStore struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	NodeId               *int32   `protobuf:"varint,2,opt,name=nodeId" json:"nodeId,omitempty"`
	StoreId              *int32   `protobuf:"varint,3,opt,name=storeId" json:"storeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KvnodeAddStore) Reset()         { *m = KvnodeAddStore{} }
func (m *KvnodeAddStore) String() string { return proto.CompactTextString(m) }
func (*KvnodeAddStore) ProtoMessage()    {}
func (*KvnodeAddStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{13}
}
func (m *KvnodeAddStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeAddStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeAddStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeAddStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeAddStore.Merge(m, src)
}
func (m *KvnodeAddStore) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeAddStore) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeAddStore.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeAddStore proto.InternalMessageInfo

func (m *KvnodeAddStore) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *KvnodeAddStore) GetNodeId() int32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *KvnodeAddStore) GetStoreId() int32 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

type KvnodeAddStoreResp struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	Ok                   *bool    `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Reason               *string  `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KvnodeAddStoreResp) Reset()         { *m = KvnodeAddStoreResp{} }
func (m *KvnodeAddStoreResp) String() string { return proto.CompactTextString(m) }
func (*KvnodeAddStoreResp) ProtoMessage()    {}
func (*KvnodeAddStoreResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{14}
}
func (m *KvnodeAddStoreResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeAddStoreResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeAddStoreResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeAddStoreResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeAddStoreResp.Merge(m, src)
}
func (m *KvnodeAddStoreResp) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeAddStoreResp) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeAddStoreResp.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeAddStoreResp proto.InternalMessageInfo

func (m *KvnodeAddStoreResp) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *KvnodeAddStoreResp) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *KvnodeAddStoreResp) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type KvnodeRemStore struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	NodeId               *int32   `protobuf:"varint,2,opt,name=nodeId" json:"nodeId,omitempty"`
	StoreId              *int32   `protobuf:"varint,3,opt,name=storeId" json:"storeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KvnodeRemStore) Reset()         { *m = KvnodeRemStore{} }
func (m *KvnodeRemStore) String() string { return proto.CompactTextString(m) }
func (*KvnodeRemStore) ProtoMessage()    {}
func (*KvnodeRemStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{15}
}
func (m *KvnodeRemStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeRemStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeRemStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeRemStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeRemStore.Merge(m, src)
}
func (m *KvnodeRemStore) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeRemStore) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeRemStore.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeRemStore proto.InternalMessageInfo

func (m *KvnodeRemStore) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *KvnodeRemStore) GetNodeId() int32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *KvnodeRemStore) GetStoreId() int32 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

type KvnodeRemStoreResp struct {
	Seqno                *int64   `protobuf:"varint,1,opt,name=seqno" json:"seqno,omitempty"`
	Ok                   *bool    `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Reason               *string  `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KvnodeRemStoreResp) Reset()         { *m = KvnodeRemStoreResp{} }
func (m *KvnodeRemStoreResp) String() string { return proto.CompactTextString(m) }
func (*KvnodeRemStoreResp) ProtoMessage()    {}
func (*KvnodeRemStoreResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{16}
}
func (m *KvnodeRemStoreResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeRemStoreResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeRemStoreResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeRemStoreResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeRemStoreResp.Merge(m, src)
}
func (m *KvnodeRemStoreResp) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeRemStoreResp) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeRemStoreResp.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeRemStoreResp proto.InternalMessageInfo

func (m *KvnodeRemStoreResp) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func (m *KvnodeRemStoreResp) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *KvnodeRemStoreResp) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type SlotTransferPrepare struct {
	TransID              *int64   `protobuf:"varint,1,opt,name=transID" json:"transID,omitempty"`
	Slot                 *int32   `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
	StoreIn              *int32   `protobuf:"varint,3,opt,name=storeIn" json:"storeIn,omitempty"`
	StoreOut             *int32   `protobuf:"varint,4,opt,name=storeOut" json:"storeOut,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlotTransferPrepare) Reset()         { *m = SlotTransferPrepare{} }
func (m *SlotTransferPrepare) String() string { return proto.CompactTextString(m) }
func (*SlotTransferPrepare) ProtoMessage()    {}
func (*SlotTransferPrepare) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{17}
}
func (m *SlotTransferPrepare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotTransferPrepare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotTransferPrepare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotTransferPrepare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotTransferPrepare.Merge(m, src)
}
func (m *SlotTransferPrepare) XXX_Size() int {
	return m.Size()
}
func (m *SlotTransferPrepare) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotTransferPrepare.DiscardUnknown(m)
}

var xxx_messageInfo_SlotTransferPrepare proto.InternalMessageInfo

func (m *SlotTransferPrepare) GetTransID() int64 {
	if m != nil && m.TransID != nil {
		return *m.TransID
	}
	return 0
}

func (m *SlotTransferPrepare) GetSlot() int32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *SlotTransferPrepare) GetStoreIn() int32 {
	if m != nil && m.StoreIn != nil {
		return *m.StoreIn
	}
	return 0
}

func (m *SlotTransferPrepare) GetStoreOut() int32 {
	if m != nil && m.StoreOut != nil {
		return *m.StoreOut
	}
	return 0
}

type SlotTransferPrepareAck struct {
	TransID              *int64   `protobuf:"varint,1,opt,name=transID" json:"transID,omitempty"`
	StoreID              *int32   `protobuf:"varint,2,opt,name=storeID" json:"storeID,omitempty"`
	Ok                   *bool    `protobuf:"varint,3,opt,name=ok" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlotTransferPrepareAck) Reset()         { *m = SlotTransferPrepareAck{} }
func (m *SlotTransferPrepareAck) String() string { return proto.CompactTextString(m) }
func (*SlotTransferPrepareAck) ProtoMessage()    {}
func (*SlotTransferPrepareAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{18}
}
func (m *SlotTransferPrepareAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotTransferPrepareAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotTransferPrepareAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotTransferPrepareAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotTransferPrepareAck.Merge(m, src)
}
func (m *SlotTransferPrepareAck) XXX_Size() int {
	return m.Size()
}
func (m *SlotTransferPrepareAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotTransferPrepareAck.DiscardUnknown(m)
}

var xxx_messageInfo_SlotTransferPrepareAck proto.InternalMessageInfo

func (m *SlotTransferPrepareAck) GetTransID() int64 {
	if m != nil && m.TransID != nil {
		return *m.TransID
	}
	return 0
}

func (m *SlotTransferPrepareAck) GetStoreID() int32 {
	if m != nil && m.StoreID != nil {
		return *m.StoreID
	}
	return 0
}

func (m *SlotTransferPrepareAck) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

type SlotTransferCancel struct {
	TransID              *int64   `protobuf:"varint,1,opt,name=transID" json:"transID,omitempty"`
	StoreID              *int32   `protobuf:"varint,2,opt,name=storeID" json:"storeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlotTransferCancel) Reset()         { *m = SlotTransferCancel{} }
func (m *SlotTransferCancel) String() string { return proto.CompactTextString(m) }
func (*SlotTransferCancel) ProtoMessage()    {}
func (*SlotTransferCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{19}
}
func (m *SlotTransferCancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotTransferCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotTransferCancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotTransferCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotTransferCancel.Merge(m, src)
}
func (m *SlotTransferCancel) XXX_Size() int {
	return m.Size()
}
func (m *SlotTransferCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotTransferCancel.DiscardUnknown(m)
}

var xxx_messageInfo_SlotTransferCancel proto.InternalMessageInfo

func (m *SlotTransferCancel) GetTransID() int64 {
	if m != nil && m.TransID != nil {
		return *m.TransID
	}
	return 0
}

func (m *SlotTransferCancel) GetStoreID() int32 {
	if m != nil && m.StoreID != nil {
		return *m.StoreID
	}
	return 0
}

type SlotTransferCommit struct {
	TransID              *int64   `protobuf:"varint,1,opt,name=transID" json:"transID,omitempty"`
	StoreID              *int32   `protobuf:"varint,2,opt,name=storeID" json:"storeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlotTransferCommit) Reset()         { *m = SlotTransferCommit{} }
func (m *SlotTransferCommit) String() string { return proto.CompactTextString(m) }
func (*SlotTransferCommit) ProtoMessage()    {}
func (*SlotTransferCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ece4d612d87e090, []int{20}
}
func (m *SlotTransferCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotTransferCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotTransferCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotTransferCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotTransferCommit.Merge(m, src)
}
func (m *SlotTransferCommit) XXX_Size() int {
	return m.Size()
}
func (m *SlotTransferCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotTransferCommit.DiscardUnknown(m)
}

var xxx_messageInfo_SlotTransferCommit proto.InternalMessageInfo

func (m *SlotTransferCommit) GetTransID() int64 {
	if m != nil && m.TransID != nil {
		return *m.TransID
	}
	return 0
}

func (m *SlotTransferCommit) GetStoreID() int32 {
	if m != nil && m.StoreID != nil {
		return *m.StoreID
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.KvnodeStoreTransType", KvnodeStoreTransType_name, KvnodeStoreTransType_value)
	proto.RegisterEnum("proto.CmdType", CmdType_name, CmdType_value)
	proto.RegisterType((*KvnodeBoot)(nil), "proto.kvnodeBoot")
	proto.RegisterType((*StoreInfo)(nil), "proto.storeInfo")
	proto.RegisterType((*KvnodeBootResp)(nil), "proto.kvnodeBootResp")
	proto.RegisterType((*NotifyKvnodeStoreTrans)(nil), "proto.notifyKvnodeStoreTrans")
	proto.RegisterType((*NotifyKvnodeStoreTransResp)(nil), "proto.notifyKvnodeStoreTransResp")
	proto.RegisterType((*AddKvnode)(nil), "proto.addKvnode")
	proto.RegisterType((*AddKvnodeResp)(nil), "proto.addKvnodeResp")
	proto.RegisterType((*RemKvnode)(nil), "proto.remKvnode")
	proto.RegisterType((*RemKvnodeResp)(nil), "proto.remKvnodeResp")
	proto.RegisterType((*AddStore)(nil), "proto.addStore")
	proto.RegisterType((*AddStoreResp)(nil), "proto.addStoreResp")
	proto.RegisterType((*RemStore)(nil), "proto.remStore")
	proto.RegisterType((*RemStoreResp)(nil), "proto.remStoreResp")
	proto.RegisterType((*KvnodeAddStore)(nil), "proto.kvnodeAddStore")
	proto.RegisterType((*KvnodeAddStoreResp)(nil), "proto.kvnodeAddStoreResp")
	proto.RegisterType((*KvnodeRemStore)(nil), "proto.kvnodeRemStore")
	proto.RegisterType((*KvnodeRemStoreResp)(nil), "proto.kvnodeRemStoreResp")
	proto.RegisterType((*SlotTransferPrepare)(nil), "proto.slotTransferPrepare")
	proto.RegisterType((*SlotTransferPrepareAck)(nil), "proto.slotTransferPrepareAck")
	proto.RegisterType((*SlotTransferCancel)(nil), "proto.slotTransferCancel")
	proto.RegisterType((*SlotTransferCommit)(nil), "proto.slotTransferCommit")
}

func init() { proto.RegisterFile("pd.proto", fileDescriptor_3ece4d612d87e090) }

var fileDescriptor_3ece4d612d87e090 = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xfe, 0x6d, 0x37, 0x6d, 0x3c, 0x4d, 0xf2, 0x6f, 0xb7, 0x21, 0x35, 0x29, 0x98, 0xc8, 0xe2,
	0x10, 0xf5, 0x50, 0x50, 0x6f, 0x95, 0xb8, 0xa4, 0xed, 0x81, 0x2a, 0xa5, 0xa0, 0x4d, 0x0f, 0x1c,
	0xb8, 0x58, 0xdd, 0x4d, 0x65, 0xd2, 0x78, 0x83, 0xed, 0x56, 0xea, 0x83, 0x20, 0x71, 0xe3, 0xce,
	0x43, 0x70, 0xee, 0xb1, 0x8f, 0x40, 0xcb, 0x8b, 0xa0, 0xdd, 0xec, 0xda, 0x0e, 0x71, 0x22, 0x11,
	0xc2, 0xc9, 0x33, 0xbb, 0xb3, 0xdf, 0x7c, 0xf3, 0xcd, 0x7a, 0x16, 0xca, 0x23, 0xba, 0x3b, 0x8a,
	0x78, 0xc2, 0x71, 0x49, 0x7e, 0x9a, 0xf5, 0x0b, 0x7e, 0xc1, 0xa5, 0xf9, 0x42, 0x58, 0xe3, 0x4d,
	0xef, 0x39, 0xc0, 0xe0, 0x3a, 0xe4, 0x94, 0x1d, 0x70, 0x9e, 0xe0, 0x06, 0xac, 0x0a, 0xfb, 0xf8,
	0xc8, 0x31, 0x5a, 0x46, 0xbb, 0x44, 0x94, 0xe7, 0xf5, 0xc0, 0x8e, 0x13, 0x1e, 0xb1, 0xe3, 0xb0,
	0xcf, 0x71, 0x0d, 0xcc, 0x80, 0xaa, 0x00, 0x33, 0xa0, 0xb8, 0x05, 0xeb, 0x91, 0xdf, 0x4f, 0x0e,
	0x2f, 0xaf, 0xe2, 0x84, 0x45, 0x8e, 0xd9, 0x32, 0xda, 0x36, 0xc9, 0x2f, 0xe1, 0x3a, 0x94, 0xe2,
	0x4b, 0x9e, 0xc4, 0x8e, 0xd5, 0x32, 0xda, 0x15, 0x32, 0x76, 0xbc, 0xef, 0x06, 0xd4, 0xb2, 0xdc,
	0x84, 0xc5, 0x23, 0x01, 0xcd, 0x07, 0x12, 0xba, 0x4c, 0x4c, 0x3e, 0x10, 0x7c, 0x22, 0xe6, 0xc7,
	0x3c, 0x54, 0xa8, 0xca, 0xc3, 0x0e, 0xac, 0xc5, 0x2c, 0xba, 0x0e, 0xce, 0x99, 0x84, 0xb4, 0x89,
	0x76, 0xb1, 0x0b, 0x70, 0x45, 0x47, 0x3d, 0xb5, 0xb9, 0x22, 0x37, 0x73, 0x2b, 0x9a, 0xac, 0x0e,
	0x28, 0x65, 0x64, 0x75, 0x44, 0x1b, 0x56, 0x65, 0xad, 0xb1, 0xb3, 0xda, 0xb2, 0xda, 0xeb, 0x7b,
	0x68, 0xac, 0xd4, 0x6e, 0x2a, 0x00, 0x51, 0xfb, 0xde, 0x57, 0x03, 0x1a, 0x21, 0x4f, 0x82, 0xfe,
	0x4d, 0x57, 0x96, 0xd1, 0x13, 0xcb, 0x67, 0x91, 0x1f, 0xc6, 0x82, 0x60, 0x22, 0x0c, 0xa5, 0xa4,
	0x45, 0xb4, 0x8b, 0xf7, 0xc1, 0x96, 0xe6, 0xd9, 0xcd, 0x88, 0xc9, 0xaa, 0x6a, 0x7b, 0xdb, 0x2a,
	0xc3, 0xef, 0x28, 0x22, 0x84, 0x64, 0xd1, 0x69, 0x77, 0xa8, 0x2c, 0x5a, 0x77, 0x87, 0x4a, 0x35,
	0x24, 0x39, 0x2a, 0x0b, 0x2e, 0x11, 0xed, 0x7a, 0x1f, 0xa1, 0x59, 0x4c, 0x50, 0xaa, 0x3d, 0x9b,
	0x64, 0x96, 0xc9, 0x9c, 0xc8, 0xd4, 0x84, 0x72, 0x10, 0x9f, 0x30, 0x9f, 0xb2, 0x48, 0x71, 0x48,
	0x7d, 0xef, 0xb3, 0x01, 0xb6, 0x4f, 0xe9, 0x38, 0x93, 0x6c, 0x39, 0xfb, 0x14, 0x72, 0x85, 0x3c,
	0x76, 0x66, 0xe2, 0xfe, 0xc3, 0x7e, 0x7a, 0x6f, 0xa0, 0x9a, 0xd2, 0x92, 0x65, 0x17, 0x53, 0x1b,
	0x5f, 0x3d, 0xb3, 0xe0, 0xea, 0x59, 0xf9, 0xab, 0xe7, 0xed, 0x83, 0x1d, 0xb1, 0xe1, 0x22, 0x55,
	0x0a, 0x26, 0xe9, 0xd1, 0x25, 0x30, 0x79, 0x09, 0x65, 0x9f, 0x52, 0xd9, 0xd3, 0xd9, 0x48, 0x81,
	0x26, 0x61, 0x06, 0xd4, 0x3b, 0x81, 0x8a, 0x3e, 0xb1, 0x9c, 0xfc, 0x11, 0x1b, 0xfe, 0x61, 0x7e,
	0x7d, 0x62, 0x09, 0xf9, 0xdf, 0xeb, 0xf1, 0xd1, 0x99, 0xaf, 0xc2, 0xbc, 0x4b, 0xa7, 0x7e, 0x1b,
	0x6b, 0xf2, 0xb7, 0x21, 0x80, 0x27, 0x91, 0x97, 0xc9, 0x96, 0xcc, 0xd7, 0xec, 0x2f, 0xd8, 0x92,
	0xe5, 0x69, 0x7b, 0x03, 0x9b, 0x62, 0x48, 0xcb, 0x59, 0xd1, 0x67, 0xd1, 0xbb, 0x88, 0x8d, 0xfc,
	0x88, 0xcd, 0x99, 0x18, 0x18, 0x56, 0xc4, 0x01, 0x45, 0x5a, 0xda, 0x19, 0xe5, 0x70, 0x92, 0x72,
	0x28, 0xe6, 0x88, 0x34, 0xdf, 0x5e, 0x25, 0x6a, 0x64, 0xa5, 0xbe, 0xf7, 0x01, 0x1a, 0x05, 0xa9,
	0x3b, 0xe7, 0x83, 0x39, 0xd9, 0xd3, 0x4c, 0x47, 0x8a, 0x80, 0x76, 0x55, 0xc1, 0x96, 0x2e, 0xd8,
	0x7b, 0x0d, 0x38, 0x8f, 0x7e, 0xe8, 0x87, 0xe7, 0xec, 0x72, 0x11, 0xe4, 0x29, 0x24, 0x3e, 0x1c,
	0x06, 0xc9, 0x22, 0x48, 0x3b, 0xaf, 0xa0, 0x5e, 0x34, 0xfa, 0xf1, 0x06, 0x54, 0xa5, 0xa3, 0x6f,
	0x21, 0x32, 0xd2, 0x25, 0xdd, 0x6a, 0x64, 0xee, 0x7c, 0xb3, 0x60, 0xed, 0x70, 0x48, 0xe5, 0x89,
	0x1a, 0x40, 0x37, 0x7d, 0x51, 0x11, 0x60, 0x0c, 0xb5, 0xee, 0xc4, 0x0b, 0x8b, 0xd6, 0x71, 0x13,
	0x1a, 0xa7, 0x85, 0x6f, 0x02, 0xaa, 0x60, 0x17, 0x9a, 0xa7, 0x33, 0xdf, 0x0b, 0x54, 0xc5, 0x5b,
	0xb0, 0xd9, 0x9b, 0xee, 0x0d, 0xaa, 0x09, 0xd0, 0x5e, 0x61, 0xd3, 0xd0, 0xff, 0xb8, 0x01, 0xb8,
	0x37, 0x25, 0x39, 0x42, 0x53, 0xeb, 0x52, 0x40, 0xb4, 0x81, 0xab, 0x60, 0x77, 0xf4, 0xc0, 0x46,
	0x75, 0x51, 0x72, 0x27, 0x3f, 0xbf, 0xd1, 0x23, 0x11, 0x41, 0xf4, 0x20, 0x45, 0x0d, 0x11, 0x41,
	0xf2, 0x73, 0x15, 0x6d, 0xe1, 0x0a, 0x94, 0x53, 0xd5, 0x1c, 0x8c, 0xa0, 0x92, 0xff, 0x93, 0xd1,
	0x63, 0xb1, 0x9f, 0x4a, 0xd8, 0x14, 0xfb, 0xf9, 0x7f, 0x07, 0x6d, 0x67, 0xc2, 0xa5, 0x28, 0x4f,
	0x04, 0xdf, 0xee, 0xd4, 0x54, 0x40, 0x4f, 0xb3, 0xd8, 0x14, 0xd1, 0xcd, 0x62, 0x27, 0x70, 0x9f,
	0x1d, 0x38, 0xb7, 0xf7, 0xae, 0x71, 0x77, 0xef, 0x1a, 0xb7, 0x0f, 0xae, 0x71, 0xf7, 0xe0, 0x1a,
	0x3f, 0x1e, 0x5c, 0xe3, 0xcb, 0x4f, 0xf7, 0xbf, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x0b,
	0x32, 0xd8, 0xb0, 0x09, 0x00, 0x00,
}

func (m *KvnodeBoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeBoot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.NodeID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Id))
	}
	if m.RaftCluster != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.RaftCluster)))
		i += copy(dAtA[i:], *m.RaftCluster)
	}
	if m.Slots != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(m.Slots)))
		i += copy(dAtA[i:], m.Slots)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KvnodeBootResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeBootResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok != nil {
		dAtA[i] = 0x8
		i++
		if *m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reason != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.Service != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.Service)))
		i += copy(dAtA[i:], *m.Service)
	}
	if m.UdpService != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.UdpService)))
		i += copy(dAtA[i:], *m.UdpService)
	}
	if m.RaftService != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.RaftService)))
		i += copy(dAtA[i:], *m.RaftService)
	}
	if len(m.Stores) > 0 {
		for _, msg := range m.Stores {
			dAtA[i] = 0x32
			i++
			i = encodeVarintPd(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NotifyKvnodeStoreTrans) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyKvnodeStoreTrans) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.TransID))
	}
	if m.TransType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.TransType))
	}
	if m.NodeId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.NodeId))
	}
	if m.StoreId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.StoreId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NotifyKvnodeStoreTransResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyKvnodeStoreTransResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.TransID))
	}
	if m.NodeId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.NodeId))
	}
	if m.IsLeader != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.IsLeader))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddKvnode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddKvnode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.NodeId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.NodeId))
	}
	if m.Service != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.Service)))
		i += copy(dAtA[i:], *m.Service)
	}
	if m.UdpService != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.UdpService)))
		i += copy(dAtA[i:], *m.UdpService)
	}
	if m.RaftService != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.RaftService)))
		i += copy(dAtA[i:], *m.RaftService)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddKvnodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddKvnodeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.Ok != nil {
		dAtA[i] = 0x10
		i++
		if *m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reason != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemKvnode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemKvnode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.NodeId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.NodeId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemKvnodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemKvnodeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.Ok != nil {
		dAtA[i] = 0x10
		i++
		if *m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reason != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddStore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.Id != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddStoreResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddStoreResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.Ok != nil {
		dAtA[i] = 0x10
		i++
		if *m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reason != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemStore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.Id != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemStoreResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemStoreResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.Ok != nil {
		dAtA[i] = 0x10
		i++
		if *m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reason != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KvnodeAddStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeAddStore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.NodeId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.NodeId))
	}
	if m.StoreId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.StoreId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KvnodeAddStoreResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeAddStoreResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.Ok != nil {
		dAtA[i] = 0x10
		i++
		if *m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reason != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KvnodeRemStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeRemStore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.NodeId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.NodeId))
	}
	if m.StoreId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.StoreId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KvnodeRemStoreResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeRemStoreResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Seqno))
	}
	if m.Ok != nil {
		dAtA[i] = 0x10
		i++
		if *m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reason != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPd(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SlotTransferPrepare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotTransferPrepare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.TransID))
	}
	if m.Slot != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.Slot))
	}
	if m.StoreIn != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.StoreIn))
	}
	if m.StoreOut != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.StoreOut))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SlotTransferPrepareAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotTransferPrepareAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.TransID))
	}
	if m.StoreID != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.StoreID))
	}
	if m.Ok != nil {
		dAtA[i] = 0x18
		i++
		if *m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SlotTransferCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotTransferCancel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.TransID))
	}
	if m.StoreID != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.StoreID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SlotTransferCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotTransferCommit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.TransID))
	}
	if m.StoreID != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPd(dAtA, i, uint64(*m.StoreID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPd(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KvnodeBoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != nil {
		n += 1 + sovPd(uint64(*m.NodeID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovPd(uint64(*m.Id))
	}
	if m.RaftCluster != nil {
		l = len(*m.RaftCluster)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.Slots != nil {
		l = len(m.Slots)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KvnodeBootResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok != nil {
		n += 2
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.Service != nil {
		l = len(*m.Service)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.UdpService != nil {
		l = len(*m.UdpService)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.RaftService != nil {
		l = len(*m.RaftService)
		n += 1 + l + sovPd(uint64(l))
	}
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovPd(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyKvnodeStoreTrans) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransID != nil {
		n += 1 + sovPd(uint64(*m.TransID))
	}
	if m.TransType != nil {
		n += 1 + sovPd(uint64(*m.TransType))
	}
	if m.NodeId != nil {
		n += 1 + sovPd(uint64(*m.NodeId))
	}
	if m.StoreId != nil {
		n += 1 + sovPd(uint64(*m.StoreId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyKvnodeStoreTransResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransID != nil {
		n += 1 + sovPd(uint64(*m.TransID))
	}
	if m.NodeId != nil {
		n += 1 + sovPd(uint64(*m.NodeId))
	}
	if m.IsLeader != nil {
		n += 1 + sovPd(uint64(*m.IsLeader))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddKvnode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.NodeId != nil {
		n += 1 + sovPd(uint64(*m.NodeId))
	}
	if m.Service != nil {
		l = len(*m.Service)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.UdpService != nil {
		l = len(*m.UdpService)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.RaftService != nil {
		l = len(*m.RaftService)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddKvnodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.Ok != nil {
		n += 2
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemKvnode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.NodeId != nil {
		n += 1 + sovPd(uint64(*m.NodeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemKvnodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.Ok != nil {
		n += 2
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.Id != nil {
		n += 1 + sovPd(uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddStoreResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.Ok != nil {
		n += 2
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.Id != nil {
		n += 1 + sovPd(uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemStoreResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.Ok != nil {
		n += 2
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KvnodeAddStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.NodeId != nil {
		n += 1 + sovPd(uint64(*m.NodeId))
	}
	if m.StoreId != nil {
		n += 1 + sovPd(uint64(*m.StoreId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KvnodeAddStoreResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.Ok != nil {
		n += 2
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KvnodeRemStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.NodeId != nil {
		n += 1 + sovPd(uint64(*m.NodeId))
	}
	if m.StoreId != nil {
		n += 1 + sovPd(uint64(*m.StoreId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KvnodeRemStoreResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seqno != nil {
		n += 1 + sovPd(uint64(*m.Seqno))
	}
	if m.Ok != nil {
		n += 2
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovPd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlotTransferPrepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransID != nil {
		n += 1 + sovPd(uint64(*m.TransID))
	}
	if m.Slot != nil {
		n += 1 + sovPd(uint64(*m.Slot))
	}
	if m.StoreIn != nil {
		n += 1 + sovPd(uint64(*m.StoreIn))
	}
	if m.StoreOut != nil {
		n += 1 + sovPd(uint64(*m.StoreOut))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlotTransferPrepareAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransID != nil {
		n += 1 + sovPd(uint64(*m.TransID))
	}
	if m.StoreID != nil {
		n += 1 + sovPd(uint64(*m.StoreID))
	}
	if m.Ok != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlotTransferCancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransID != nil {
		n += 1 + sovPd(uint64(*m.TransID))
	}
	if m.StoreID != nil {
		n += 1 + sovPd(uint64(*m.StoreID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlotTransferCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransID != nil {
		n += 1 + sovPd(uint64(*m.TransID))
	}
	if m.StoreID != nil {
		n += 1 + sovPd(uint64(*m.StoreID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPd(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPd(x uint64) (n int) {
	return sovPd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KvnodeBoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeBoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeBoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeID = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: storeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: storeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RaftCluster = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots[:0], dAtA[iNdEx:postIndex]...)
			if m.Slots == nil {
				m.Slots = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeBootResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeBootResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeBootResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Ok = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Service = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UdpService = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RaftService = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, &StoreInfo{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyKvnodeStoreTrans) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyKvnodeStoreTrans: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyKvnodeStoreTrans: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransType", wireType)
			}
			var v KvnodeStoreTransType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (KvnodeStoreTransType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyKvnodeStoreTransResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyKvnodeStoreTransResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyKvnodeStoreTransResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeader", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeader = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddKvnode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addKvnode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addKvnode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Service = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UdpService = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RaftService = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddKvnodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addKvnodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addKvnodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Ok = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemKvnode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remKvnode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remKvnode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemKvnodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remKvnodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remKvnodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Ok = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddStoreResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addStoreResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addStoreResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Ok = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemStoreResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remStoreResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remStoreResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Ok = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeAddStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeAddStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeAddStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeAddStoreResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeAddStoreResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeAddStoreResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Ok = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeRemStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeRemStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeRemStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeRemStoreResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeRemStoreResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeRemStoreResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seqno = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Ok = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotTransferPrepare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: slotTransferPrepare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: slotTransferPrepare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Slot = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreIn", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreIn = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreOut", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreOut = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotTransferPrepareAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: slotTransferPrepareAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: slotTransferPrepareAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreID = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Ok = &b
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotTransferCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: slotTransferCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: slotTransferCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreID = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotTransferCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: slotTransferCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: slotTransferCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreID = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPd   = fmt.Errorf("proto: integer overflow")
)
