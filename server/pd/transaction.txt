
事务1 向kvnode添加一个store

参与方pd,需要添加store s的kvnode x,store s的leader节点y(如果在添加x前store s没有关联的kvnode则无需y参与)。

协议算法：

pd向x及y发出向s添加x的请求，等待x与y的响应。

x接收到请求后立即响应。

y接收到请求后，对store s的raft group执行添加x的配置变更，变更完成后响应。


异常处理：

pd leader发生故障：

pd leader发出请求前，先将事务同步到所有的follower,如果pd leader发生故障，将由新选出的leader接管事务处理流程。

pd下发请求丢失：

只要事务尚未完成，pd定时重发请求。

store s的leader发生故障：

pd将请求下发给store s下的所有kvnode,只有leader y对请求做处理。如果leader y发生故障，将由新选出的leader接管。

kvnode响应丢失：

pd定时重发请求，如果参与的kvnode发现请求已经执行过，则直接发送响应。




事务2 从kvnode删除一个store

参与方pd,store s的leader节点y(需要删除store s的节点x无需参加，因为y的配置变更会通过raft group s同步到x,x发现自己从配置s中移除执行卸载s的处理)。


协议算法：

pd向y发出从s删除x的请求，等待y的响应。

y接收到请求后，对store s的raft group执行删除x的配置变更，变更完成后响应。

异常处理:

同事务1


事务3 slot迁移

参与方pd,slot迁出store的leader x,slot迁入store的leader y

协议算法：

pd向x及y发出prepare请求，等待x与y的响应。如果在定时器到期时未能收到所有参与者的应答，则cancel事务。

x,y接收到请求后向pd发回prepare响应。

如果pd接收到的任何一个响应表示不同意，则cancel事务。

如果所有参与者都同意，向参与者发出commit。

参与者接收到之后执行slot迁移。

异常处理：

prepare请求的丢失：

定时器到期cancel事务。

pd leader发生故障：

重新选出leader，由新的leader接管事务。

store leader发生故障：
事务需要经过store的raft group同步，如果leader发生故障由重新选出leader并接管后续的事务处理。

commit/cancel/prepare响应的丢失：

store leader定时重发prepare响应。pd根据事务状态重发commit/cancel。










