// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flyfish_server.proto

package proto

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ServerCmdType int32

const (
	//flygate <-> flykv
	ServerCmdType_QueryLeader     ServerCmdType = 1
	ServerCmdType_QueryLeaderResp ServerCmdType = 2
	//console <-> pd
	ServerCmdType_InstallDeployment         ServerCmdType = 101
	ServerCmdType_InstallDeploymentResp     ServerCmdType = 102
	ServerCmdType_AddNode                   ServerCmdType = 103
	ServerCmdType_AddNodeResp               ServerCmdType = 104
	ServerCmdType_AddLearnerStoreToNode     ServerCmdType = 105
	ServerCmdType_AddLearnerStoreToNodeResp ServerCmdType = 106
	ServerCmdType_PromoteLearnerStore       ServerCmdType = 107
	ServerCmdType_PromoteLearnerStoreResp   ServerCmdType = 108
	ServerCmdType_RemoveNodeStore           ServerCmdType = 109
	ServerCmdType_RemoveNodeStoreResp       ServerCmdType = 110
	ServerCmdType_RemNode                   ServerCmdType = 111
	ServerCmdType_RemNodeResp               ServerCmdType = 112
	ServerCmdType_AddSet                    ServerCmdType = 113
	ServerCmdType_AddSetResp                ServerCmdType = 114
	ServerCmdType_RemSet                    ServerCmdType = 115
	ServerCmdType_RemSetResp                ServerCmdType = 116
	ServerCmdType_SetMarkClear              ServerCmdType = 117
	ServerCmdType_SetMarkClearResp          ServerCmdType = 118
	ServerCmdType_SetMeta                   ServerCmdType = 119
	ServerCmdType_SetMetaResp               ServerCmdType = 120
	ServerCmdType_GetMeta                   ServerCmdType = 121
	ServerCmdType_GetMetaResp               ServerCmdType = 122
	ServerCmdType_UpdateMeta                ServerCmdType = 123
	ServerCmdType_UpdateMetaResp            ServerCmdType = 124
	ServerCmdType_GetSetStatus              ServerCmdType = 125
	ServerCmdType_GetSetStatusResp          ServerCmdType = 126
	//kvnode <-> pd
	ServerCmdType_KvnodeBoot         ServerCmdType = 210
	ServerCmdType_KvnodeBootResp     ServerCmdType = 211
	ServerCmdType_NotifyNodeStoreOp  ServerCmdType = 212
	ServerCmdType_NodeStoreOpOk      ServerCmdType = 213
	ServerCmdType_IsTransInReady     ServerCmdType = 214
	ServerCmdType_IsTransInReadyResp ServerCmdType = 215
	ServerCmdType_NotifySlotTransOut ServerCmdType = 218
	ServerCmdType_SlotTransOutOk     ServerCmdType = 219
	ServerCmdType_NotifySlotTransIn  ServerCmdType = 220
	ServerCmdType_SlotTransInOk      ServerCmdType = 221
	ServerCmdType_NotifyUpdateMeta   ServerCmdType = 222
	ServerCmdType_StoreUpdateMetaOk  ServerCmdType = 223
	ServerCmdType_StoreReportStatus  ServerCmdType = 224
	ServerCmdType_TrasnferLeader     ServerCmdType = 225
	//flygate <-> pd
	ServerCmdType_QueryRouteInfo     ServerCmdType = 310
	ServerCmdType_QueryRouteInfoResp ServerCmdType = 311
	ServerCmdType_FlyGateHeartBeat   ServerCmdType = 312
	//client <-> pd
	ServerCmdType_GetFlyGateList     ServerCmdType = 410
	ServerCmdType_GetFlyGateListResp ServerCmdType = 411
	ServerCmdType_ChangeFlyGate      ServerCmdType = 412
	ServerCmdType_ChangeFlyGateResp  ServerCmdType = 413
	ServerCmdType_GetSlotStore       ServerCmdType = 414
	ServerCmdType_GetSlotStoreResp   ServerCmdType = 415
	//for test
	ServerCmdType_PacketTest ServerCmdType = 1000
)

var ServerCmdType_name = map[int32]string{
	1:    "QueryLeader",
	2:    "QueryLeaderResp",
	101:  "InstallDeployment",
	102:  "InstallDeploymentResp",
	103:  "AddNode",
	104:  "AddNodeResp",
	105:  "AddLearnerStoreToNode",
	106:  "AddLearnerStoreToNodeResp",
	107:  "PromoteLearnerStore",
	108:  "PromoteLearnerStoreResp",
	109:  "RemoveNodeStore",
	110:  "RemoveNodeStoreResp",
	111:  "RemNode",
	112:  "RemNodeResp",
	113:  "AddSet",
	114:  "AddSetResp",
	115:  "RemSet",
	116:  "RemSetResp",
	117:  "SetMarkClear",
	118:  "SetMarkClearResp",
	119:  "SetMeta",
	120:  "SetMetaResp",
	121:  "GetMeta",
	122:  "GetMetaResp",
	123:  "UpdateMeta",
	124:  "UpdateMetaResp",
	125:  "GetSetStatus",
	126:  "GetSetStatusResp",
	210:  "KvnodeBoot",
	211:  "KvnodeBootResp",
	212:  "NotifyNodeStoreOp",
	213:  "NodeStoreOpOk",
	214:  "IsTransInReady",
	215:  "IsTransInReadyResp",
	218:  "NotifySlotTransOut",
	219:  "SlotTransOutOk",
	220:  "NotifySlotTransIn",
	221:  "SlotTransInOk",
	222:  "NotifyUpdateMeta",
	223:  "StoreUpdateMetaOk",
	224:  "StoreReportStatus",
	225:  "TrasnferLeader",
	310:  "QueryRouteInfo",
	311:  "QueryRouteInfoResp",
	312:  "FlyGateHeartBeat",
	410:  "GetFlyGateList",
	411:  "GetFlyGateListResp",
	412:  "ChangeFlyGate",
	413:  "ChangeFlyGateResp",
	414:  "GetSlotStore",
	415:  "GetSlotStoreResp",
	1000: "PacketTest",
}

var ServerCmdType_value = map[string]int32{
	"QueryLeader":               1,
	"QueryLeaderResp":           2,
	"InstallDeployment":         101,
	"InstallDeploymentResp":     102,
	"AddNode":                   103,
	"AddNodeResp":               104,
	"AddLearnerStoreToNode":     105,
	"AddLearnerStoreToNodeResp": 106,
	"PromoteLearnerStore":       107,
	"PromoteLearnerStoreResp":   108,
	"RemoveNodeStore":           109,
	"RemoveNodeStoreResp":       110,
	"RemNode":                   111,
	"RemNodeResp":               112,
	"AddSet":                    113,
	"AddSetResp":                114,
	"RemSet":                    115,
	"RemSetResp":                116,
	"SetMarkClear":              117,
	"SetMarkClearResp":          118,
	"SetMeta":                   119,
	"SetMetaResp":               120,
	"GetMeta":                   121,
	"GetMetaResp":               122,
	"UpdateMeta":                123,
	"UpdateMetaResp":            124,
	"GetSetStatus":              125,
	"GetSetStatusResp":          126,
	"KvnodeBoot":                210,
	"KvnodeBootResp":            211,
	"NotifyNodeStoreOp":         212,
	"NodeStoreOpOk":             213,
	"IsTransInReady":            214,
	"IsTransInReadyResp":        215,
	"NotifySlotTransOut":        218,
	"SlotTransOutOk":            219,
	"NotifySlotTransIn":         220,
	"SlotTransInOk":             221,
	"NotifyUpdateMeta":          222,
	"StoreUpdateMetaOk":         223,
	"StoreReportStatus":         224,
	"TrasnferLeader":            225,
	"QueryRouteInfo":            310,
	"QueryRouteInfoResp":        311,
	"FlyGateHeartBeat":          312,
	"GetFlyGateList":            410,
	"GetFlyGateListResp":        411,
	"ChangeFlyGate":             412,
	"ChangeFlyGateResp":         413,
	"GetSlotStore":              414,
	"GetSlotStoreResp":          415,
	"PacketTest":                1000,
}

func (x ServerCmdType) Enum() *ServerCmdType {
	p := new(ServerCmdType)
	*p = x
	return p
}

func (x ServerCmdType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ServerCmdType_name, int32(x))
}

func (x *ServerCmdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServerCmdType_value, data, "ServerCmdType")
	if err != nil {
		return err
	}
	*x = ServerCmdType(value)
	return nil
}

func (ServerCmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{0}
}

type StoreOpType int32

const (
	StoreOpType_AddLearner     StoreOpType = 1
	StoreOpType_PromoteLearner StoreOpType = 2
	StoreOpType_RemoveStore    StoreOpType = 3
)

var StoreOpType_name = map[int32]string{
	1: "AddLearner",
	2: "PromoteLearner",
	3: "RemoveStore",
}

var StoreOpType_value = map[string]int32{
	"AddLearner":     1,
	"PromoteLearner": 2,
	"RemoveStore":    3,
}

func (x StoreOpType) Enum() *StoreOpType {
	p := new(StoreOpType)
	*p = x
	return p
}

func (x StoreOpType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(StoreOpType_name, int32(x))
}

func (x *StoreOpType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreOpType_value, data, "StoreOpType")
	if err != nil {
		return err
	}
	*x = StoreOpType(value)
	return nil
}

func (StoreOpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{1}
}

type QueryRouteInfo struct {
	Version int64   `protobuf:"varint,1,opt,name=version" json:"version"`
	Sets    []int32 `protobuf:"varint,2,rep,name=sets" json:"sets,omitempty"`
}

func (m *QueryRouteInfo) Reset()      { *m = QueryRouteInfo{} }
func (*QueryRouteInfo) ProtoMessage() {}
func (*QueryRouteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{0}
}
func (m *QueryRouteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRouteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRouteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRouteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteInfo.Merge(m, src)
}
func (m *QueryRouteInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryRouteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteInfo proto.InternalMessageInfo

func (m *QueryRouteInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *QueryRouteInfo) GetSets() []int32 {
	if m != nil {
		return m.Sets
	}
	return nil
}

type RouteInfoKvNode struct {
	NodeID      int32  `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Host        string `protobuf:"bytes,2,opt,name=host" json:"host"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort" json:"servicePort"`
}

func (m *RouteInfoKvNode) Reset()      { *m = RouteInfoKvNode{} }
func (*RouteInfoKvNode) ProtoMessage() {}
func (*RouteInfoKvNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{1}
}
func (m *RouteInfoKvNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteInfoKvNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteInfoKvNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteInfoKvNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteInfoKvNode.Merge(m, src)
}
func (m *RouteInfoKvNode) XXX_Size() int {
	return m.Size()
}
func (m *RouteInfoKvNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteInfoKvNode.DiscardUnknown(m)
}

var xxx_messageInfo_RouteInfoKvNode proto.InternalMessageInfo

func (m *RouteInfoKvNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *RouteInfoKvNode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RouteInfoKvNode) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

type RouteInfoSet struct {
	SetID   int32              `protobuf:"varint,1,opt,name=setID" json:"setID"`
	Stores  []int32            `protobuf:"varint,2,rep,name=stores" json:"stores,omitempty"`
	Slots   [][]byte           `protobuf:"bytes,3,rep,name=slots" json:"slots,omitempty"`
	Kvnodes []*RouteInfoKvNode `protobuf:"bytes,4,rep,name=kvnodes" json:"kvnodes,omitempty"`
}

func (m *RouteInfoSet) Reset()      { *m = RouteInfoSet{} }
func (*RouteInfoSet) ProtoMessage() {}
func (*RouteInfoSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{2}
}
func (m *RouteInfoSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteInfoSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteInfoSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteInfoSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteInfoSet.Merge(m, src)
}
func (m *RouteInfoSet) XXX_Size() int {
	return m.Size()
}
func (m *RouteInfoSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteInfoSet.DiscardUnknown(m)
}

var xxx_messageInfo_RouteInfoSet proto.InternalMessageInfo

func (m *RouteInfoSet) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *RouteInfoSet) GetStores() []int32 {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *RouteInfoSet) GetSlots() [][]byte {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *RouteInfoSet) GetKvnodes() []*RouteInfoKvNode {
	if m != nil {
		return m.Kvnodes
	}
	return nil
}

type QueryRouteInfoResp struct {
	Sets       []*RouteInfoSet `protobuf:"bytes,1,rep,name=sets" json:"sets,omitempty"`
	RemoveSets []int32         `protobuf:"varint,2,rep,name=removeSets" json:"removeSets,omitempty"`
	Version    int64           `protobuf:"varint,3,opt,name=version" json:"version"`
}

func (m *QueryRouteInfoResp) Reset()      { *m = QueryRouteInfoResp{} }
func (*QueryRouteInfoResp) ProtoMessage() {}
func (*QueryRouteInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{3}
}
func (m *QueryRouteInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRouteInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRouteInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRouteInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteInfoResp.Merge(m, src)
}
func (m *QueryRouteInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryRouteInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteInfoResp proto.InternalMessageInfo

func (m *QueryRouteInfoResp) GetSets() []*RouteInfoSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

func (m *QueryRouteInfoResp) GetRemoveSets() []int32 {
	if m != nil {
		return m.RemoveSets
	}
	return nil
}

func (m *QueryRouteInfoResp) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

//查询是否store的leader,如果是返回yes=true
type QueryLeader struct {
	Store int32 `protobuf:"varint,1,opt,name=store" json:"store"`
}

func (m *QueryLeader) Reset()      { *m = QueryLeader{} }
func (*QueryLeader) ProtoMessage() {}
func (*QueryLeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{4}
}
func (m *QueryLeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLeader.Merge(m, src)
}
func (m *QueryLeader) XXX_Size() int {
	return m.Size()
}
func (m *QueryLeader) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLeader.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLeader proto.InternalMessageInfo

func (m *QueryLeader) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type QueryLeaderResp struct {
	Leader int32 `protobuf:"varint,1,opt,name=leader" json:"leader"`
}

func (m *QueryLeaderResp) Reset()      { *m = QueryLeaderResp{} }
func (*QueryLeaderResp) ProtoMessage() {}
func (*QueryLeaderResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{5}
}
func (m *QueryLeaderResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLeaderResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLeaderResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLeaderResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLeaderResp.Merge(m, src)
}
func (m *QueryLeaderResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryLeaderResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLeaderResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLeaderResp proto.InternalMessageInfo

func (m *QueryLeaderResp) GetLeader() int32 {
	if m != nil {
		return m.Leader
	}
	return 0
}

type DeploymentKvnode struct {
	NodeID      int32  `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Host        string `protobuf:"bytes,2,opt,name=host" json:"host"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort" json:"servicePort"`
	RaftPort    int32  `protobuf:"varint,4,opt,name=raftPort" json:"raftPort"`
}

func (m *DeploymentKvnode) Reset()      { *m = DeploymentKvnode{} }
func (*DeploymentKvnode) ProtoMessage() {}
func (*DeploymentKvnode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{6}
}
func (m *DeploymentKvnode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentKvnode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentKvnode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentKvnode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentKvnode.Merge(m, src)
}
func (m *DeploymentKvnode) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentKvnode) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentKvnode.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentKvnode proto.InternalMessageInfo

func (m *DeploymentKvnode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *DeploymentKvnode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DeploymentKvnode) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *DeploymentKvnode) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

type DeploymentSet struct {
	SetID int32               `protobuf:"varint,1,opt,name=setID" json:"setID"`
	Nodes []*DeploymentKvnode `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *DeploymentSet) Reset()      { *m = DeploymentSet{} }
func (*DeploymentSet) ProtoMessage() {}
func (*DeploymentSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{7}
}
func (m *DeploymentSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentSet.Merge(m, src)
}
func (m *DeploymentSet) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentSet) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentSet.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentSet proto.InternalMessageInfo

func (m *DeploymentSet) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *DeploymentSet) GetNodes() []*DeploymentKvnode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type InstallDeployment struct {
	Sets []*DeploymentSet `protobuf:"bytes,1,rep,name=sets" json:"sets,omitempty"`
}

func (m *InstallDeployment) Reset()      { *m = InstallDeployment{} }
func (*InstallDeployment) ProtoMessage() {}
func (*InstallDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{8}
}
func (m *InstallDeployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallDeployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallDeployment.Merge(m, src)
}
func (m *InstallDeployment) XXX_Size() int {
	return m.Size()
}
func (m *InstallDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_InstallDeployment proto.InternalMessageInfo

func (m *InstallDeployment) GetSets() []*DeploymentSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

type InstallDeploymentResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *InstallDeploymentResp) Reset()      { *m = InstallDeploymentResp{} }
func (*InstallDeploymentResp) ProtoMessage() {}
func (*InstallDeploymentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{9}
}
func (m *InstallDeploymentResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallDeploymentResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallDeploymentResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallDeploymentResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallDeploymentResp.Merge(m, src)
}
func (m *InstallDeploymentResp) XXX_Size() int {
	return m.Size()
}
func (m *InstallDeploymentResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallDeploymentResp.DiscardUnknown(m)
}

var xxx_messageInfo_InstallDeploymentResp proto.InternalMessageInfo

func (m *InstallDeploymentResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *InstallDeploymentResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type AddNode struct {
	SetID       int32  `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID      int32  `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
	Host        string `protobuf:"bytes,3,opt,name=host" json:"host"`
	ServicePort int32  `protobuf:"varint,4,opt,name=servicePort" json:"servicePort"`
	RaftPort    int32  `protobuf:"varint,5,opt,name=raftPort" json:"raftPort"`
}

func (m *AddNode) Reset()      { *m = AddNode{} }
func (*AddNode) ProtoMessage() {}
func (*AddNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{10}
}
func (m *AddNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNode.Merge(m, src)
}
func (m *AddNode) XXX_Size() int {
	return m.Size()
}
func (m *AddNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNode.DiscardUnknown(m)
}

var xxx_messageInfo_AddNode proto.InternalMessageInfo

func (m *AddNode) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *AddNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *AddNode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AddNode) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *AddNode) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

type AddNodeResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *AddNodeResp) Reset()      { *m = AddNodeResp{} }
func (*AddNodeResp) ProtoMessage() {}
func (*AddNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{11}
}
func (m *AddNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNodeResp.Merge(m, src)
}
func (m *AddNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *AddNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddNodeResp proto.InternalMessageInfo

func (m *AddNodeResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddNodeResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type AddLearnerStoreToNode struct {
	SetID  int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID int32 `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
	Store  int32 `protobuf:"varint,3,opt,name=store" json:"store"`
}

func (m *AddLearnerStoreToNode) Reset()      { *m = AddLearnerStoreToNode{} }
func (*AddLearnerStoreToNode) ProtoMessage() {}
func (*AddLearnerStoreToNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{12}
}
func (m *AddLearnerStoreToNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLearnerStoreToNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLearnerStoreToNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddLearnerStoreToNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLearnerStoreToNode.Merge(m, src)
}
func (m *AddLearnerStoreToNode) XXX_Size() int {
	return m.Size()
}
func (m *AddLearnerStoreToNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLearnerStoreToNode.DiscardUnknown(m)
}

var xxx_messageInfo_AddLearnerStoreToNode proto.InternalMessageInfo

func (m *AddLearnerStoreToNode) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *AddLearnerStoreToNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *AddLearnerStoreToNode) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type AddLearnerStoreToNodeResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *AddLearnerStoreToNodeResp) Reset()      { *m = AddLearnerStoreToNodeResp{} }
func (*AddLearnerStoreToNodeResp) ProtoMessage() {}
func (*AddLearnerStoreToNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{13}
}
func (m *AddLearnerStoreToNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLearnerStoreToNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLearnerStoreToNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddLearnerStoreToNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLearnerStoreToNodeResp.Merge(m, src)
}
func (m *AddLearnerStoreToNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *AddLearnerStoreToNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLearnerStoreToNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddLearnerStoreToNodeResp proto.InternalMessageInfo

func (m *AddLearnerStoreToNodeResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddLearnerStoreToNodeResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type PromoteLearnerStore struct {
	SetID  int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID int32 `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
	Store  int32 `protobuf:"varint,3,opt,name=store" json:"store"`
}

func (m *PromoteLearnerStore) Reset()      { *m = PromoteLearnerStore{} }
func (*PromoteLearnerStore) ProtoMessage() {}
func (*PromoteLearnerStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{14}
}
func (m *PromoteLearnerStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteLearnerStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromoteLearnerStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromoteLearnerStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteLearnerStore.Merge(m, src)
}
func (m *PromoteLearnerStore) XXX_Size() int {
	return m.Size()
}
func (m *PromoteLearnerStore) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteLearnerStore.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteLearnerStore proto.InternalMessageInfo

func (m *PromoteLearnerStore) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *PromoteLearnerStore) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *PromoteLearnerStore) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type PromoteLearnerStoreResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *PromoteLearnerStoreResp) Reset()      { *m = PromoteLearnerStoreResp{} }
func (*PromoteLearnerStoreResp) ProtoMessage() {}
func (*PromoteLearnerStoreResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{15}
}
func (m *PromoteLearnerStoreResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteLearnerStoreResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromoteLearnerStoreResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromoteLearnerStoreResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteLearnerStoreResp.Merge(m, src)
}
func (m *PromoteLearnerStoreResp) XXX_Size() int {
	return m.Size()
}
func (m *PromoteLearnerStoreResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteLearnerStoreResp.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteLearnerStoreResp proto.InternalMessageInfo

func (m *PromoteLearnerStoreResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PromoteLearnerStoreResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type RemoveNodeStore struct {
	SetID  int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID int32 `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
	Store  int32 `protobuf:"varint,3,opt,name=store" json:"store"`
}

func (m *RemoveNodeStore) Reset()      { *m = RemoveNodeStore{} }
func (*RemoveNodeStore) ProtoMessage() {}
func (*RemoveNodeStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{16}
}
func (m *RemoveNodeStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveNodeStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveNodeStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveNodeStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNodeStore.Merge(m, src)
}
func (m *RemoveNodeStore) XXX_Size() int {
	return m.Size()
}
func (m *RemoveNodeStore) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNodeStore.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNodeStore proto.InternalMessageInfo

func (m *RemoveNodeStore) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *RemoveNodeStore) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *RemoveNodeStore) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type RemoveNodeStoreResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *RemoveNodeStoreResp) Reset()      { *m = RemoveNodeStoreResp{} }
func (*RemoveNodeStoreResp) ProtoMessage() {}
func (*RemoveNodeStoreResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{17}
}
func (m *RemoveNodeStoreResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveNodeStoreResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveNodeStoreResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveNodeStoreResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNodeStoreResp.Merge(m, src)
}
func (m *RemoveNodeStoreResp) XXX_Size() int {
	return m.Size()
}
func (m *RemoveNodeStoreResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNodeStoreResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNodeStoreResp proto.InternalMessageInfo

func (m *RemoveNodeStoreResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RemoveNodeStoreResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type RemNode struct {
	SetID  int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID int32 `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
}

func (m *RemNode) Reset()      { *m = RemNode{} }
func (*RemNode) ProtoMessage() {}
func (*RemNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{18}
}
func (m *RemNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemNode.Merge(m, src)
}
func (m *RemNode) XXX_Size() int {
	return m.Size()
}
func (m *RemNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemNode.DiscardUnknown(m)
}

var xxx_messageInfo_RemNode proto.InternalMessageInfo

func (m *RemNode) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *RemNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type RemNodeResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *RemNodeResp) Reset()      { *m = RemNodeResp{} }
func (*RemNodeResp) ProtoMessage() {}
func (*RemNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{19}
}
func (m *RemNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemNodeResp.Merge(m, src)
}
func (m *RemNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *RemNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemNodeResp proto.InternalMessageInfo

func (m *RemNodeResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RemNodeResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type KvnodeBoot struct {
	NodeID int32 `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
}

func (m *KvnodeBoot) Reset()      { *m = KvnodeBoot{} }
func (*KvnodeBoot) ProtoMessage() {}
func (*KvnodeBoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{20}
}
func (m *KvnodeBoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeBoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeBoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeBoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeBoot.Merge(m, src)
}
func (m *KvnodeBoot) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeBoot) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeBoot.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeBoot proto.InternalMessageInfo

func (m *KvnodeBoot) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type StoreInfo struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	RaftCluster string `protobuf:"bytes,2,opt,name=raftCluster" json:"raftCluster"`
	Slots       []byte `protobuf:"bytes,3,opt,name=slots" json:"slots"`
}

func (m *StoreInfo) Reset()      { *m = StoreInfo{} }
func (*StoreInfo) ProtoMessage() {}
func (*StoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{21}
}
func (m *StoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreInfo.Merge(m, src)
}
func (m *StoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *StoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StoreInfo proto.InternalMessageInfo

func (m *StoreInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreInfo) GetRaftCluster() string {
	if m != nil {
		return m.RaftCluster
	}
	return ""
}

func (m *StoreInfo) GetSlots() []byte {
	if m != nil {
		return m.Slots
	}
	return nil
}

type KvnodeBootResp struct {
	Ok          bool         `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason      string       `protobuf:"bytes,2,opt,name=reason" json:"reason"`
	SetID       int32        `protobuf:"varint,3,opt,name=setID" json:"setID"`
	ServiceHost string       `protobuf:"bytes,4,opt,name=serviceHost" json:"serviceHost"`
	ServicePort int32        `protobuf:"varint,5,opt,name=servicePort" json:"servicePort"`
	RaftPort    int32        `protobuf:"varint,6,opt,name=raftPort" json:"raftPort"`
	Stores      []*StoreInfo `protobuf:"bytes,7,rep,name=stores" json:"stores,omitempty"`
	MetaVersion int64        `protobuf:"varint,8,opt,name=metaVersion" json:"metaVersion"`
	Meta        []byte       `protobuf:"bytes,9,opt,name=meta" json:"meta"`
}

func (m *KvnodeBootResp) Reset()      { *m = KvnodeBootResp{} }
func (*KvnodeBootResp) ProtoMessage() {}
func (*KvnodeBootResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{22}
}
func (m *KvnodeBootResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeBootResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeBootResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeBootResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeBootResp.Merge(m, src)
}
func (m *KvnodeBootResp) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeBootResp) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeBootResp.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeBootResp proto.InternalMessageInfo

func (m *KvnodeBootResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *KvnodeBootResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *KvnodeBootResp) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *KvnodeBootResp) GetServiceHost() string {
	if m != nil {
		return m.ServiceHost
	}
	return ""
}

func (m *KvnodeBootResp) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *KvnodeBootResp) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

func (m *KvnodeBootResp) GetStores() []*StoreInfo {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *KvnodeBootResp) GetMetaVersion() int64 {
	if m != nil {
		return m.MetaVersion
	}
	return 0
}

func (m *KvnodeBootResp) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type NotifyNodeStoreOp struct {
	Op       int32  `protobuf:"varint,1,opt,name=op" json:"op"`
	NodeID   int32  `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
	Host     string `protobuf:"bytes,3,opt,name=host" json:"host"`
	RaftPort int32  `protobuf:"varint,4,opt,name=raftPort" json:"raftPort"`
	Store    int32  `protobuf:"varint,5,opt,name=store" json:"store"`
}

func (m *NotifyNodeStoreOp) Reset()      { *m = NotifyNodeStoreOp{} }
func (*NotifyNodeStoreOp) ProtoMessage() {}
func (*NotifyNodeStoreOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{23}
}
func (m *NotifyNodeStoreOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyNodeStoreOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyNodeStoreOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyNodeStoreOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyNodeStoreOp.Merge(m, src)
}
func (m *NotifyNodeStoreOp) XXX_Size() int {
	return m.Size()
}
func (m *NotifyNodeStoreOp) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyNodeStoreOp.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyNodeStoreOp proto.InternalMessageInfo

func (m *NotifyNodeStoreOp) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *NotifyNodeStoreOp) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NotifyNodeStoreOp) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *NotifyNodeStoreOp) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

func (m *NotifyNodeStoreOp) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type NodeStoreOpOk struct {
}

func (m *NodeStoreOpOk) Reset()      { *m = NodeStoreOpOk{} }
func (*NodeStoreOpOk) ProtoMessage() {}
func (*NodeStoreOpOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{24}
}
func (m *NodeStoreOpOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStoreOpOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStoreOpOk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStoreOpOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStoreOpOk.Merge(m, src)
}
func (m *NodeStoreOpOk) XXX_Size() int {
	return m.Size()
}
func (m *NodeStoreOpOk) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStoreOpOk.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStoreOpOk proto.InternalMessageInfo

type IsTransInReady struct {
	Store int32 `protobuf:"varint,1,opt,name=store" json:"store"`
	Slot  int32 `protobuf:"varint,2,opt,name=slot" json:"slot"`
}

func (m *IsTransInReady) Reset()      { *m = IsTransInReady{} }
func (*IsTransInReady) ProtoMessage() {}
func (*IsTransInReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{25}
}
func (m *IsTransInReady) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTransInReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTransInReady.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTransInReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTransInReady.Merge(m, src)
}
func (m *IsTransInReady) XXX_Size() int {
	return m.Size()
}
func (m *IsTransInReady) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTransInReady.DiscardUnknown(m)
}

var xxx_messageInfo_IsTransInReady proto.InternalMessageInfo

func (m *IsTransInReady) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *IsTransInReady) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type IsTransInReadyResp struct {
	Ready bool  `protobuf:"varint,1,opt,name=ready" json:"ready"`
	Slot  int32 `protobuf:"varint,2,opt,name=slot" json:"slot"`
}

func (m *IsTransInReadyResp) Reset()      { *m = IsTransInReadyResp{} }
func (*IsTransInReadyResp) ProtoMessage() {}
func (*IsTransInReadyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{26}
}
func (m *IsTransInReadyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTransInReadyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTransInReadyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTransInReadyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTransInReadyResp.Merge(m, src)
}
func (m *IsTransInReadyResp) XXX_Size() int {
	return m.Size()
}
func (m *IsTransInReadyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTransInReadyResp.DiscardUnknown(m)
}

var xxx_messageInfo_IsTransInReadyResp proto.InternalMessageInfo

func (m *IsTransInReadyResp) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *IsTransInReadyResp) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type NotifySlotTransOut struct {
	Slot  int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
	Store int32 `protobuf:"varint,2,opt,name=store" json:"store"`
}

func (m *NotifySlotTransOut) Reset()      { *m = NotifySlotTransOut{} }
func (*NotifySlotTransOut) ProtoMessage() {}
func (*NotifySlotTransOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{27}
}
func (m *NotifySlotTransOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifySlotTransOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifySlotTransOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifySlotTransOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifySlotTransOut.Merge(m, src)
}
func (m *NotifySlotTransOut) XXX_Size() int {
	return m.Size()
}
func (m *NotifySlotTransOut) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifySlotTransOut.DiscardUnknown(m)
}

var xxx_messageInfo_NotifySlotTransOut proto.InternalMessageInfo

func (m *NotifySlotTransOut) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *NotifySlotTransOut) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type SlotTransOutOk struct {
	Slot int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
}

func (m *SlotTransOutOk) Reset()      { *m = SlotTransOutOk{} }
func (*SlotTransOutOk) ProtoMessage() {}
func (*SlotTransOutOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{28}
}
func (m *SlotTransOutOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotTransOutOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotTransOutOk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotTransOutOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotTransOutOk.Merge(m, src)
}
func (m *SlotTransOutOk) XXX_Size() int {
	return m.Size()
}
func (m *SlotTransOutOk) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotTransOutOk.DiscardUnknown(m)
}

var xxx_messageInfo_SlotTransOutOk proto.InternalMessageInfo

func (m *SlotTransOutOk) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type NotifySlotTransIn struct {
	Slot  int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
	Store int32 `protobuf:"varint,2,opt,name=store" json:"store"`
}

func (m *NotifySlotTransIn) Reset()      { *m = NotifySlotTransIn{} }
func (*NotifySlotTransIn) ProtoMessage() {}
func (*NotifySlotTransIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{29}
}
func (m *NotifySlotTransIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifySlotTransIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifySlotTransIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifySlotTransIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifySlotTransIn.Merge(m, src)
}
func (m *NotifySlotTransIn) XXX_Size() int {
	return m.Size()
}
func (m *NotifySlotTransIn) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifySlotTransIn.DiscardUnknown(m)
}

var xxx_messageInfo_NotifySlotTransIn proto.InternalMessageInfo

func (m *NotifySlotTransIn) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *NotifySlotTransIn) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type SlotTransInOk struct {
	Slot int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
}

func (m *SlotTransInOk) Reset()      { *m = SlotTransInOk{} }
func (*SlotTransInOk) ProtoMessage() {}
func (*SlotTransInOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{30}
}
func (m *SlotTransInOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotTransInOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotTransInOk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotTransInOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotTransInOk.Merge(m, src)
}
func (m *SlotTransInOk) XXX_Size() int {
	return m.Size()
}
func (m *SlotTransInOk) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotTransInOk.DiscardUnknown(m)
}

var xxx_messageInfo_SlotTransInOk proto.InternalMessageInfo

func (m *SlotTransInOk) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type AddSet struct {
	Set *DeploymentSet `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
}

func (m *AddSet) Reset()      { *m = AddSet{} }
func (*AddSet) ProtoMessage() {}
func (*AddSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{31}
}
func (m *AddSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSet.Merge(m, src)
}
func (m *AddSet) XXX_Size() int {
	return m.Size()
}
func (m *AddSet) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSet.DiscardUnknown(m)
}

var xxx_messageInfo_AddSet proto.InternalMessageInfo

func (m *AddSet) GetSet() *DeploymentSet {
	if m != nil {
		return m.Set
	}
	return nil
}

type AddSetResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *AddSetResp) Reset()      { *m = AddSetResp{} }
func (*AddSetResp) ProtoMessage() {}
func (*AddSetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{32}
}
func (m *AddSetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSetResp.Merge(m, src)
}
func (m *AddSetResp) XXX_Size() int {
	return m.Size()
}
func (m *AddSetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSetResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddSetResp proto.InternalMessageInfo

func (m *AddSetResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddSetResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type RemSet struct {
	SetID int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
}

func (m *RemSet) Reset()      { *m = RemSet{} }
func (*RemSet) ProtoMessage() {}
func (*RemSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{33}
}
func (m *RemSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemSet.Merge(m, src)
}
func (m *RemSet) XXX_Size() int {
	return m.Size()
}
func (m *RemSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RemSet.DiscardUnknown(m)
}

var xxx_messageInfo_RemSet proto.InternalMessageInfo

func (m *RemSet) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

type RemSetResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *RemSetResp) Reset()      { *m = RemSetResp{} }
func (*RemSetResp) ProtoMessage() {}
func (*RemSetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{34}
}
func (m *RemSetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemSetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemSetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemSetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemSetResp.Merge(m, src)
}
func (m *RemSetResp) XXX_Size() int {
	return m.Size()
}
func (m *RemSetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemSetResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemSetResp proto.InternalMessageInfo

func (m *RemSetResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RemSetResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type SetMarkClear struct {
	SetID int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
}

func (m *SetMarkClear) Reset()      { *m = SetMarkClear{} }
func (*SetMarkClear) ProtoMessage() {}
func (*SetMarkClear) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{35}
}
func (m *SetMarkClear) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMarkClear) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMarkClear.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMarkClear) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMarkClear.Merge(m, src)
}
func (m *SetMarkClear) XXX_Size() int {
	return m.Size()
}
func (m *SetMarkClear) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMarkClear.DiscardUnknown(m)
}

var xxx_messageInfo_SetMarkClear proto.InternalMessageInfo

func (m *SetMarkClear) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

type SetMarkClearResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *SetMarkClearResp) Reset()      { *m = SetMarkClearResp{} }
func (*SetMarkClearResp) ProtoMessage() {}
func (*SetMarkClearResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{36}
}
func (m *SetMarkClearResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMarkClearResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMarkClearResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMarkClearResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMarkClearResp.Merge(m, src)
}
func (m *SetMarkClearResp) XXX_Size() int {
	return m.Size()
}
func (m *SetMarkClearResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMarkClearResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetMarkClearResp proto.InternalMessageInfo

func (m *SetMarkClearResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SetMarkClearResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type Flygate struct {
	Service      string `protobuf:"bytes,1,opt,name=service" json:"service"`
	MsgPerSecond int32  `protobuf:"varint,2,opt,name=msgPerSecond" json:"msgPerSecond"`
}

func (m *Flygate) Reset()      { *m = Flygate{} }
func (*Flygate) ProtoMessage() {}
func (*Flygate) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{37}
}
func (m *Flygate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Flygate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Flygate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Flygate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flygate.Merge(m, src)
}
func (m *Flygate) XXX_Size() int {
	return m.Size()
}
func (m *Flygate) XXX_DiscardUnknown() {
	xxx_messageInfo_Flygate.DiscardUnknown(m)
}

var xxx_messageInfo_Flygate proto.InternalMessageInfo

func (m *Flygate) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Flygate) GetMsgPerSecond() int32 {
	if m != nil {
		return m.MsgPerSecond
	}
	return 0
}

type GetFlyGateList struct {
}

func (m *GetFlyGateList) Reset()      { *m = GetFlyGateList{} }
func (*GetFlyGateList) ProtoMessage() {}
func (*GetFlyGateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{38}
}
func (m *GetFlyGateList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFlyGateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFlyGateList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFlyGateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlyGateList.Merge(m, src)
}
func (m *GetFlyGateList) XXX_Size() int {
	return m.Size()
}
func (m *GetFlyGateList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlyGateList.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlyGateList proto.InternalMessageInfo

type GetFlyGateListResp struct {
	List []*Flygate `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *GetFlyGateListResp) Reset()      { *m = GetFlyGateListResp{} }
func (*GetFlyGateListResp) ProtoMessage() {}
func (*GetFlyGateListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{39}
}
func (m *GetFlyGateListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFlyGateListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFlyGateListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFlyGateListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlyGateListResp.Merge(m, src)
}
func (m *GetFlyGateListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetFlyGateListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlyGateListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlyGateListResp proto.InternalMessageInfo

func (m *GetFlyGateListResp) GetList() []*Flygate {
	if m != nil {
		return m.List
	}
	return nil
}

type FlyGateHeartBeat struct {
	GateService  string `protobuf:"bytes,1,opt,name=gateService" json:"gateService"`
	MsgPerSecond int32  `protobuf:"varint,2,opt,name=msgPerSecond" json:"msgPerSecond"`
}

func (m *FlyGateHeartBeat) Reset()      { *m = FlyGateHeartBeat{} }
func (*FlyGateHeartBeat) ProtoMessage() {}
func (*FlyGateHeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{40}
}
func (m *FlyGateHeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlyGateHeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlyGateHeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlyGateHeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlyGateHeartBeat.Merge(m, src)
}
func (m *FlyGateHeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *FlyGateHeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_FlyGateHeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_FlyGateHeartBeat proto.InternalMessageInfo

func (m *FlyGateHeartBeat) GetGateService() string {
	if m != nil {
		return m.GateService
	}
	return ""
}

func (m *FlyGateHeartBeat) GetMsgPerSecond() int32 {
	if m != nil {
		return m.MsgPerSecond
	}
	return 0
}

type ChangeFlyGate struct {
	CurrentGate      string `protobuf:"bytes,1,opt,name=currentGate" json:"currentGate"`
	MsgSendPerSecond int32  `protobuf:"varint,2,opt,name=msgSendPerSecond" json:"msgSendPerSecond"`
}

func (m *ChangeFlyGate) Reset()      { *m = ChangeFlyGate{} }
func (*ChangeFlyGate) ProtoMessage() {}
func (*ChangeFlyGate) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{41}
}
func (m *ChangeFlyGate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeFlyGate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeFlyGate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeFlyGate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeFlyGate.Merge(m, src)
}
func (m *ChangeFlyGate) XXX_Size() int {
	return m.Size()
}
func (m *ChangeFlyGate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeFlyGate.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeFlyGate proto.InternalMessageInfo

func (m *ChangeFlyGate) GetCurrentGate() string {
	if m != nil {
		return m.CurrentGate
	}
	return ""
}

func (m *ChangeFlyGate) GetMsgSendPerSecond() int32 {
	if m != nil {
		return m.MsgSendPerSecond
	}
	return 0
}

type ChangeFlyGateResp struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Service string `protobuf:"bytes,2,opt,name=service" json:"service"`
}

func (m *ChangeFlyGateResp) Reset()      { *m = ChangeFlyGateResp{} }
func (*ChangeFlyGateResp) ProtoMessage() {}
func (*ChangeFlyGateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{42}
}
func (m *ChangeFlyGateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeFlyGateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeFlyGateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeFlyGateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeFlyGateResp.Merge(m, src)
}
func (m *ChangeFlyGateResp) XXX_Size() int {
	return m.Size()
}
func (m *ChangeFlyGateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeFlyGateResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeFlyGateResp proto.InternalMessageInfo

func (m *ChangeFlyGateResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ChangeFlyGateResp) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type SetMeta struct {
	Meta    []byte `protobuf:"bytes,1,opt,name=meta" json:"meta"`
	Version int64  `protobuf:"varint,2,opt,name=version" json:"version"`
}

func (m *SetMeta) Reset()      { *m = SetMeta{} }
func (*SetMeta) ProtoMessage() {}
func (*SetMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{43}
}
func (m *SetMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMeta.Merge(m, src)
}
func (m *SetMeta) XXX_Size() int {
	return m.Size()
}
func (m *SetMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SetMeta proto.InternalMessageInfo

func (m *SetMeta) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SetMeta) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type SetMetaResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *SetMetaResp) Reset()      { *m = SetMetaResp{} }
func (*SetMetaResp) ProtoMessage() {}
func (*SetMetaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{44}
}
func (m *SetMetaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMetaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMetaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMetaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMetaResp.Merge(m, src)
}
func (m *SetMetaResp) XXX_Size() int {
	return m.Size()
}
func (m *SetMetaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMetaResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetMetaResp proto.InternalMessageInfo

func (m *SetMetaResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SetMetaResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MetaFiled struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Type    string `protobuf:"bytes,2,opt,name=type" json:"type"`
	Default string `protobuf:"bytes,3,opt,name=default" json:"default"`
}

func (m *MetaFiled) Reset()      { *m = MetaFiled{} }
func (*MetaFiled) ProtoMessage() {}
func (*MetaFiled) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{45}
}
func (m *MetaFiled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaFiled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaFiled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaFiled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaFiled.Merge(m, src)
}
func (m *MetaFiled) XXX_Size() int {
	return m.Size()
}
func (m *MetaFiled) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaFiled.DiscardUnknown(m)
}

var xxx_messageInfo_MetaFiled proto.InternalMessageInfo

func (m *MetaFiled) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetaFiled) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetaFiled) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

type MetaTable struct {
	Name   string       `protobuf:"bytes,1,opt,name=name" json:"name"`
	Fields []*MetaFiled `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (m *MetaTable) Reset()      { *m = MetaTable{} }
func (*MetaTable) ProtoMessage() {}
func (*MetaTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{46}
}
func (m *MetaTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaTable.Merge(m, src)
}
func (m *MetaTable) XXX_Size() int {
	return m.Size()
}
func (m *MetaTable) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaTable.DiscardUnknown(m)
}

var xxx_messageInfo_MetaTable proto.InternalMessageInfo

func (m *MetaTable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetaTable) GetFields() []*MetaFiled {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateMeta struct {
	Updates []*MetaTable `protobuf:"bytes,1,rep,name=updates" json:"updates,omitempty"`
	Version int64        `protobuf:"varint,2,opt,name=version" json:"version"`
}

func (m *UpdateMeta) Reset()      { *m = UpdateMeta{} }
func (*UpdateMeta) ProtoMessage() {}
func (*UpdateMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{47}
}
func (m *UpdateMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMeta.Merge(m, src)
}
func (m *UpdateMeta) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMeta.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMeta proto.InternalMessageInfo

func (m *UpdateMeta) GetUpdates() []*MetaTable {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdateMeta) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type UpdateMetaResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *UpdateMetaResp) Reset()      { *m = UpdateMetaResp{} }
func (*UpdateMetaResp) ProtoMessage() {}
func (*UpdateMetaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{48}
}
func (m *UpdateMetaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMetaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMetaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMetaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMetaResp.Merge(m, src)
}
func (m *UpdateMetaResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMetaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMetaResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMetaResp proto.InternalMessageInfo

func (m *UpdateMetaResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *UpdateMetaResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type GetMeta struct {
}

func (m *GetMeta) Reset()      { *m = GetMeta{} }
func (*GetMeta) ProtoMessage() {}
func (*GetMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{49}
}
func (m *GetMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMeta.Merge(m, src)
}
func (m *GetMeta) XXX_Size() int {
	return m.Size()
}
func (m *GetMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMeta.DiscardUnknown(m)
}

var xxx_messageInfo_GetMeta proto.InternalMessageInfo

type GetMetaResp struct {
	Version int64  `protobuf:"varint,1,opt,name=version" json:"version"`
	Meta    []byte `protobuf:"bytes,2,opt,name=meta" json:"meta"`
}

func (m *GetMetaResp) Reset()      { *m = GetMetaResp{} }
func (*GetMetaResp) ProtoMessage() {}
func (*GetMetaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{50}
}
func (m *GetMetaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetaResp.Merge(m, src)
}
func (m *GetMetaResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMetaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetaResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetaResp proto.InternalMessageInfo

func (m *GetMetaResp) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetMetaResp) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type NotifyUpdateMeta struct {
	Store   int32  `protobuf:"varint,1,opt,name=store" json:"store"`
	Version int64  `protobuf:"varint,2,opt,name=version" json:"version"`
	Meta    []byte `protobuf:"bytes,3,opt,name=meta" json:"meta"`
}

func (m *NotifyUpdateMeta) Reset()      { *m = NotifyUpdateMeta{} }
func (*NotifyUpdateMeta) ProtoMessage() {}
func (*NotifyUpdateMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{51}
}
func (m *NotifyUpdateMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyUpdateMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyUpdateMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyUpdateMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyUpdateMeta.Merge(m, src)
}
func (m *NotifyUpdateMeta) XXX_Size() int {
	return m.Size()
}
func (m *NotifyUpdateMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyUpdateMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyUpdateMeta proto.InternalMessageInfo

func (m *NotifyUpdateMeta) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *NotifyUpdateMeta) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *NotifyUpdateMeta) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type StoreUpdateMetaOk struct {
	Store   int32 `protobuf:"varint,1,opt,name=store" json:"store"`
	Version int64 `protobuf:"varint,2,opt,name=version" json:"version"`
}

func (m *StoreUpdateMetaOk) Reset()      { *m = StoreUpdateMetaOk{} }
func (*StoreUpdateMetaOk) ProtoMessage() {}
func (*StoreUpdateMetaOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{52}
}
func (m *StoreUpdateMetaOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreUpdateMetaOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreUpdateMetaOk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreUpdateMetaOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreUpdateMetaOk.Merge(m, src)
}
func (m *StoreUpdateMetaOk) XXX_Size() int {
	return m.Size()
}
func (m *StoreUpdateMetaOk) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreUpdateMetaOk.DiscardUnknown(m)
}

var xxx_messageInfo_StoreUpdateMetaOk proto.InternalMessageInfo

func (m *StoreUpdateMetaOk) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *StoreUpdateMetaOk) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type PacketTest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message"`
}

func (m *PacketTest) Reset()      { *m = PacketTest{} }
func (*PacketTest) ProtoMessage() {}
func (*PacketTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{53}
}
func (m *PacketTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketTest.Merge(m, src)
}
func (m *PacketTest) XXX_Size() int {
	return m.Size()
}
func (m *PacketTest) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketTest.DiscardUnknown(m)
}

var xxx_messageInfo_PacketTest proto.InternalMessageInfo

func (m *PacketTest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetSetStatus struct {
}

func (m *GetSetStatus) Reset()      { *m = GetSetStatus{} }
func (*GetSetStatus) ProtoMessage() {}
func (*GetSetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{54}
}
func (m *GetSetStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSetStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSetStatus.Merge(m, src)
}
func (m *GetSetStatus) XXX_Size() int {
	return m.Size()
}
func (m *GetSetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GetSetStatus proto.InternalMessageInfo

type StoreStatus struct {
	StoreID int32  `protobuf:"varint,1,opt,name=storeID" json:"storeID"`
	Slots   []byte `protobuf:"bytes,2,opt,name=slots" json:"slots"`
}

func (m *StoreStatus) Reset()      { *m = StoreStatus{} }
func (*StoreStatus) ProtoMessage() {}
func (*StoreStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{55}
}
func (m *StoreStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreStatus.Merge(m, src)
}
func (m *StoreStatus) XXX_Size() int {
	return m.Size()
}
func (m *StoreStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StoreStatus proto.InternalMessageInfo

func (m *StoreStatus) GetStoreID() int32 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

func (m *StoreStatus) GetSlots() []byte {
	if m != nil {
		return m.Slots
	}
	return nil
}

type KvnodeStoreStatus struct {
	StoreID  int32 `protobuf:"varint,1,opt,name=storeID" json:"storeID"`
	Type     int32 `protobuf:"varint,2,opt,name=type" json:"type"`
	Value    int32 `protobuf:"varint,3,opt,name=value" json:"value"`
	IsLeader bool  `protobuf:"varint,4,opt,name=isLeader" json:"isLeader"`
}

func (m *KvnodeStoreStatus) Reset()      { *m = KvnodeStoreStatus{} }
func (*KvnodeStoreStatus) ProtoMessage() {}
func (*KvnodeStoreStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{56}
}
func (m *KvnodeStoreStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeStoreStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeStoreStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeStoreStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeStoreStatus.Merge(m, src)
}
func (m *KvnodeStoreStatus) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeStoreStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeStoreStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeStoreStatus proto.InternalMessageInfo

func (m *KvnodeStoreStatus) GetStoreID() int32 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

func (m *KvnodeStoreStatus) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *KvnodeStoreStatus) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *KvnodeStoreStatus) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

type KvnodeStatus struct {
	NodeID int32                `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Stores []*KvnodeStoreStatus `protobuf:"bytes,2,rep,name=stores" json:"stores,omitempty"`
}

func (m *KvnodeStatus) Reset()      { *m = KvnodeStatus{} }
func (*KvnodeStatus) ProtoMessage() {}
func (*KvnodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{57}
}
func (m *KvnodeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeStatus.Merge(m, src)
}
func (m *KvnodeStatus) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeStatus proto.InternalMessageInfo

func (m *KvnodeStatus) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *KvnodeStatus) GetStores() []*KvnodeStoreStatus {
	if m != nil {
		return m.Stores
	}
	return nil
}

type SetStatus struct {
	SetID     int32           `protobuf:"varint,1,opt,name=setID" json:"setID"`
	MarkClear bool            `protobuf:"varint,2,opt,name=markClear" json:"markClear"`
	Stores    []*StoreStatus  `protobuf:"bytes,3,rep,name=stores" json:"stores,omitempty"`
	Nodes     []*KvnodeStatus `protobuf:"bytes,4,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *SetStatus) Reset()      { *m = SetStatus{} }
func (*SetStatus) ProtoMessage() {}
func (*SetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{58}
}
func (m *SetStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStatus.Merge(m, src)
}
func (m *SetStatus) XXX_Size() int {
	return m.Size()
}
func (m *SetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SetStatus proto.InternalMessageInfo

func (m *SetStatus) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *SetStatus) GetMarkClear() bool {
	if m != nil {
		return m.MarkClear
	}
	return false
}

func (m *SetStatus) GetStores() []*StoreStatus {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *SetStatus) GetNodes() []*KvnodeStatus {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type GetSetStatusResp struct {
	Sets []*SetStatus `protobuf:"bytes,1,rep,name=sets" json:"sets,omitempty"`
}

func (m *GetSetStatusResp) Reset()      { *m = GetSetStatusResp{} }
func (*GetSetStatusResp) ProtoMessage() {}
func (*GetSetStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{59}
}
func (m *GetSetStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSetStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSetStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSetStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSetStatusResp.Merge(m, src)
}
func (m *GetSetStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *GetSetStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSetStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSetStatusResp proto.InternalMessageInfo

func (m *GetSetStatusResp) GetSets() []*SetStatus {
	if m != nil {
		return m.Sets
	}
	return nil
}

type StoreReportStatus struct {
	SetID    int32  `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID   int32  `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
	StoreID  int32  `protobuf:"varint,3,opt,name=storeID" json:"storeID"`
	Isleader bool   `protobuf:"varint,4,opt,name=isleader" json:"isleader"`
	Kvcount  int32  `protobuf:"varint,5,opt,name=kvcount" json:"kvcount"`
	Progress uint64 `protobuf:"varint,6,opt,name=progress" json:"progress"`
}

func (m *StoreReportStatus) Reset()      { *m = StoreReportStatus{} }
func (*StoreReportStatus) ProtoMessage() {}
func (*StoreReportStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{60}
}
func (m *StoreReportStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreReportStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreReportStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreReportStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreReportStatus.Merge(m, src)
}
func (m *StoreReportStatus) XXX_Size() int {
	return m.Size()
}
func (m *StoreReportStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreReportStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StoreReportStatus proto.InternalMessageInfo

func (m *StoreReportStatus) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *StoreReportStatus) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *StoreReportStatus) GetStoreID() int32 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

func (m *StoreReportStatus) GetIsleader() bool {
	if m != nil {
		return m.Isleader
	}
	return false
}

func (m *StoreReportStatus) GetKvcount() int32 {
	if m != nil {
		return m.Kvcount
	}
	return 0
}

func (m *StoreReportStatus) GetProgress() uint64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

type TrasnferLeader struct {
	StoreID    int32  `protobuf:"varint,1,opt,name=storeID" json:"storeID"`
	Transferee uint64 `protobuf:"varint,2,opt,name=transferee" json:"transferee"`
}

func (m *TrasnferLeader) Reset()      { *m = TrasnferLeader{} }
func (*TrasnferLeader) ProtoMessage() {}
func (*TrasnferLeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{61}
}
func (m *TrasnferLeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrasnferLeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrasnferLeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrasnferLeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrasnferLeader.Merge(m, src)
}
func (m *TrasnferLeader) XXX_Size() int {
	return m.Size()
}
func (m *TrasnferLeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TrasnferLeader.DiscardUnknown(m)
}

var xxx_messageInfo_TrasnferLeader proto.InternalMessageInfo

func (m *TrasnferLeader) GetStoreID() int32 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

func (m *TrasnferLeader) GetTransferee() uint64 {
	if m != nil {
		return m.Transferee
	}
	return 0
}

type GetSlotStore struct {
	Slot int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
}

func (m *GetSlotStore) Reset()      { *m = GetSlotStore{} }
func (*GetSlotStore) ProtoMessage() {}
func (*GetSlotStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{62}
}
func (m *GetSlotStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSlotStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSlotStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSlotStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSlotStore.Merge(m, src)
}
func (m *GetSlotStore) XXX_Size() int {
	return m.Size()
}
func (m *GetSlotStore) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSlotStore.DiscardUnknown(m)
}

var xxx_messageInfo_GetSlotStore proto.InternalMessageInfo

func (m *GetSlotStore) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type GetSlotStoreResp struct {
	Store   int32  `protobuf:"varint,1,opt,name=store" json:"store"`
	Service string `protobuf:"bytes,2,opt,name=service" json:"service"`
}

func (m *GetSlotStoreResp) Reset()      { *m = GetSlotStoreResp{} }
func (*GetSlotStoreResp) ProtoMessage() {}
func (*GetSlotStoreResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{63}
}
func (m *GetSlotStoreResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSlotStoreResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSlotStoreResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSlotStoreResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSlotStoreResp.Merge(m, src)
}
func (m *GetSlotStoreResp) XXX_Size() int {
	return m.Size()
}
func (m *GetSlotStoreResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSlotStoreResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSlotStoreResp proto.InternalMessageInfo

func (m *GetSlotStoreResp) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *GetSlotStoreResp) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.ServerCmdType", ServerCmdType_name, ServerCmdType_value)
	proto.RegisterEnum("proto.StoreOpType", StoreOpType_name, StoreOpType_value)
	proto.RegisterType((*QueryRouteInfo)(nil), "proto.queryRouteInfo")
	proto.RegisterType((*RouteInfoKvNode)(nil), "proto.routeInfoKvNode")
	proto.RegisterType((*RouteInfoSet)(nil), "proto.routeInfoSet")
	proto.RegisterType((*QueryRouteInfoResp)(nil), "proto.queryRouteInfoResp")
	proto.RegisterType((*QueryLeader)(nil), "proto.query_leader")
	proto.RegisterType((*QueryLeaderResp)(nil), "proto.query_leader_resp")
	proto.RegisterType((*DeploymentKvnode)(nil), "proto.deploymentKvnode")
	proto.RegisterType((*DeploymentSet)(nil), "proto.deploymentSet")
	proto.RegisterType((*InstallDeployment)(nil), "proto.installDeployment")
	proto.RegisterType((*InstallDeploymentResp)(nil), "proto.installDeploymentResp")
	proto.RegisterType((*AddNode)(nil), "proto.addNode")
	proto.RegisterType((*AddNodeResp)(nil), "proto.addNodeResp")
	proto.RegisterType((*AddLearnerStoreToNode)(nil), "proto.addLearnerStoreToNode")
	proto.RegisterType((*AddLearnerStoreToNodeResp)(nil), "proto.addLearnerStoreToNodeResp")
	proto.RegisterType((*PromoteLearnerStore)(nil), "proto.promoteLearnerStore")
	proto.RegisterType((*PromoteLearnerStoreResp)(nil), "proto.promoteLearnerStoreResp")
	proto.RegisterType((*RemoveNodeStore)(nil), "proto.removeNodeStore")
	proto.RegisterType((*RemoveNodeStoreResp)(nil), "proto.removeNodeStoreResp")
	proto.RegisterType((*RemNode)(nil), "proto.remNode")
	proto.RegisterType((*RemNodeResp)(nil), "proto.remNodeResp")
	proto.RegisterType((*KvnodeBoot)(nil), "proto.kvnodeBoot")
	proto.RegisterType((*StoreInfo)(nil), "proto.storeInfo")
	proto.RegisterType((*KvnodeBootResp)(nil), "proto.kvnodeBootResp")
	proto.RegisterType((*NotifyNodeStoreOp)(nil), "proto.notifyNodeStoreOp")
	proto.RegisterType((*NodeStoreOpOk)(nil), "proto.nodeStoreOpOk")
	proto.RegisterType((*IsTransInReady)(nil), "proto.isTransInReady")
	proto.RegisterType((*IsTransInReadyResp)(nil), "proto.isTransInReadyResp")
	proto.RegisterType((*NotifySlotTransOut)(nil), "proto.notifySlotTransOut")
	proto.RegisterType((*SlotTransOutOk)(nil), "proto.slotTransOutOk")
	proto.RegisterType((*NotifySlotTransIn)(nil), "proto.notifySlotTransIn")
	proto.RegisterType((*SlotTransInOk)(nil), "proto.slotTransInOk")
	proto.RegisterType((*AddSet)(nil), "proto.addSet")
	proto.RegisterType((*AddSetResp)(nil), "proto.addSetResp")
	proto.RegisterType((*RemSet)(nil), "proto.remSet")
	proto.RegisterType((*RemSetResp)(nil), "proto.remSetResp")
	proto.RegisterType((*SetMarkClear)(nil), "proto.setMarkClear")
	proto.RegisterType((*SetMarkClearResp)(nil), "proto.setMarkClearResp")
	proto.RegisterType((*Flygate)(nil), "proto.flygate")
	proto.RegisterType((*GetFlyGateList)(nil), "proto.getFlyGateList")
	proto.RegisterType((*GetFlyGateListResp)(nil), "proto.getFlyGateListResp")
	proto.RegisterType((*FlyGateHeartBeat)(nil), "proto.flyGateHeartBeat")
	proto.RegisterType((*ChangeFlyGate)(nil), "proto.changeFlyGate")
	proto.RegisterType((*ChangeFlyGateResp)(nil), "proto.changeFlyGateResp")
	proto.RegisterType((*SetMeta)(nil), "proto.setMeta")
	proto.RegisterType((*SetMetaResp)(nil), "proto.setMetaResp")
	proto.RegisterType((*MetaFiled)(nil), "proto.metaFiled")
	proto.RegisterType((*MetaTable)(nil), "proto.metaTable")
	proto.RegisterType((*UpdateMeta)(nil), "proto.updateMeta")
	proto.RegisterType((*UpdateMetaResp)(nil), "proto.updateMetaResp")
	proto.RegisterType((*GetMeta)(nil), "proto.getMeta")
	proto.RegisterType((*GetMetaResp)(nil), "proto.getMetaResp")
	proto.RegisterType((*NotifyUpdateMeta)(nil), "proto.notifyUpdateMeta")
	proto.RegisterType((*StoreUpdateMetaOk)(nil), "proto.storeUpdateMetaOk")
	proto.RegisterType((*PacketTest)(nil), "proto.packetTest")
	proto.RegisterType((*GetSetStatus)(nil), "proto.getSetStatus")
	proto.RegisterType((*StoreStatus)(nil), "proto.storeStatus")
	proto.RegisterType((*KvnodeStoreStatus)(nil), "proto.kvnodeStoreStatus")
	proto.RegisterType((*KvnodeStatus)(nil), "proto.kvnodeStatus")
	proto.RegisterType((*SetStatus)(nil), "proto.setStatus")
	proto.RegisterType((*GetSetStatusResp)(nil), "proto.getSetStatusResp")
	proto.RegisterType((*StoreReportStatus)(nil), "proto.storeReportStatus")
	proto.RegisterType((*TrasnferLeader)(nil), "proto.trasnferLeader")
	proto.RegisterType((*GetSlotStore)(nil), "proto.getSlotStore")
	proto.RegisterType((*GetSlotStoreResp)(nil), "proto.getSlotStoreResp")
}

func init() { proto.RegisterFile("flyfish_server.proto", fileDescriptor_03085fc3fc38bb42) }

var fileDescriptor_03085fc3fc38bb42 = []byte{
	// 2005 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x73, 0x1b, 0x49,
	0x15, 0xf7, 0xcc, 0x48, 0x56, 0xfc, 0x64, 0xcb, 0xed, 0xb6, 0x1d, 0x2b, 0x61, 0x11, 0xae, 0xa9,
	0x54, 0xd0, 0xba, 0x60, 0x09, 0x7b, 0xca, 0x85, 0x2a, 0x6c, 0xa7, 0xac, 0x15, 0xce, 0xda, 0xce,
	0x8c, 0x77, 0x8b, 0xe2, 0x40, 0x6a, 0xf0, 0xb4, 0x64, 0xa1, 0xd1, 0x8c, 0x32, 0xd3, 0x12, 0x08,
	0x58, 0x8a, 0x33, 0x5c, 0x38, 0x70, 0xe2, 0x6b, 0xab, 0xb8, 0xc0, 0x5f, 0xc0, 0xc7, 0x85, 0x73,
	0x8e, 0xe1, 0x7b, 0x8b, 0x8f, 0x65, 0xed, 0x5c, 0xf6, 0xb8, 0x7f, 0xc2, 0x56, 0x77, 0xcf, 0x47,
	0xf7, 0x8c, 0x22, 0x27, 0x4a, 0xe5, 0x64, 0xcf, 0x7b, 0xad, 0xf7, 0x7e, 0xef, 0xa3, 0xdf, 0x7b,
	0xfd, 0x60, 0xa3, 0xe3, 0x4d, 0x3a, 0xbd, 0xe8, 0xfc, 0x61, 0x44, 0xc2, 0x31, 0x09, 0xdf, 0x18,
	0x86, 0x01, 0x0d, 0x70, 0x99, 0xff, 0xb9, 0xb9, 0xd1, 0x0d, 0xba, 0x01, 0xff, 0xf7, 0x4b, 0xec,
	0x3f, 0xc1, 0x34, 0xef, 0x41, 0xed, 0xd1, 0x88, 0x84, 0x13, 0x2b, 0x18, 0x51, 0xd2, 0xf6, 0x3b,
	0x01, 0x6e, 0x40, 0x65, 0x4c, 0xc2, 0xa8, 0x17, 0xf8, 0x75, 0x6d, 0x5b, 0x6b, 0x1a, 0x7b, 0xa5,
	0xc7, 0x1f, 0x7e, 0x6e, 0xc1, 0x4a, 0x88, 0x18, 0x43, 0x29, 0x22, 0x34, 0xaa, 0xeb, 0xdb, 0x46,
	0xb3, 0x6c, 0xf1, 0xff, 0xcd, 0x47, 0xb0, 0x1a, 0x26, 0x02, 0x0e, 0xc7, 0x47, 0x81, 0x4b, 0xf0,
	0x6b, 0xb0, 0xe8, 0x07, 0x2e, 0x69, 0xdf, 0xe3, 0x52, 0xca, 0xb1, 0x94, 0x98, 0x86, 0xeb, 0x50,
	0x3a, 0x0f, 0x22, 0x5a, 0xd7, 0xb7, 0xb5, 0xe6, 0x52, 0xcc, 0xe3, 0x14, 0x7c, 0x1b, 0xaa, 0x0c,
	0x7d, 0xef, 0x8c, 0x9c, 0x04, 0x21, 0xad, 0x1b, 0xd2, 0x8f, 0x65, 0x86, 0xf9, 0x63, 0x0d, 0x96,
	0x53, 0x9d, 0x36, 0xa1, 0xf8, 0x26, 0x94, 0x23, 0x42, 0x73, 0xfa, 0x04, 0x09, 0x5f, 0x87, 0xc5,
	0x88, 0x06, 0x21, 0x49, 0x50, 0xc7, 0x5f, 0x78, 0x03, 0xca, 0x91, 0x17, 0xd0, 0xa8, 0x6e, 0x6c,
	0x1b, 0xcd, 0x65, 0x4b, 0x7c, 0xe0, 0x3b, 0x50, 0xe9, 0x8f, 0x19, 0xd0, 0xa8, 0x5e, 0xda, 0x36,
	0x9a, 0xd5, 0x37, 0xaf, 0x0b, 0x67, 0xbd, 0x91, 0xb3, 0xd1, 0x4a, 0x8e, 0x99, 0xef, 0x01, 0x56,
	0xbd, 0x68, 0x91, 0x68, 0x88, 0x3f, 0x1f, 0x7b, 0x4a, 0xe3, 0x42, 0xd6, 0xf3, 0x42, 0x6c, 0x42,
	0x85, 0xfb, 0x70, 0x03, 0x20, 0x24, 0x83, 0x60, 0x4c, 0xec, 0xcc, 0xb1, 0x12, 0x45, 0x0e, 0x89,
	0x31, 0x25, 0x24, 0xe6, 0x0e, 0x2c, 0x73, 0xf5, 0x0f, 0x3d, 0xe2, 0xb8, 0x24, 0xe4, 0xae, 0x60,
	0x06, 0xe6, 0x5c, 0xc1, 0x48, 0xe6, 0x97, 0x61, 0x4d, 0x3e, 0xfb, 0x30, 0x64, 0x48, 0x5f, 0x83,
	0x45, 0xf1, 0xa9, 0x06, 0x4b, 0xd0, 0xcc, 0x9f, 0x69, 0x80, 0x5c, 0x32, 0xf4, 0x82, 0xc9, 0x80,
	0xf8, 0xf4, 0x90, 0xdb, 0xfc, 0xaa, 0xe3, 0x8b, 0xb7, 0xe1, 0x5a, 0xe8, 0x74, 0x28, 0x3f, 0x54,
	0x92, 0x0e, 0xa5, 0x54, 0xf3, 0x1b, 0xb0, 0x92, 0xa1, 0xba, 0x2a, 0x03, 0xbe, 0x08, 0x65, 0x11,
	0x51, 0x9d, 0x07, 0x63, 0x2b, 0x0e, 0x46, 0xde, 0x2c, 0x4b, 0x9c, 0x32, 0xbf, 0x02, 0x6b, 0x3d,
	0x3f, 0xa2, 0x8e, 0xe7, 0xdd, 0x4b, 0x4f, 0xe0, 0xa6, 0x12, 0xcf, 0x8d, 0x82, 0x88, 0x34, 0xa0,
	0xe6, 0x21, 0x6c, 0x16, 0x7e, 0xce, 0x53, 0x62, 0x03, 0xf4, 0xa0, 0xcf, 0xf1, 0x5d, 0x8b, 0xf1,
	0xe9, 0x41, 0x9f, 0xf9, 0x32, 0x24, 0x4e, 0x14, 0xf8, 0x8a, 0xbf, 0x62, 0x9a, 0xf9, 0x5b, 0x0d,
	0x2a, 0x8e, 0xeb, 0xf2, 0x5b, 0x35, 0xcb, 0xc4, 0x2c, 0x22, 0xfa, 0x8c, 0x88, 0x18, 0x57, 0x45,
	0xa4, 0xf4, 0x3c, 0x11, 0x29, 0x4f, 0x8d, 0xc8, 0x2e, 0x54, 0x63, 0xa0, 0x73, 0x1b, 0x3b, 0x80,
	0x4d, 0xc7, 0x75, 0xef, 0x13, 0x27, 0xf4, 0x49, 0x68, 0xb3, 0x8c, 0x3d, 0x0d, 0x5e, 0xd2, 0xf2,
	0xf4, 0x36, 0x18, 0xc5, 0xdb, 0x70, 0x0c, 0x37, 0xa6, 0xaa, 0x9b, 0x1b, 0x7f, 0x1f, 0xd6, 0x87,
	0x61, 0x30, 0x08, 0x28, 0x91, 0x85, 0xbe, 0x22, 0xf4, 0x6f, 0xc3, 0xd6, 0x14, 0x65, 0x73, 0x63,
	0xef, 0xc2, 0xaa, 0x28, 0x3a, 0xcc, 0x03, 0xaf, 0x12, 0x77, 0x1b, 0xd6, 0x73, 0x8a, 0xe6, 0xc6,
	0xbc, 0x0f, 0x95, 0x90, 0x0c, 0x5e, 0x2e, 0x43, 0x58, 0xde, 0xc6, 0x42, 0xe6, 0xc6, 0xb1, 0x03,
	0x20, 0x9a, 0xc1, 0x5e, 0x10, 0xd0, 0xd9, 0xc5, 0xd1, 0x24, 0xb0, 0xc4, 0xfd, 0xc0, 0xdb, 0xed,
	0x06, 0xe8, 0x3d, 0x57, 0x39, 0xa6, 0xf7, 0x5c, 0x76, 0x27, 0xd9, 0xad, 0xda, 0xf7, 0x46, 0x11,
	0x25, 0xa1, 0xa2, 0x51, 0x66, 0x70, 0x9b, 0xe3, 0x06, 0xa6, 0x35, 0x97, 0x53, 0x9b, 0x19, 0xc9,
	0xfc, 0xb3, 0x0e, 0xb5, 0x0c, 0xd3, 0xbc, 0x96, 0x65, 0x6e, 0x35, 0x8a, 0x6e, 0xcd, 0x4a, 0xc7,
	0x5b, 0xac, 0xb6, 0x94, 0x64, 0x98, 0x12, 0x23, 0x5f, 0x62, 0xca, 0xcf, 0x53, 0x62, 0x16, 0xa7,
	0x95, 0x18, 0xdc, 0x4c, 0x3b, 0x79, 0x85, 0x57, 0x61, 0x14, 0x57, 0xe1, 0xd4, 0xa1, 0x69, 0x6f,
	0xbf, 0x0d, 0xd5, 0x01, 0xa1, 0xce, 0xbb, 0x71, 0xe3, 0xbc, 0x26, 0x35, 0x4e, 0x99, 0xc1, 0x0a,
	0x23, 0xfb, 0xac, 0x2f, 0x49, 0x1e, 0xe4, 0x14, 0xf3, 0x7d, 0x0d, 0xd6, 0xfc, 0x80, 0xf6, 0x3a,
	0x93, 0x34, 0x4f, 0x8f, 0x85, 0x0f, 0x87, 0x6a, 0xc0, 0x82, 0xe1, 0xdc, 0xc5, 0xf7, 0xca, 0x36,
	0x97, 0x5d, 0xa4, 0x72, 0xf1, 0x22, 0xad, 0xc2, 0x8a, 0x9f, 0x41, 0x3b, 0xee, 0x9b, 0x07, 0x50,
	0xeb, 0x45, 0xa7, 0xa1, 0xe3, 0x47, 0x6d, 0xdf, 0x22, 0x8e, 0x3b, 0x99, 0x35, 0x0b, 0x30, 0x58,
	0x2c, 0x55, 0x14, 0xc8, 0x9c, 0x62, 0x7e, 0x0d, 0xb0, 0x2a, 0x87, 0xa7, 0xcf, 0x4d, 0x28, 0x87,
	0xec, 0x43, 0xc9, 0x20, 0x41, 0x9a, 0x2d, 0x4b, 0x78, 0xd1, 0xf6, 0x02, 0xca, 0x65, 0x1e, 0x8f,
	0x68, 0x7a, 0x5e, 0xcb, 0x9f, 0xcf, 0x10, 0xeb, 0x45, 0x83, 0x77, 0xa0, 0x16, 0x49, 0x52, 0x8e,
	0xfb, 0xcf, 0x96, 0x63, 0xb6, 0x93, 0xe8, 0xa5, 0x7a, 0xdb, 0xfe, 0x9c, 0x6a, 0x5f, 0x87, 0x95,
	0x28, 0x13, 0x32, 0x53, 0xeb, 0x1d, 0x58, 0x74, 0x5c, 0x97, 0x8d, 0x23, 0xb7, 0xc1, 0x88, 0x88,
	0x38, 0xf2, 0xac, 0x69, 0x81, 0x1d, 0x30, 0xbf, 0x0a, 0x20, 0x7e, 0x31, 0x77, 0xf1, 0xb9, 0xc5,
	0xb8, 0x83, 0x2b, 0x46, 0x20, 0xa6, 0x47, 0x9c, 0x7a, 0x89, 0x22, 0xb7, 0x1c, 0x11, 0xfa, 0xb6,
	0x13, 0xf6, 0xf7, 0x3d, 0xe2, 0x84, 0x33, 0xb5, 0x1d, 0x00, 0x92, 0xcf, 0xce, 0xad, 0xd3, 0x86,
	0x4a, 0xc7, 0x9b, 0x74, 0x1d, 0x4a, 0xd8, 0x18, 0x1c, 0x17, 0x0b, 0x2e, 0x23, 0x39, 0x99, 0x10,
	0x71, 0x13, 0x96, 0x07, 0x51, 0xf7, 0x84, 0x84, 0x36, 0x39, 0x0b, 0x7c, 0x57, 0x09, 0xa4, 0xc2,
	0x31, 0x11, 0xd4, 0xba, 0x84, 0x1e, 0x78, 0x93, 0x96, 0x43, 0xc9, 0xfd, 0x5e, 0x44, 0xcd, 0xbb,
	0x80, 0x55, 0x0a, 0x07, 0x6c, 0x42, 0xc9, 0xeb, 0x45, 0x34, 0x9e, 0xf8, 0x6a, 0x71, 0x0c, 0x63,
	0x3c, 0x16, 0xe7, 0x99, 0x2e, 0xa0, 0x8e, 0xf8, 0xd9, 0x5b, 0xc4, 0x09, 0xe9, 0x1e, 0x71, 0x78,
	0xbd, 0x63, 0x27, 0xec, 0x29, 0x68, 0x65, 0xc6, 0x0b, 0x20, 0xee, 0xc1, 0xca, 0xd9, 0xb9, 0xe3,
	0x77, 0x49, 0x0c, 0x91, 0xa9, 0x38, 0x1b, 0x85, 0x21, 0xf1, 0x29, 0xfb, 0x54, 0x55, 0x48, 0x0c,
	0x7c, 0x07, 0xd0, 0x20, 0xea, 0xda, 0xc4, 0x77, 0xa7, 0xab, 0x29, 0x70, 0xd9, 0xbd, 0x51, 0x54,
	0xcd, 0x08, 0x9d, 0x14, 0x11, 0x7d, 0x4a, 0x44, 0x58, 0x77, 0x66, 0x49, 0x40, 0xa8, 0x93, 0x96,
	0x59, 0x2d, 0x5f, 0x66, 0xe5, 0xd7, 0x8d, 0x3e, 0xed, 0x75, 0xb3, 0xcb, 0x9a, 0x07, 0x17, 0x32,
	0x77, 0x12, 0x3d, 0x84, 0x25, 0xa6, 0xea, 0xa0, 0xe7, 0x11, 0x97, 0x21, 0xf1, 0x9d, 0x81, 0xea,
	0x32, 0x4e, 0x61, 0x1c, 0x3a, 0x19, 0xaa, 0xb6, 0x70, 0x0a, 0xc3, 0xe8, 0x92, 0x8e, 0x33, 0xf2,
	0xd4, 0x1a, 0x9e, 0x10, 0xcd, 0x63, 0xa1, 0xe0, 0xd4, 0xf9, 0x96, 0x47, 0x66, 0x28, 0x68, 0xc2,
	0x62, 0xa7, 0x47, 0x3c, 0x37, 0x79, 0x86, 0x24, 0xdd, 0x2b, 0x05, 0x67, 0xc5, 0x7c, 0xf3, 0xeb,
	0x00, 0xa3, 0xa1, 0xeb, 0x50, 0xc2, 0x9d, 0xb7, 0x03, 0x15, 0xf1, 0x95, 0x3c, 0x3e, 0xe4, 0x1f,
	0x72, 0xa5, 0x56, 0x72, 0xe0, 0x4a, 0x77, 0xde, 0x83, 0x5a, 0x26, 0x79, 0x6e, 0x8f, 0x2e, 0x41,
	0xa5, 0x2b, 0x82, 0x62, 0xb6, 0xa0, 0xda, 0x95, 0xe2, 0x73, 0xd5, 0xfe, 0x20, 0x49, 0x04, 0xbd,
	0xd0, 0x6f, 0xcf, 0x01, 0x89, 0x82, 0xfd, 0x4e, 0x66, 0xf9, 0xac, 0xf6, 0x75, 0x85, 0xa5, 0xa9,
	0x26, 0xa3, 0xa0, 0xe9, 0x18, 0xd6, 0xb8, 0x88, 0x4c, 0xd1, 0x71, 0xff, 0x65, 0x54, 0x99, 0x5f,
	0x00, 0x18, 0x3a, 0x67, 0x7d, 0x42, 0x4f, 0x49, 0x44, 0xd9, 0xe9, 0x01, 0x89, 0x22, 0xa7, 0x9b,
	0x2b, 0x54, 0x31, 0xd1, 0xac, 0xc1, 0x72, 0x97, 0xb0, 0x06, 0x60, 0x53, 0x87, 0x8e, 0x22, 0xb3,
	0x0d, 0x55, 0xae, 0x46, 0x7c, 0xf2, 0x5b, 0xc5, 0xc7, 0x19, 0xb5, 0xb0, 0x26, 0xc4, 0x6c, 0xe8,
	0xd3, 0x8b, 0x43, 0xdf, 0x4f, 0x34, 0x58, 0x13, 0x43, 0x9f, 0xfd, 0x02, 0x12, 0xe5, 0xc4, 0x2f,
	0x2b, 0x89, 0x7f, 0x13, 0xca, 0x63, 0xc7, 0x1b, 0xe5, 0xc6, 0x78, 0x4e, 0x62, 0xb3, 0x4b, 0x2f,
	0xba, 0x2f, 0xf6, 0x06, 0x25, 0x29, 0x7b, 0x52, 0xaa, 0xf9, 0x4d, 0x58, 0x4e, 0xc0, 0x70, 0x1c,
	0xb3, 0x97, 0x06, 0x77, 0x94, 0x2d, 0x4d, 0xf5, 0xcd, 0x7a, 0x9c, 0xe4, 0x05, 0x7b, 0x92, 0x19,
	0xcf, 0xfc, 0x8d, 0x06, 0x4b, 0x51, 0xe2, 0xc6, 0x99, 0x0f, 0x00, 0x13, 0x96, 0x06, 0x49, 0x2f,
	0xe2, 0x66, 0x26, 0x60, 0x33, 0x32, 0xde, 0x49, 0xf5, 0x1b, 0x5c, 0x3f, 0x96, 0x67, 0x4b, 0x55,
	0x33, 0x7e, 0x3d, 0xd9, 0x27, 0x94, 0x94, 0xe5, 0x8e, 0x6c, 0x6d, 0xb2, 0x4b, 0xb8, 0x0b, 0x48,
	0x8e, 0x36, 0xbf, 0x24, 0xb7, 0x94, 0x55, 0x42, 0x3a, 0xc4, 0xa6, 0x67, 0xc4, 0x1a, 0xe1, 0x2f,
	0x5a, 0x9c, 0xa7, 0x16, 0x19, 0x06, 0xe1, 0xf3, 0x98, 0x39, 0x7b, 0x0c, 0x95, 0xd2, 0xc0, 0x98,
	0x96, 0x06, 0x3c, 0xa0, 0xde, 0xd4, 0x80, 0xc6, 0x9b, 0xa5, 0x06, 0x54, 0xfa, 0xe3, 0xb3, 0x60,
	0xe4, 0xab, 0x43, 0x7c, 0x42, 0x64, 0x12, 0x86, 0x61, 0xd0, 0x0d, 0x49, 0x14, 0xf1, 0x01, 0xbe,
	0x94, 0x48, 0x48, 0xa8, 0xe6, 0xbb, 0x50, 0xa3, 0xa1, 0x13, 0xf9, 0x1d, 0x12, 0xde, 0x4f, 0x65,
	0xce, 0x4c, 0xce, 0x5b, 0x00, 0x94, 0x0d, 0x5e, 0x1d, 0x12, 0x12, 0x91, 0xa2, 0x89, 0x54, 0x89,
	0x6e, 0x36, 0xc5, 0x9d, 0xf2, 0x02, 0x6a, 0x2b, 0xb3, 0x6d, 0x71, 0x42, 0x3b, 0x12, 0xf1, 0x48,
	0x4e, 0x26, 0x93, 0xed, 0xac, 0xbb, 0x3f, 0xab, 0xc9, 0xed, 0xfc, 0xe9, 0x1a, 0xac, 0xd8, 0x7c,
	0xe1, 0xba, 0x3f, 0x70, 0x4f, 0xd9, 0xa5, 0x59, 0x85, 0xea, 0x83, 0x11, 0x09, 0x27, 0xc2, 0x40,
	0xa4, 0xe1, 0x75, 0x58, 0x95, 0x08, 0x4c, 0x23, 0xd2, 0xf1, 0x26, 0xac, 0xb5, 0xf3, 0x4b, 0x22,
	0x44, 0xf0, 0x0d, 0xd8, 0x6c, 0x4f, 0xdb, 0x1d, 0xa1, 0x0e, 0xae, 0x42, 0x65, 0x57, 0xec, 0x57,
	0x50, 0x97, 0x29, 0xd9, 0xcd, 0x96, 0x2d, 0xe8, 0x9c, 0xfd, 0x70, 0x77, 0xda, 0x2e, 0x03, 0xf5,
	0xf0, 0x67, 0xe1, 0xc6, 0xee, 0xb3, 0xd6, 0x1c, 0xe8, 0xdb, 0x78, 0x0b, 0xd6, 0x4f, 0x8a, 0x7b,
	0x04, 0xd4, 0xc7, 0x9f, 0x81, 0xad, 0x93, 0xe9, 0x0b, 0x06, 0xe4, 0x31, 0xa3, 0x2c, 0xf5, 0x15,
	0x8f, 0x06, 0x4c, 0x94, 0x55, 0x7c, 0xda, 0x23, 0x9f, 0x61, 0xb7, 0xc4, 0x1b, 0x1b, 0x05, 0x0c,
	0xbb, 0x95, 0x3d, 0xb8, 0xd1, 0x10, 0x03, 0x2c, 0xee, 0xf2, 0x19, 0x18, 0x3d, 0xc2, 0x35, 0x80,
	0xdd, 0x74, 0x1e, 0x46, 0x21, 0xe3, 0x59, 0x7c, 0x6e, 0x45, 0x11, 0xe3, 0x59, 0xe9, 0x0c, 0x8b,
	0x28, 0x46, 0xb0, 0x6c, 0x4b, 0x53, 0x26, 0x1a, 0xe1, 0x0d, 0x40, 0x76, 0x6e, 0xee, 0x44, 0x63,
	0xa6, 0xdd, 0x16, 0x3d, 0x0a, 0x7d, 0x87, 0x69, 0xb7, 0xb3, 0x86, 0x85, 0xbe, 0xcb, 0xb8, 0xad,
	0x98, 0x3b, 0x61, 0xdc, 0x96, 0xc4, 0xfd, 0x1e, 0xd3, 0x99, 0xf5, 0x09, 0xf4, 0x7d, 0x8c, 0xa1,
	0xf6, 0x8e, 0xd2, 0x40, 0xd1, 0x0f, 0x18, 0x8e, 0x96, 0x74, 0xc7, 0xd1, 0x7b, 0x0c, 0x47, 0x2b,
	0x77, 0xeb, 0xd1, 0x0f, 0xf1, 0x2a, 0xc0, 0x61, 0xfa, 0x24, 0x47, 0x7f, 0x65, 0x99, 0x51, 0x3b,
	0x54, 0xde, 0xe8, 0xe8, 0x6f, 0x1a, 0xbe, 0x0e, 0x6b, 0x47, 0xf9, 0x77, 0x27, 0xfa, 0xbb, 0x86,
	0x31, 0xac, 0x1c, 0xc9, 0xcf, 0x3d, 0xf4, 0x0f, 0x2e, 0xa0, 0xad, 0xbc, 0xd4, 0xd0, 0x3f, 0x35,
	0xbc, 0x05, 0xb8, 0x5d, 0x78, 0xbe, 0xa1, 0x7f, 0x71, 0xc6, 0x51, 0xe1, 0x2d, 0x86, 0xfe, 0xcd,
	0xc5, 0xd8, 0xca, 0xc3, 0x0a, 0xfd, 0x47, 0xc2, 0x21, 0xbd, 0xa0, 0xd0, 0x7f, 0x39, 0x0e, 0x5b,
	0x7e, 0x0e, 0xa1, 0xff, 0x69, 0x78, 0x13, 0xd0, 0x51, 0xae, 0x79, 0xa3, 0x0f, 0xb9, 0x08, 0x3b,
	0xdf, 0x69, 0xd1, 0xff, 0x33, 0xba, 0x5c, 0xd9, 0xd0, 0x47, 0x1c, 0xc7, 0xa9, 0x52, 0x1e, 0xd0,
	0x05, 0x27, 0x3e, 0x50, 0xd6, 0xeb, 0xe8, 0xf7, 0x3a, 0x33, 0xe5, 0x41, 0x61, 0xe7, 0x8e, 0xfe,
	0xc0, 0xee, 0x15, 0x3a, 0xc8, 0x0d, 0xe4, 0xe8, 0x8f, 0x3a, 0x13, 0xd2, 0x52, 0x26, 0x7c, 0xf4,
	0x73, 0x83, 0x09, 0x69, 0x15, 0xc6, 0x7e, 0xf4, 0x0b, 0x83, 0x99, 0xb8, 0x2f, 0x0f, 0xc1, 0xe8,
	0x97, 0x06, 0xc3, 0xbc, 0x9f, 0x1f, 0x8c, 0xd1, 0xaf, 0x0c, 0xbc, 0x26, 0x82, 0x9f, 0x14, 0x14,
	0xf4, 0x6b, 0x83, 0x61, 0x68, 0xe5, 0x6a, 0x0c, 0x7a, 0xdf, 0x60, 0xe1, 0x3f, 0x49, 0xc7, 0x04,
	0xf4, 0x71, 0x65, 0x67, 0x0f, 0xaa, 0x71, 0x34, 0x79, 0xe1, 0x10, 0xa9, 0x1f, 0xdf, 0x35, 0xc4,
	0x1c, 0x5d, 0x53, 0xef, 0x1f, 0xd2, 0xe3, 0xbb, 0x13, 0x8c, 0xe3, 0x2b, 0x67, 0xec, 0xdd, 0x7d,
	0x7c, 0xd1, 0xd0, 0x9e, 0x5c, 0x34, 0xb4, 0x0f, 0x2e, 0x1a, 0x0b, 0x9f, 0x5c, 0x34, 0xb4, 0x1f,
	0x5d, 0x36, 0xb4, 0xdf, 0x5d, 0x36, 0xb4, 0xc7, 0x97, 0x0d, 0xed, 0xc9, 0x65, 0x43, 0xfb, 0xe8,
	0xb2, 0xa1, 0x7d, 0x7c, 0xd9, 0x58, 0xf8, 0xe4, 0xb2, 0xa1, 0xfd, 0xf4, 0x69, 0x63, 0xe1, 0xc9,
	0xd3, 0xc6, 0xc2, 0x07, 0x4f, 0x1b, 0x0b, 0x9f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xbd, 0x25,
	0x83, 0x30, 0x1a, 0x00, 0x00,
}

func (x ServerCmdType) String() string {
	s, ok := ServerCmdType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StoreOpType) String() string {
	s, ok := StoreOpType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *QueryRouteInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRouteInfo)
	if !ok {
		that2, ok := that.(QueryRouteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.Sets) != len(that1.Sets) {
		return false
	}
	for i := range this.Sets {
		if this.Sets[i] != that1.Sets[i] {
			return false
		}
	}
	return true
}
func (this *RouteInfoKvNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteInfoKvNode)
	if !ok {
		that2, ok := that.(RouteInfoKvNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	return true
}
func (this *RouteInfoSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteInfoSet)
	if !ok {
		that2, ok := that.(RouteInfoSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if this.Stores[i] != that1.Stores[i] {
			return false
		}
	}
	if len(this.Slots) != len(that1.Slots) {
		return false
	}
	for i := range this.Slots {
		if !bytes.Equal(this.Slots[i], that1.Slots[i]) {
			return false
		}
	}
	if len(this.Kvnodes) != len(that1.Kvnodes) {
		return false
	}
	for i := range this.Kvnodes {
		if !this.Kvnodes[i].Equal(that1.Kvnodes[i]) {
			return false
		}
	}
	return true
}
func (this *QueryRouteInfoResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRouteInfoResp)
	if !ok {
		that2, ok := that.(QueryRouteInfoResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sets) != len(that1.Sets) {
		return false
	}
	for i := range this.Sets {
		if !this.Sets[i].Equal(that1.Sets[i]) {
			return false
		}
	}
	if len(this.RemoveSets) != len(that1.RemoveSets) {
		return false
	}
	for i := range this.RemoveSets {
		if this.RemoveSets[i] != that1.RemoveSets[i] {
			return false
		}
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *QueryLeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryLeader)
	if !ok {
		that2, ok := that.(QueryLeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *QueryLeaderResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryLeaderResp)
	if !ok {
		that2, ok := that.(QueryLeaderResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Leader != that1.Leader {
		return false
	}
	return true
}
func (this *DeploymentKvnode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentKvnode)
	if !ok {
		that2, ok := that.(DeploymentKvnode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	return true
}
func (this *DeploymentSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentSet)
	if !ok {
		that2, ok := that.(DeploymentSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *InstallDeployment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallDeployment)
	if !ok {
		that2, ok := that.(InstallDeployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sets) != len(that1.Sets) {
		return false
	}
	for i := range this.Sets {
		if !this.Sets[i].Equal(that1.Sets[i]) {
			return false
		}
	}
	return true
}
func (this *InstallDeploymentResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallDeploymentResp)
	if !ok {
		that2, ok := that.(InstallDeploymentResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *AddNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddNode)
	if !ok {
		that2, ok := that.(AddNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	return true
}
func (this *AddNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddNodeResp)
	if !ok {
		that2, ok := that.(AddNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *AddLearnerStoreToNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddLearnerStoreToNode)
	if !ok {
		that2, ok := that.(AddLearnerStoreToNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *AddLearnerStoreToNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddLearnerStoreToNodeResp)
	if !ok {
		that2, ok := that.(AddLearnerStoreToNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *PromoteLearnerStore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PromoteLearnerStore)
	if !ok {
		that2, ok := that.(PromoteLearnerStore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *PromoteLearnerStoreResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PromoteLearnerStoreResp)
	if !ok {
		that2, ok := that.(PromoteLearnerStoreResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *RemoveNodeStore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveNodeStore)
	if !ok {
		that2, ok := that.(RemoveNodeStore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *RemoveNodeStoreResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveNodeStoreResp)
	if !ok {
		that2, ok := that.(RemoveNodeStoreResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *RemNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemNode)
	if !ok {
		that2, ok := that.(RemNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *RemNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemNodeResp)
	if !ok {
		that2, ok := that.(RemNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *KvnodeBoot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeBoot)
	if !ok {
		that2, ok := that.(KvnodeBoot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *StoreInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreInfo)
	if !ok {
		that2, ok := that.(StoreInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RaftCluster != that1.RaftCluster {
		return false
	}
	if !bytes.Equal(this.Slots, that1.Slots) {
		return false
	}
	return true
}
func (this *KvnodeBootResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeBootResp)
	if !ok {
		that2, ok := that.(KvnodeBootResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.ServiceHost != that1.ServiceHost {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if !this.Stores[i].Equal(that1.Stores[i]) {
			return false
		}
	}
	if this.MetaVersion != that1.MetaVersion {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *NotifyNodeStoreOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyNodeStoreOp)
	if !ok {
		that2, ok := that.(NotifyNodeStoreOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *NodeStoreOpOk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeStoreOpOk)
	if !ok {
		that2, ok := that.(NodeStoreOpOk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *IsTransInReady) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsTransInReady)
	if !ok {
		that2, ok := that.(IsTransInReady)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *IsTransInReadyResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsTransInReadyResp)
	if !ok {
		that2, ok := that.(IsTransInReadyResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *NotifySlotTransOut) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifySlotTransOut)
	if !ok {
		that2, ok := that.(NotifySlotTransOut)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *SlotTransOutOk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlotTransOutOk)
	if !ok {
		that2, ok := that.(SlotTransOutOk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *NotifySlotTransIn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifySlotTransIn)
	if !ok {
		that2, ok := that.(NotifySlotTransIn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *SlotTransInOk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlotTransInOk)
	if !ok {
		that2, ok := that.(SlotTransInOk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *AddSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddSet)
	if !ok {
		that2, ok := that.(AddSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Set.Equal(that1.Set) {
		return false
	}
	return true
}
func (this *AddSetResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddSetResp)
	if !ok {
		that2, ok := that.(AddSetResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *RemSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemSet)
	if !ok {
		that2, ok := that.(RemSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	return true
}
func (this *RemSetResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemSetResp)
	if !ok {
		that2, ok := that.(RemSetResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *SetMarkClear) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMarkClear)
	if !ok {
		that2, ok := that.(SetMarkClear)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	return true
}
func (this *SetMarkClearResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMarkClearResp)
	if !ok {
		that2, ok := that.(SetMarkClearResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *Flygate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Flygate)
	if !ok {
		that2, ok := that.(Flygate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.MsgPerSecond != that1.MsgPerSecond {
		return false
	}
	return true
}
func (this *GetFlyGateList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFlyGateList)
	if !ok {
		that2, ok := that.(GetFlyGateList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetFlyGateListResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFlyGateListResp)
	if !ok {
		that2, ok := that.(GetFlyGateListResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *FlyGateHeartBeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlyGateHeartBeat)
	if !ok {
		that2, ok := that.(FlyGateHeartBeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GateService != that1.GateService {
		return false
	}
	if this.MsgPerSecond != that1.MsgPerSecond {
		return false
	}
	return true
}
func (this *ChangeFlyGate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeFlyGate)
	if !ok {
		that2, ok := that.(ChangeFlyGate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CurrentGate != that1.CurrentGate {
		return false
	}
	if this.MsgSendPerSecond != that1.MsgSendPerSecond {
		return false
	}
	return true
}
func (this *ChangeFlyGateResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeFlyGateResp)
	if !ok {
		that2, ok := that.(ChangeFlyGateResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	return true
}
func (this *SetMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMeta)
	if !ok {
		that2, ok := that.(SetMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *SetMetaResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMetaResp)
	if !ok {
		that2, ok := that.(SetMetaResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *MetaFiled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaFiled)
	if !ok {
		that2, ok := that.(MetaFiled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Default != that1.Default {
		return false
	}
	return true
}
func (this *MetaTable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaTable)
	if !ok {
		that2, ok := that.(MetaTable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMeta)
	if !ok {
		that2, ok := that.(UpdateMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Updates) != len(that1.Updates) {
		return false
	}
	for i := range this.Updates {
		if !this.Updates[i].Equal(that1.Updates[i]) {
			return false
		}
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *UpdateMetaResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMetaResp)
	if !ok {
		that2, ok := that.(UpdateMetaResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *GetMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMeta)
	if !ok {
		that2, ok := that.(GetMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetMetaResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMetaResp)
	if !ok {
		that2, ok := that.(GetMetaResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *NotifyUpdateMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyUpdateMeta)
	if !ok {
		that2, ok := that.(NotifyUpdateMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *StoreUpdateMetaOk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreUpdateMetaOk)
	if !ok {
		that2, ok := that.(StoreUpdateMetaOk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *PacketTest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketTest)
	if !ok {
		that2, ok := that.(PacketTest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *GetSetStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSetStatus)
	if !ok {
		that2, ok := that.(GetSetStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StoreStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreStatus)
	if !ok {
		that2, ok := that.(StoreStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoreID != that1.StoreID {
		return false
	}
	if !bytes.Equal(this.Slots, that1.Slots) {
		return false
	}
	return true
}
func (this *KvnodeStoreStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeStoreStatus)
	if !ok {
		that2, ok := that.(KvnodeStoreStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoreID != that1.StoreID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.IsLeader != that1.IsLeader {
		return false
	}
	return true
}
func (this *KvnodeStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeStatus)
	if !ok {
		that2, ok := that.(KvnodeStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if !this.Stores[i].Equal(that1.Stores[i]) {
			return false
		}
	}
	return true
}
func (this *SetStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetStatus)
	if !ok {
		that2, ok := that.(SetStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.MarkClear != that1.MarkClear {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if !this.Stores[i].Equal(that1.Stores[i]) {
			return false
		}
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *GetSetStatusResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSetStatusResp)
	if !ok {
		that2, ok := that.(GetSetStatusResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sets) != len(that1.Sets) {
		return false
	}
	for i := range this.Sets {
		if !this.Sets[i].Equal(that1.Sets[i]) {
			return false
		}
	}
	return true
}
func (this *StoreReportStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreReportStatus)
	if !ok {
		that2, ok := that.(StoreReportStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.StoreID != that1.StoreID {
		return false
	}
	if this.Isleader != that1.Isleader {
		return false
	}
	if this.Kvcount != that1.Kvcount {
		return false
	}
	if this.Progress != that1.Progress {
		return false
	}
	return true
}
func (this *TrasnferLeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrasnferLeader)
	if !ok {
		that2, ok := that.(TrasnferLeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoreID != that1.StoreID {
		return false
	}
	if this.Transferee != that1.Transferee {
		return false
	}
	return true
}
func (this *GetSlotStore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSlotStore)
	if !ok {
		that2, ok := that.(GetSlotStore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *GetSlotStoreResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSlotStoreResp)
	if !ok {
		that2, ok := that.(GetSlotStoreResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	return true
}
func (this *QueryRouteInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.QueryRouteInfo{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Sets != nil {
		s = append(s, "Sets: "+fmt.Sprintf("%#v", this.Sets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteInfoKvNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.RouteInfoKvNode{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteInfoSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.RouteInfoSet{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	if this.Slots != nil {
		s = append(s, "Slots: "+fmt.Sprintf("%#v", this.Slots)+",\n")
	}
	if this.Kvnodes != nil {
		s = append(s, "Kvnodes: "+fmt.Sprintf("%#v", this.Kvnodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRouteInfoResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.QueryRouteInfoResp{")
	if this.Sets != nil {
		s = append(s, "Sets: "+fmt.Sprintf("%#v", this.Sets)+",\n")
	}
	if this.RemoveSets != nil {
		s = append(s, "RemoveSets: "+fmt.Sprintf("%#v", this.RemoveSets)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryLeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.QueryLeader{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryLeaderResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.QueryLeaderResp{")
	s = append(s, "Leader: "+fmt.Sprintf("%#v", this.Leader)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentKvnode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.DeploymentKvnode{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.DeploymentSet{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InstallDeployment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.InstallDeployment{")
	if this.Sets != nil {
		s = append(s, "Sets: "+fmt.Sprintf("%#v", this.Sets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InstallDeploymentResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.InstallDeploymentResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.AddNode{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.AddNodeResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddLearnerStoreToNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.AddLearnerStoreToNode{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddLearnerStoreToNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.AddLearnerStoreToNodeResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromoteLearnerStore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.PromoteLearnerStore{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromoteLearnerStoreResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.PromoteLearnerStoreResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveNodeStore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.RemoveNodeStore{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveNodeStoreResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemoveNodeStoreResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemNode{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemNodeResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeBoot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.KvnodeBoot{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.StoreInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "RaftCluster: "+fmt.Sprintf("%#v", this.RaftCluster)+",\n")
	s = append(s, "Slots: "+fmt.Sprintf("%#v", this.Slots)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeBootResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&proto.KvnodeBootResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "ServiceHost: "+fmt.Sprintf("%#v", this.ServiceHost)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	s = append(s, "MetaVersion: "+fmt.Sprintf("%#v", this.MetaVersion)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyNodeStoreOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.NotifyNodeStoreOp{")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeStoreOpOk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.NodeStoreOpOk{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsTransInReady) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.IsTransInReady{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsTransInReadyResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.IsTransInReadyResp{")
	s = append(s, "Ready: "+fmt.Sprintf("%#v", this.Ready)+",\n")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifySlotTransOut) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifySlotTransOut{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlotTransOutOk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SlotTransOutOk{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifySlotTransIn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifySlotTransIn{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlotTransInOk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SlotTransInOk{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.AddSet{")
	if this.Set != nil {
		s = append(s, "Set: "+fmt.Sprintf("%#v", this.Set)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddSetResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.AddSetResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.RemSet{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemSetResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemSetResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMarkClear) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SetMarkClear{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMarkClearResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.SetMarkClearResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Flygate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Flygate{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "MsgPerSecond: "+fmt.Sprintf("%#v", this.MsgPerSecond)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFlyGateList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.GetFlyGateList{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFlyGateListResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GetFlyGateListResp{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlyGateHeartBeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.FlyGateHeartBeat{")
	s = append(s, "GateService: "+fmt.Sprintf("%#v", this.GateService)+",\n")
	s = append(s, "MsgPerSecond: "+fmt.Sprintf("%#v", this.MsgPerSecond)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangeFlyGate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ChangeFlyGate{")
	s = append(s, "CurrentGate: "+fmt.Sprintf("%#v", this.CurrentGate)+",\n")
	s = append(s, "MsgSendPerSecond: "+fmt.Sprintf("%#v", this.MsgSendPerSecond)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangeFlyGateResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ChangeFlyGateResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.SetMeta{")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMetaResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.SetMetaResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaFiled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.MetaFiled{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Default: "+fmt.Sprintf("%#v", this.Default)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaTable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.MetaTable{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.UpdateMeta{")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMetaResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.UpdateMetaResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.GetMeta{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMetaResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.GetMetaResp{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyUpdateMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.NotifyUpdateMeta{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreUpdateMetaOk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.StoreUpdateMetaOk{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PacketTest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PacketTest{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSetStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.GetSetStatus{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.StoreStatus{")
	s = append(s, "StoreID: "+fmt.Sprintf("%#v", this.StoreID)+",\n")
	s = append(s, "Slots: "+fmt.Sprintf("%#v", this.Slots)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeStoreStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.KvnodeStoreStatus{")
	s = append(s, "StoreID: "+fmt.Sprintf("%#v", this.StoreID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "IsLeader: "+fmt.Sprintf("%#v", this.IsLeader)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.KvnodeStatus{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.SetStatus{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "MarkClear: "+fmt.Sprintf("%#v", this.MarkClear)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSetStatusResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GetSetStatusResp{")
	if this.Sets != nil {
		s = append(s, "Sets: "+fmt.Sprintf("%#v", this.Sets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreReportStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&proto.StoreReportStatus{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "StoreID: "+fmt.Sprintf("%#v", this.StoreID)+",\n")
	s = append(s, "Isleader: "+fmt.Sprintf("%#v", this.Isleader)+",\n")
	s = append(s, "Kvcount: "+fmt.Sprintf("%#v", this.Kvcount)+",\n")
	s = append(s, "Progress: "+fmt.Sprintf("%#v", this.Progress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrasnferLeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.TrasnferLeader{")
	s = append(s, "StoreID: "+fmt.Sprintf("%#v", this.StoreID)+",\n")
	s = append(s, "Transferee: "+fmt.Sprintf("%#v", this.Transferee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSlotStore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GetSlotStore{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSlotStoreResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.GetSlotStoreResp{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlyfishServer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueryRouteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRouteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRouteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Sets[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RouteInfoKvNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteInfoKvNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteInfoKvNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x18
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RouteInfoSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteInfoSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteInfoSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kvnodes) > 0 {
		for iNdEx := len(m.Kvnodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Kvnodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Slots) > 0 {
		for iNdEx := len(m.Slots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Slots[iNdEx])
			copy(dAtA[i:], m.Slots[iNdEx])
			i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Slots[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Stores[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *QueryRouteInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRouteInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRouteInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x18
	if len(m.RemoveSets) > 0 {
		for iNdEx := len(m.RemoveSets) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RemoveSets[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *QueryLeaderResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLeaderResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLeaderResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Leader))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DeploymentKvnode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentKvnode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentKvnode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x20
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x18
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DeploymentSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *InstallDeployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallDeployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallDeployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InstallDeploymentResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallDeploymentResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallDeploymentResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x28
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x20
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddLearnerStoreToNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLearnerStoreToNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddLearnerStoreToNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x18
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddLearnerStoreToNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLearnerStoreToNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddLearnerStoreToNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PromoteLearnerStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteLearnerStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromoteLearnerStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x18
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PromoteLearnerStoreResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteLearnerStoreResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromoteLearnerStoreResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemoveNodeStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveNodeStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveNodeStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x18
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemoveNodeStoreResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveNodeStoreResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveNodeStoreResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeBoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeBoot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeBoot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *StoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Slots != nil {
		i -= len(m.Slots)
		copy(dAtA[i:], m.Slots)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Slots)))
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.RaftCluster)
	copy(dAtA[i:], m.RaftCluster)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.RaftCluster)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeBootResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeBootResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeBootResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x4a
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MetaVersion))
	i--
	dAtA[i] = 0x40
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x30
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x28
	i -= len(m.ServiceHost)
	copy(dAtA[i:], m.ServiceHost)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.ServiceHost)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x18
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifyNodeStoreOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyNodeStoreOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyNodeStoreOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x28
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x20
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Op))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodeStoreOpOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStoreOpOk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeStoreOpOk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *IsTransInReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTransInReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTransInReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *IsTransInReadyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTransInReadyResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTransInReadyResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x10
	i--
	if m.Ready {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifySlotTransOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifySlotTransOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifySlotTransOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SlotTransOutOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotTransOutOk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotTransOutOk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifySlotTransIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifySlotTransIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifySlotTransIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SlotTransInOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotTransInOk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotTransInOk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Set != nil {
		{
			size, err := m.Set.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddSetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSetResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSetResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemSetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemSetResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemSetResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SetMarkClear) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMarkClear) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMarkClear) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SetMarkClearResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMarkClearResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMarkClearResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Flygate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Flygate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Flygate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MsgPerSecond))
	i--
	dAtA[i] = 0x10
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetFlyGateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFlyGateList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFlyGateList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetFlyGateListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFlyGateListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFlyGateListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlyGateHeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlyGateHeartBeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlyGateHeartBeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MsgPerSecond))
	i--
	dAtA[i] = 0x10
	i -= len(m.GateService)
	copy(dAtA[i:], m.GateService)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.GateService)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChangeFlyGate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeFlyGate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeFlyGate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MsgSendPerSecond))
	i--
	dAtA[i] = 0x10
	i -= len(m.CurrentGate)
	copy(dAtA[i:], m.CurrentGate)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.CurrentGate)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChangeFlyGateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeFlyGateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeFlyGateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SetMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetMetaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMetaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMetaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MetaFiled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaFiled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaFiled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Default)
	copy(dAtA[i:], m.Default)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Default)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetaTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpdateMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMetaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMetaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMetaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GetMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMetaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifyUpdateMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyUpdateMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyUpdateMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *StoreUpdateMetaOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreUpdateMetaOk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreUpdateMetaOk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PacketTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetSetStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSetStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSetStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StoreStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Slots != nil {
		i -= len(m.Slots)
		copy(dAtA[i:], m.Slots)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Slots)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeStoreStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeStoreStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeStoreStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IsLeader {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Value))
	i--
	dAtA[i] = 0x18
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SetStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i--
	if m.MarkClear {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GetSetStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSetStatusResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSetStatusResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StoreReportStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreReportStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreReportStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Progress))
	i--
	dAtA[i] = 0x30
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Kvcount))
	i--
	dAtA[i] = 0x28
	i--
	if m.Isleader {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TrasnferLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrasnferLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrasnferLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Transferee))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GetSlotStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSlotStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSlotStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GetSlotStoreResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSlotStoreResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSlotStoreResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintFlyfishServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlyfishServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRouteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Version))
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			n += 1 + sovFlyfishServer(uint64(e))
		}
	}
	return n
}

func (m *RouteInfoKvNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	return n
}

func (m *RouteInfoSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			n += 1 + sovFlyfishServer(uint64(e))
		}
	}
	if len(m.Slots) > 0 {
		for _, b := range m.Slots {
			l = len(b)
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	if len(m.Kvnodes) > 0 {
		for _, e := range m.Kvnodes {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *QueryRouteInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	if len(m.RemoveSets) > 0 {
		for _, e := range m.RemoveSets {
			n += 1 + sovFlyfishServer(uint64(e))
		}
	}
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *QueryLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *QueryLeaderResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Leader))
	return n
}

func (m *DeploymentKvnode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	return n
}

func (m *DeploymentSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *InstallDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *InstallDeploymentResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *AddNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	return n
}

func (m *AddNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *AddLearnerStoreToNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *AddLearnerStoreToNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *PromoteLearnerStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *PromoteLearnerStoreResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *RemoveNodeStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *RemoveNodeStoreResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *RemNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	return n
}

func (m *RemNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *KvnodeBoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	return n
}

func (m *StoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Id))
	l = len(m.RaftCluster)
	n += 1 + l + sovFlyfishServer(uint64(l))
	if m.Slots != nil {
		l = len(m.Slots)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *KvnodeBootResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	l = len(m.ServiceHost)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	n += 1 + sovFlyfishServer(uint64(m.MetaVersion))
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *NotifyNodeStoreOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Op))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *NodeStoreOpOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IsTransInReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *IsTransInReadyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *NotifySlotTransOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *SlotTransOutOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *NotifySlotTransIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *SlotTransInOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *AddSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *AddSetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *RemSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	return n
}

func (m *RemSetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *SetMarkClear) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	return n
}

func (m *SetMarkClearResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *Flygate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.MsgPerSecond))
	return n
}

func (m *GetFlyGateList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetFlyGateListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *FlyGateHeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GateService)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.MsgPerSecond))
	return n
}

func (m *ChangeFlyGate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentGate)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.MsgSendPerSecond))
	return n
}

func (m *ChangeFlyGateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Service)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *SetMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *SetMetaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *MetaFiled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovFlyfishServer(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovFlyfishServer(uint64(l))
	l = len(m.Default)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *MetaTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovFlyfishServer(uint64(l))
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *UpdateMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *UpdateMetaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *GetMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMetaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Version))
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *NotifyUpdateMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	n += 1 + sovFlyfishServer(uint64(m.Version))
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *StoreUpdateMetaOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *PacketTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *GetSetStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StoreStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.StoreID))
	if m.Slots != nil {
		l = len(m.Slots)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *KvnodeStoreStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.StoreID))
	n += 1 + sovFlyfishServer(uint64(m.Type))
	n += 1 + sovFlyfishServer(uint64(m.Value))
	n += 2
	return n
}

func (m *KvnodeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *SetStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 2
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *GetSetStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *StoreReportStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	n += 1 + sovFlyfishServer(uint64(m.StoreID))
	n += 2
	n += 1 + sovFlyfishServer(uint64(m.Kvcount))
	n += 1 + sovFlyfishServer(uint64(m.Progress))
	return n
}

func (m *TrasnferLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.StoreID))
	n += 1 + sovFlyfishServer(uint64(m.Transferee))
	return n
}

func (m *GetSlotStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *GetSlotStoreResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	l = len(m.Service)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func sovFlyfishServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlyfishServer(x uint64) (n int) {
	return sovFlyfishServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueryRouteInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryRouteInfo{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Sets:` + fmt.Sprintf("%v", this.Sets) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteInfoKvNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteInfoKvNode{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteInfoSet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKvnodes := "[]*RouteInfoKvNode{"
	for _, f := range this.Kvnodes {
		repeatedStringForKvnodes += strings.Replace(fmt.Sprintf("%v", f), "RouteInfoKvNode", "RouteInfoKvNode", 1) + ","
	}
	repeatedStringForKvnodes += "}"
	s := strings.Join([]string{`&RouteInfoSet{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`Stores:` + fmt.Sprintf("%v", this.Stores) + `,`,
		`Slots:` + fmt.Sprintf("%v", this.Slots) + `,`,
		`Kvnodes:` + repeatedStringForKvnodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRouteInfoResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSets := "[]*RouteInfoSet{"
	for _, f := range this.Sets {
		repeatedStringForSets += strings.Replace(fmt.Sprintf("%v", f), "RouteInfoSet", "RouteInfoSet", 1) + ","
	}
	repeatedStringForSets += "}"
	s := strings.Join([]string{`&QueryRouteInfoResp{`,
		`Sets:` + repeatedStringForSets + `,`,
		`RemoveSets:` + fmt.Sprintf("%v", this.RemoveSets) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryLeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryLeader{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryLeaderResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryLeaderResp{`,
		`Leader:` + fmt.Sprintf("%v", this.Leader) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentKvnode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentKvnode{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentSet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*DeploymentKvnode{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(fmt.Sprintf("%v", f), "DeploymentKvnode", "DeploymentKvnode", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&DeploymentSet{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstallDeployment) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSets := "[]*DeploymentSet{"
	for _, f := range this.Sets {
		repeatedStringForSets += strings.Replace(fmt.Sprintf("%v", f), "DeploymentSet", "DeploymentSet", 1) + ","
	}
	repeatedStringForSets += "}"
	s := strings.Join([]string{`&InstallDeployment{`,
		`Sets:` + repeatedStringForSets + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstallDeploymentResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstallDeploymentResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddNode{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddNodeResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddLearnerStoreToNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddLearnerStoreToNode{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddLearnerStoreToNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddLearnerStoreToNodeResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromoteLearnerStore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoteLearnerStore{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromoteLearnerStoreResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoteLearnerStoreResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveNodeStore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveNodeStore{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveNodeStoreResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveNodeStoreResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemNode{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemNodeResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeBoot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KvnodeBoot{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StoreInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StoreInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`RaftCluster:` + fmt.Sprintf("%v", this.RaftCluster) + `,`,
		`Slots:` + fmt.Sprintf("%v", this.Slots) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeBootResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStores := "[]*StoreInfo{"
	for _, f := range this.Stores {
		repeatedStringForStores += strings.Replace(fmt.Sprintf("%v", f), "StoreInfo", "StoreInfo", 1) + ","
	}
	repeatedStringForStores += "}"
	s := strings.Join([]string{`&KvnodeBootResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`ServiceHost:` + fmt.Sprintf("%v", this.ServiceHost) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`Stores:` + repeatedStringForStores + `,`,
		`MetaVersion:` + fmt.Sprintf("%v", this.MetaVersion) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyNodeStoreOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyNodeStoreOp{`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeStoreOpOk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeStoreOpOk{`,
		`}`,
	}, "")
	return s
}
func (this *IsTransInReady) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsTransInReady{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsTransInReadyResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsTransInReadyResp{`,
		`Ready:` + fmt.Sprintf("%v", this.Ready) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifySlotTransOut) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifySlotTransOut{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlotTransOutOk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlotTransOutOk{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifySlotTransIn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifySlotTransIn{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlotTransInOk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlotTransInOk{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddSet{`,
		`Set:` + strings.Replace(fmt.Sprintf("%v", this.Set), "DeploymentSet", "DeploymentSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddSetResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddSetResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemSet{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemSetResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemSetResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMarkClear) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMarkClear{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMarkClearResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMarkClearResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Flygate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Flygate{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`MsgPerSecond:` + fmt.Sprintf("%v", this.MsgPerSecond) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFlyGateList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFlyGateList{`,
		`}`,
	}, "")
	return s
}
func (this *GetFlyGateListResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForList := "[]*Flygate{"
	for _, f := range this.List {
		repeatedStringForList += strings.Replace(fmt.Sprintf("%v", f), "Flygate", "Flygate", 1) + ","
	}
	repeatedStringForList += "}"
	s := strings.Join([]string{`&GetFlyGateListResp{`,
		`List:` + repeatedStringForList + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlyGateHeartBeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlyGateHeartBeat{`,
		`GateService:` + fmt.Sprintf("%v", this.GateService) + `,`,
		`MsgPerSecond:` + fmt.Sprintf("%v", this.MsgPerSecond) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeFlyGate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeFlyGate{`,
		`CurrentGate:` + fmt.Sprintf("%v", this.CurrentGate) + `,`,
		`MsgSendPerSecond:` + fmt.Sprintf("%v", this.MsgSendPerSecond) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeFlyGateResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeFlyGateResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMeta{`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMetaResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMetaResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaFiled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetaFiled{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Default:` + fmt.Sprintf("%v", this.Default) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaTable) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*MetaFiled{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "MetaFiled", "MetaFiled", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&MetaTable{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMeta) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUpdates := "[]*MetaTable{"
	for _, f := range this.Updates {
		repeatedStringForUpdates += strings.Replace(fmt.Sprintf("%v", f), "MetaTable", "MetaTable", 1) + ","
	}
	repeatedStringForUpdates += "}"
	s := strings.Join([]string{`&UpdateMeta{`,
		`Updates:` + repeatedStringForUpdates + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMetaResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMetaResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMeta{`,
		`}`,
	}, "")
	return s
}
func (this *GetMetaResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMetaResp{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyUpdateMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyUpdateMeta{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StoreUpdateMetaOk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StoreUpdateMetaOk{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PacketTest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketTest{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSetStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSetStatus{`,
		`}`,
	}, "")
	return s
}
func (this *StoreStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StoreStatus{`,
		`StoreID:` + fmt.Sprintf("%v", this.StoreID) + `,`,
		`Slots:` + fmt.Sprintf("%v", this.Slots) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeStoreStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KvnodeStoreStatus{`,
		`StoreID:` + fmt.Sprintf("%v", this.StoreID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`IsLeader:` + fmt.Sprintf("%v", this.IsLeader) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStores := "[]*KvnodeStoreStatus{"
	for _, f := range this.Stores {
		repeatedStringForStores += strings.Replace(fmt.Sprintf("%v", f), "KvnodeStoreStatus", "KvnodeStoreStatus", 1) + ","
	}
	repeatedStringForStores += "}"
	s := strings.Join([]string{`&KvnodeStatus{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Stores:` + repeatedStringForStores + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStores := "[]*StoreStatus{"
	for _, f := range this.Stores {
		repeatedStringForStores += strings.Replace(fmt.Sprintf("%v", f), "StoreStatus", "StoreStatus", 1) + ","
	}
	repeatedStringForStores += "}"
	repeatedStringForNodes := "[]*KvnodeStatus{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(fmt.Sprintf("%v", f), "KvnodeStatus", "KvnodeStatus", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&SetStatus{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`MarkClear:` + fmt.Sprintf("%v", this.MarkClear) + `,`,
		`Stores:` + repeatedStringForStores + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSetStatusResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSets := "[]*SetStatus{"
	for _, f := range this.Sets {
		repeatedStringForSets += strings.Replace(fmt.Sprintf("%v", f), "SetStatus", "SetStatus", 1) + ","
	}
	repeatedStringForSets += "}"
	s := strings.Join([]string{`&GetSetStatusResp{`,
		`Sets:` + repeatedStringForSets + `,`,
		`}`,
	}, "")
	return s
}
func (this *StoreReportStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StoreReportStatus{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`StoreID:` + fmt.Sprintf("%v", this.StoreID) + `,`,
		`Isleader:` + fmt.Sprintf("%v", this.Isleader) + `,`,
		`Kvcount:` + fmt.Sprintf("%v", this.Kvcount) + `,`,
		`Progress:` + fmt.Sprintf("%v", this.Progress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrasnferLeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrasnferLeader{`,
		`StoreID:` + fmt.Sprintf("%v", this.StoreID) + `,`,
		`Transferee:` + fmt.Sprintf("%v", this.Transferee) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSlotStore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSlotStore{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSlotStoreResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSlotStoreResp{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlyfishServer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueryRouteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: queryRouteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: queryRouteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sets = append(m.Sets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sets) == 0 {
					m.Sets = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyfishServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sets = append(m.Sets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteInfoKvNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: routeInfoKvNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: routeInfoKvNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteInfoSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: routeInfoSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: routeInfoSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stores = append(m.Stores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stores) == 0 {
					m.Stores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyfishServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stores = append(m.Stores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots, make([]byte, postIndex-iNdEx))
			copy(m.Slots[len(m.Slots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvnodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kvnodes = append(m.Kvnodes, &RouteInfoKvNode{})
			if err := m.Kvnodes[len(m.Kvnodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRouteInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: queryRouteInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: queryRouteInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &RouteInfoSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RemoveSets = append(m.RemoveSets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RemoveSets) == 0 {
					m.RemoveSets = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyfishServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RemoveSets = append(m.RemoveSets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveSets", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_leader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_leader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLeaderResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_leader_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_leader_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			m.Leader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentKvnode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deploymentKvnode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deploymentKvnode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deploymentSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deploymentSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &DeploymentKvnode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallDeployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: installDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: installDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &DeploymentSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallDeploymentResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: installDeploymentResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: installDeploymentResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLearnerStoreToNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addLearnerStoreToNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addLearnerStoreToNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLearnerStoreToNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addLearnerStoreToNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addLearnerStoreToNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteLearnerStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: promoteLearnerStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: promoteLearnerStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteLearnerStoreResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: promoteLearnerStoreResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: promoteLearnerStoreResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveNodeStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: removeNodeStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: removeNodeStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveNodeStoreResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: removeNodeStoreResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: removeNodeStoreResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeBoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeBoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeBoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: storeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: storeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots[:0], dAtA[iNdEx:postIndex]...)
			if m.Slots == nil {
				m.Slots = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeBootResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeBootResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeBootResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, &StoreInfo{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaVersion", wireType)
			}
			m.MetaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyNodeStoreOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyNodeStoreOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyNodeStoreOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStoreOpOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: nodeStoreOpOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: nodeStoreOpOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTransInReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: isTransInReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: isTransInReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTransInReadyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: isTransInReadyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: isTransInReadyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifySlotTransOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifySlotTransOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifySlotTransOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotTransOutOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: slotTransOutOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: slotTransOutOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifySlotTransIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifySlotTransIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifySlotTransIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotTransInOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: slotTransInOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: slotTransInOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Set == nil {
				m.Set = &DeploymentSet{}
			}
			if err := m.Set.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addSetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addSetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemSetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remSetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remSetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMarkClear) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setMarkClear: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setMarkClear: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMarkClearResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setMarkClearResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setMarkClearResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Flygate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flygate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flygate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgPerSecond", wireType)
			}
			m.MsgPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgPerSecond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFlyGateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getFlyGateList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getFlyGateList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFlyGateListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getFlyGateListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getFlyGateListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Flygate{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlyGateHeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flyGateHeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flyGateHeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgPerSecond", wireType)
			}
			m.MsgPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgPerSecond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeFlyGate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: changeFlyGate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: changeFlyGate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentGate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentGate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSendPerSecond", wireType)
			}
			m.MsgSendPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSendPerSecond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeFlyGateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: changeFlyGateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: changeFlyGateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMetaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setMetaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setMetaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaFiled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaFiled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaFiled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Default = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &MetaFiled{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updateMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updateMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &MetaTable{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMetaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updateMetaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updateMetaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getMetaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getMetaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyUpdateMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyUpdateMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyUpdateMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreUpdateMetaOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: storeUpdateMetaOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: storeUpdateMetaOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: packetTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: packetTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSetStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getSetStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getSetStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: storeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: storeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots[:0], dAtA[iNdEx:postIndex]...)
			if m.Slots == nil {
				m.Slots = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeStoreStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeStoreStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeStoreStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeader = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, &KvnodeStoreStatus{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MarkClear = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, &StoreStatus{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &KvnodeStatus{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSetStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getSetStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getSetStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &SetStatus{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreReportStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: storeReportStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: storeReportStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isleader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isleader = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvcount", wireType)
			}
			m.Kvcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kvcount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrasnferLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: trasnferLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: trasnferLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferee", wireType)
			}
			m.Transferee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Transferee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSlotStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getSlotStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getSlotStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSlotStoreResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getSlotStoreResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getSlotStoreResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlyfishServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlyfishServer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFlyfishServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFlyfishServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFlyfishServer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFlyfishServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlyfishServer   = fmt.Errorf("proto: integer overflow")
)
