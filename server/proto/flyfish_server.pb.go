// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flyfish_server.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ServerCmdType int32

const (
	ServerCmdType_QueryLeader      ServerCmdType = 1
	ServerCmdType_QueryLeaderResp  ServerCmdType = 2
	ServerCmdType_GateReport       ServerCmdType = 3
	ServerCmdType_QueryGateList    ServerCmdType = 4
	ServerCmdType_GateList         ServerCmdType = 5
	ServerCmdType_NotiReloadKvConf ServerCmdType = 6
	ServerCmdType_RemoveGate       ServerCmdType = 7
)

var ServerCmdType_name = map[int32]string{
	1: "QueryLeader",
	2: "QueryLeaderResp",
	3: "GateReport",
	4: "QueryGateList",
	5: "GateList",
	6: "NotiReloadKvConf",
	7: "RemoveGate",
}

var ServerCmdType_value = map[string]int32{
	"QueryLeader":      1,
	"QueryLeaderResp":  2,
	"GateReport":       3,
	"QueryGateList":    4,
	"GateList":         5,
	"NotiReloadKvConf": 6,
	"RemoveGate":       7,
}

func (x ServerCmdType) Enum() *ServerCmdType {
	p := new(ServerCmdType)
	*p = x
	return p
}

func (x ServerCmdType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ServerCmdType_name, int32(x))
}

func (x *ServerCmdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServerCmdType_value, data, "ServerCmdType")
	if err != nil {
		return err
	}
	*x = ServerCmdType(value)
	return nil
}

func (ServerCmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{0}
}

//查询是否store的leader,如果是返回yes=true
type QueryLeader struct {
	Store int32 `protobuf:"varint,1,opt,name=store" json:"store"`
}

func (m *QueryLeader) Reset()      { *m = QueryLeader{} }
func (*QueryLeader) ProtoMessage() {}
func (*QueryLeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{0}
}
func (m *QueryLeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLeader.Merge(m, src)
}
func (m *QueryLeader) XXX_Size() int {
	return m.Size()
}
func (m *QueryLeader) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLeader.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLeader proto.InternalMessageInfo

func (m *QueryLeader) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type QueryLeaderResp struct {
	Yes bool `protobuf:"varint,1,opt,name=yes" json:"yes"`
}

func (m *QueryLeaderResp) Reset()      { *m = QueryLeaderResp{} }
func (*QueryLeaderResp) ProtoMessage() {}
func (*QueryLeaderResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{1}
}
func (m *QueryLeaderResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLeaderResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLeaderResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLeaderResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLeaderResp.Merge(m, src)
}
func (m *QueryLeaderResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryLeaderResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLeaderResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLeaderResp proto.InternalMessageInfo

func (m *QueryLeaderResp) GetYes() bool {
	if m != nil {
		return m.Yes
	}
	return false
}

type GateReport struct {
	Service     string `protobuf:"bytes,1,opt,name=service" json:"service"`
	Console     string `protobuf:"bytes,2,opt,name=console" json:"console"`
	ConfVersion int32  `protobuf:"varint,3,opt,name=conf_version,json=confVersion" json:"conf_version"`
}

func (m *GateReport) Reset()      { *m = GateReport{} }
func (*GateReport) ProtoMessage() {}
func (*GateReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{2}
}
func (m *GateReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateReport.Merge(m, src)
}
func (m *GateReport) XXX_Size() int {
	return m.Size()
}
func (m *GateReport) XXX_DiscardUnknown() {
	xxx_messageInfo_GateReport.DiscardUnknown(m)
}

var xxx_messageInfo_GateReport proto.InternalMessageInfo

func (m *GateReport) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *GateReport) GetConsole() string {
	if m != nil {
		return m.Console
	}
	return ""
}

func (m *GateReport) GetConfVersion() int32 {
	if m != nil {
		return m.ConfVersion
	}
	return 0
}

type QueryGateList struct {
}

func (m *QueryGateList) Reset()      { *m = QueryGateList{} }
func (*QueryGateList) ProtoMessage() {}
func (*QueryGateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{3}
}
func (m *QueryGateList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGateList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGateList.Merge(m, src)
}
func (m *QueryGateList) XXX_Size() int {
	return m.Size()
}
func (m *QueryGateList) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGateList.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGateList proto.InternalMessageInfo

type GateList struct {
	List []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *GateList) Reset()      { *m = GateList{} }
func (*GateList) ProtoMessage() {}
func (*GateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{4}
}
func (m *GateList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateList.Merge(m, src)
}
func (m *GateList) XXX_Size() int {
	return m.Size()
}
func (m *GateList) XXX_DiscardUnknown() {
	xxx_messageInfo_GateList.DiscardUnknown(m)
}

var xxx_messageInfo_GateList proto.InternalMessageInfo

func (m *GateList) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type NotifyReloadKvconf struct {
}

func (m *NotifyReloadKvconf) Reset()      { *m = NotifyReloadKvconf{} }
func (*NotifyReloadKvconf) ProtoMessage() {}
func (*NotifyReloadKvconf) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{5}
}
func (m *NotifyReloadKvconf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyReloadKvconf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyReloadKvconf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyReloadKvconf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyReloadKvconf.Merge(m, src)
}
func (m *NotifyReloadKvconf) XXX_Size() int {
	return m.Size()
}
func (m *NotifyReloadKvconf) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyReloadKvconf.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyReloadKvconf proto.InternalMessageInfo

type RemoveGate struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service"`
}

func (m *RemoveGate) Reset()      { *m = RemoveGate{} }
func (*RemoveGate) ProtoMessage() {}
func (*RemoveGate) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{6}
}
func (m *RemoveGate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveGate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveGate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveGate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveGate.Merge(m, src)
}
func (m *RemoveGate) XXX_Size() int {
	return m.Size()
}
func (m *RemoveGate) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveGate.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveGate proto.InternalMessageInfo

func (m *RemoveGate) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.ServerCmdType", ServerCmdType_name, ServerCmdType_value)
	proto.RegisterType((*QueryLeader)(nil), "proto.query_leader")
	proto.RegisterType((*QueryLeaderResp)(nil), "proto.query_leader_resp")
	proto.RegisterType((*GateReport)(nil), "proto.gate_report")
	proto.RegisterType((*QueryGateList)(nil), "proto.query_gate_list")
	proto.RegisterType((*GateList)(nil), "proto.gate_list")
	proto.RegisterType((*NotifyReloadKvconf)(nil), "proto.notify_reload_kvconf")
	proto.RegisterType((*RemoveGate)(nil), "proto.remove_gate")
}

func init() { proto.RegisterFile("flyfish_server.proto", fileDescriptor_03085fc3fc38bb42) }

var fileDescriptor_03085fc3fc38bb42 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0xb1, 0x8e, 0xd3, 0x40,
	0x14, 0xf4, 0x9e, 0x63, 0xee, 0xf2, 0x9c, 0x23, 0xce, 0x62, 0x9d, 0xac, 0x2b, 0xf6, 0x4e, 0x6e,
	0x38, 0x05, 0x01, 0x2d, 0x75, 0x52, 0x50, 0x10, 0x21, 0x61, 0x10, 0xad, 0x65, 0x25, 0xcf, 0xc1,
	0xc2, 0xf1, 0x9a, 0xdd, 0xc5, 0x92, 0x3b, 0x3e, 0x80, 0x82, 0xcf, 0xe0, 0x53, 0x52, 0xa6, 0x4c,
	0x85, 0xb0, 0xd3, 0x50, 0xe6, 0x13, 0xd0, 0xae, 0x43, 0xe4, 0x8e, 0xea, 0xbd, 0x37, 0x33, 0x9a,
	0x9d, 0x1d, 0xf0, 0xd3, 0xbc, 0x4e, 0x33, 0xf9, 0x29, 0x96, 0x28, 0x2a, 0x14, 0x2f, 0x4a, 0xc1,
	0x15, 0xa7, 0x8e, 0x19, 0xb7, 0xfe, 0x9a, 0xaf, 0xb9, 0x59, 0x5f, 0xea, 0xad, 0x23, 0xc3, 0x29,
	0x8c, 0xbe, 0x7c, 0x45, 0x51, 0xc7, 0x39, 0x26, 0x2b, 0x14, 0xf4, 0x16, 0x1c, 0xa9, 0xb8, 0xc0,
	0x80, 0xdc, 0x93, 0x07, 0x67, 0x36, 0xd8, 0xfe, 0xba, 0xb3, 0xa2, 0x0e, 0x0a, 0x9f, 0xc1, 0xa4,
	0xaf, 0x8d, 0x05, 0xca, 0x92, 0xde, 0x80, 0x5d, 0xa3, 0x34, 0xf2, 0xab, 0x93, 0x5c, 0x03, 0x61,
	0x05, 0xee, 0x3a, 0x51, 0x18, 0x0b, 0x2c, 0xb9, 0x50, 0x94, 0xc1, 0xa5, 0x0e, 0x95, 0x2d, 0x3b,
	0xe7, 0xe1, 0x49, 0xfa, 0x0f, 0xd4, 0xfc, 0x92, 0x17, 0x92, 0xe7, 0x18, 0x5c, 0xf4, 0xf9, 0x13,
	0x48, 0x9f, 0xc2, 0x68, 0xc9, 0x8b, 0x34, 0xae, 0x50, 0xc8, 0x8c, 0x17, 0x81, 0xdd, 0x8b, 0xe7,
	0x6a, 0xe6, 0x63, 0x47, 0x84, 0x13, 0x18, 0x77, 0x21, 0xcd, 0xeb, 0x79, 0x26, 0x55, 0x78, 0x07,
	0xc3, 0xf3, 0x41, 0x29, 0x0c, 0xf4, 0x0c, 0xc8, 0xbd, 0xfd, 0x30, 0x8c, 0xcc, 0x1e, 0xde, 0x80,
	0x5f, 0x70, 0x95, 0xa5, 0x75, 0x2c, 0x30, 0xe7, 0xc9, 0x2a, 0xfe, 0x5c, 0x69, 0xcb, 0xf0, 0x39,
	0xb8, 0x02, 0x37, 0xbc, 0x42, 0x63, 0xf6, 0xbf, 0x3f, 0x4c, 0xbf, 0x13, 0xb8, 0x7e, 0x6f, 0x9a,
	0x9f, 0x6f, 0x56, 0x1f, 0xea, 0x12, 0xe9, 0x18, 0xdc, 0x77, 0x3a, 0xcc, 0xc2, 0x14, 0xe6, 0x11,
	0xfa, 0x04, 0xc6, 0x3d, 0x20, 0x42, 0x59, 0x7a, 0x17, 0xf4, 0x31, 0xc0, 0xeb, 0x44, 0x61, 0x64,
	0x9a, 0xf2, 0x6c, 0x3a, 0x81, 0x6b, 0x23, 0xd2, 0xe0, 0x22, 0x93, 0xca, 0x1b, 0xd0, 0x11, 0x5c,
	0x9d, 0x2f, 0x87, 0xfa, 0xe0, 0xbd, 0xe5, 0x2a, 0x8b, 0x4c, 0xd8, 0x37, 0xd5, 0x9c, 0x17, 0xa9,
	0xf7, 0x48, 0xdb, 0x44, 0x26, 0xad, 0x56, 0x7a, 0x97, 0xb3, 0x57, 0xdb, 0x86, 0x91, 0x5d, 0xc3,
	0xc8, 0xbe, 0x61, 0xd6, 0xb1, 0x61, 0xe4, 0x5b, 0xcb, 0xc8, 0xcf, 0x96, 0x91, 0x6d, 0xcb, 0xc8,
	0xae, 0x65, 0xe4, 0x77, 0xcb, 0xc8, 0x9f, 0x96, 0x59, 0xc7, 0x96, 0x91, 0x1f, 0x07, 0x66, 0xed,
	0x0e, 0xcc, 0xda, 0x1f, 0x98, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x75, 0x1c, 0xf2, 0x48,
	0x02, 0x00, 0x00,
}

func (x ServerCmdType) String() string {
	s, ok := ServerCmdType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *QueryLeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryLeader)
	if !ok {
		that2, ok := that.(QueryLeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *QueryLeaderResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryLeaderResp)
	if !ok {
		that2, ok := that.(QueryLeaderResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Yes != that1.Yes {
		return false
	}
	return true
}
func (this *GateReport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GateReport)
	if !ok {
		that2, ok := that.(GateReport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Console != that1.Console {
		return false
	}
	if this.ConfVersion != that1.ConfVersion {
		return false
	}
	return true
}
func (this *QueryGateList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryGateList)
	if !ok {
		that2, ok := that.(QueryGateList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GateList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GateList)
	if !ok {
		that2, ok := that.(GateList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if this.List[i] != that1.List[i] {
			return false
		}
	}
	return true
}
func (this *NotifyReloadKvconf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyReloadKvconf)
	if !ok {
		that2, ok := that.(NotifyReloadKvconf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RemoveGate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveGate)
	if !ok {
		that2, ok := that.(RemoveGate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	return true
}
func (this *QueryLeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.QueryLeader{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryLeaderResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.QueryLeaderResp{")
	s = append(s, "Yes: "+fmt.Sprintf("%#v", this.Yes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GateReport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.GateReport{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Console: "+fmt.Sprintf("%#v", this.Console)+",\n")
	s = append(s, "ConfVersion: "+fmt.Sprintf("%#v", this.ConfVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryGateList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.QueryGateList{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GateList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GateList{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyReloadKvconf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.NotifyReloadKvconf{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveGate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.RemoveGate{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlyfishServer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueryLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *QueryLeaderResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLeaderResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLeaderResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Yes {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GateReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ConfVersion))
	i--
	dAtA[i] = 0x18
	i -= len(m.Console)
	copy(dAtA[i:], m.Console)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Console)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGateList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGateList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifyReloadKvconf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyReloadKvconf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyReloadKvconf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveGate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveGate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveGate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintFlyfishServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlyfishServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *QueryLeaderResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *GateReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	n += 1 + l + sovFlyfishServer(uint64(l))
	l = len(m.Console)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ConfVersion))
	return n
}

func (m *QueryGateList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GateList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *NotifyReloadKvconf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveGate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func sovFlyfishServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlyfishServer(x uint64) (n int) {
	return sovFlyfishServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueryLeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryLeader{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryLeaderResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryLeaderResp{`,
		`Yes:` + fmt.Sprintf("%v", this.Yes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GateReport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GateReport{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Console:` + fmt.Sprintf("%v", this.Console) + `,`,
		`ConfVersion:` + fmt.Sprintf("%v", this.ConfVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryGateList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryGateList{`,
		`}`,
	}, "")
	return s
}
func (this *GateList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GateList{`,
		`List:` + fmt.Sprintf("%v", this.List) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyReloadKvconf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyReloadKvconf{`,
		`}`,
	}, "")
	return s
}
func (this *RemoveGate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveGate{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlyfishServer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueryLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_leader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_leader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLeaderResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_leader_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_leader_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Yes = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: gate_report: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: gate_report: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Console", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Console = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfVersion", wireType)
			}
			m.ConfVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_gate_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_gate_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: gate_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: gate_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyReloadKvconf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notify_reload_kvconf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notify_reload_kvconf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveGate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remove_gate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remove_gate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlyfishServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlyfishServer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFlyfishServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFlyfishServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFlyfishServer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFlyfishServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlyfishServer   = fmt.Errorf("proto: integer overflow")
)
