// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flyfish_server.proto

package proto

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ServerCmdType int32

const (
	//flygate <-> flykv
	ServerCmdType_QueryLeader     ServerCmdType = 1
	ServerCmdType_QueryLeaderResp ServerCmdType = 2
	//console <-> pd
	ServerCmdType_InstallDeployment     ServerCmdType = 101
	ServerCmdType_InstallDeploymentResp ServerCmdType = 102
	ServerCmdType_AddNode               ServerCmdType = 103
	ServerCmdType_AddNodeResp           ServerCmdType = 104
	ServerCmdType_RemNode               ServerCmdType = 105
	ServerCmdType_RemNodeResp           ServerCmdType = 106
	ServerCmdType_AddSet                ServerCmdType = 107
	ServerCmdType_AddSetResp            ServerCmdType = 108
	ServerCmdType_RemSet                ServerCmdType = 109
	ServerCmdType_RemSetResp            ServerCmdType = 110
	ServerCmdType_SetMarkClear          ServerCmdType = 111
	ServerCmdType_SetMarkClearResp      ServerCmdType = 112
	ServerCmdType_SetMeta               ServerCmdType = 113
	ServerCmdType_SetMetaResp           ServerCmdType = 114
	ServerCmdType_GetMeta               ServerCmdType = 115
	ServerCmdType_GetMetaResp           ServerCmdType = 116
	ServerCmdType_UpdateMeta            ServerCmdType = 117
	ServerCmdType_UpdateMetaResp        ServerCmdType = 118
	//kvnode <-> pd
	ServerCmdType_KvnodeBoot             ServerCmdType = 210
	ServerCmdType_KvnodeBootResp         ServerCmdType = 211
	ServerCmdType_NotifyAddNode          ServerCmdType = 212
	ServerCmdType_NotifyAddNodeResp      ServerCmdType = 213
	ServerCmdType_NotifyRemNode          ServerCmdType = 214
	ServerCmdType_NotifyRemNodeResp      ServerCmdType = 215
	ServerCmdType_NotifySlotTransOut     ServerCmdType = 216
	ServerCmdType_NotifySlotTransOutResp ServerCmdType = 217
	ServerCmdType_NotifySlotTransIn      ServerCmdType = 218
	ServerCmdType_NotifySlotTransInResp  ServerCmdType = 219
	ServerCmdType_NotifyUpdateMeta       ServerCmdType = 220
	ServerCmdType_NotifyUpdateMetaResp   ServerCmdType = 221
	//flygate <-> pd
	ServerCmdType_QueryRouteInfo     ServerCmdType = 310
	ServerCmdType_QueryRouteInfoResp ServerCmdType = 311
	ServerCmdType_FlyGateHeartBeat   ServerCmdType = 312
	//client <-> pd
	ServerCmdType_GetFlyGateList     ServerCmdType = 410
	ServerCmdType_GetFlyGateListResp ServerCmdType = 411
	ServerCmdType_ChangeFlyGate      ServerCmdType = 412
	ServerCmdType_ChangeFlyGateResp  ServerCmdType = 413
)

var ServerCmdType_name = map[int32]string{
	1:   "QueryLeader",
	2:   "QueryLeaderResp",
	101: "InstallDeployment",
	102: "InstallDeploymentResp",
	103: "AddNode",
	104: "AddNodeResp",
	105: "RemNode",
	106: "RemNodeResp",
	107: "AddSet",
	108: "AddSetResp",
	109: "RemSet",
	110: "RemSetResp",
	111: "SetMarkClear",
	112: "SetMarkClearResp",
	113: "SetMeta",
	114: "SetMetaResp",
	115: "GetMeta",
	116: "GetMetaResp",
	117: "UpdateMeta",
	118: "UpdateMetaResp",
	210: "KvnodeBoot",
	211: "KvnodeBootResp",
	212: "NotifyAddNode",
	213: "NotifyAddNodeResp",
	214: "NotifyRemNode",
	215: "NotifyRemNodeResp",
	216: "NotifySlotTransOut",
	217: "NotifySlotTransOutResp",
	218: "NotifySlotTransIn",
	219: "NotifySlotTransInResp",
	220: "NotifyUpdateMeta",
	221: "NotifyUpdateMetaResp",
	310: "QueryRouteInfo",
	311: "QueryRouteInfoResp",
	312: "FlyGateHeartBeat",
	410: "GetFlyGateList",
	411: "GetFlyGateListResp",
	412: "ChangeFlyGate",
	413: "ChangeFlyGateResp",
}

var ServerCmdType_value = map[string]int32{
	"QueryLeader":            1,
	"QueryLeaderResp":        2,
	"InstallDeployment":      101,
	"InstallDeploymentResp":  102,
	"AddNode":                103,
	"AddNodeResp":            104,
	"RemNode":                105,
	"RemNodeResp":            106,
	"AddSet":                 107,
	"AddSetResp":             108,
	"RemSet":                 109,
	"RemSetResp":             110,
	"SetMarkClear":           111,
	"SetMarkClearResp":       112,
	"SetMeta":                113,
	"SetMetaResp":            114,
	"GetMeta":                115,
	"GetMetaResp":            116,
	"UpdateMeta":             117,
	"UpdateMetaResp":         118,
	"KvnodeBoot":             210,
	"KvnodeBootResp":         211,
	"NotifyAddNode":          212,
	"NotifyAddNodeResp":      213,
	"NotifyRemNode":          214,
	"NotifyRemNodeResp":      215,
	"NotifySlotTransOut":     216,
	"NotifySlotTransOutResp": 217,
	"NotifySlotTransIn":      218,
	"NotifySlotTransInResp":  219,
	"NotifyUpdateMeta":       220,
	"NotifyUpdateMetaResp":   221,
	"QueryRouteInfo":         310,
	"QueryRouteInfoResp":     311,
	"FlyGateHeartBeat":       312,
	"GetFlyGateList":         410,
	"GetFlyGateListResp":     411,
	"ChangeFlyGate":          412,
	"ChangeFlyGateResp":      413,
}

func (x ServerCmdType) Enum() *ServerCmdType {
	p := new(ServerCmdType)
	*p = x
	return p
}

func (x ServerCmdType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ServerCmdType_name, int32(x))
}

func (x *ServerCmdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServerCmdType_value, data, "ServerCmdType")
	if err != nil {
		return err
	}
	*x = ServerCmdType(value)
	return nil
}

func (ServerCmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{0}
}

type QueryRouteInfo struct {
	Version int64   `protobuf:"varint,1,opt,name=version" json:"version"`
	Sets    []int32 `protobuf:"varint,2,rep,name=sets" json:"sets,omitempty"`
}

func (m *QueryRouteInfo) Reset()      { *m = QueryRouteInfo{} }
func (*QueryRouteInfo) ProtoMessage() {}
func (*QueryRouteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{0}
}
func (m *QueryRouteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRouteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRouteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRouteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteInfo.Merge(m, src)
}
func (m *QueryRouteInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryRouteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteInfo proto.InternalMessageInfo

func (m *QueryRouteInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *QueryRouteInfo) GetSets() []int32 {
	if m != nil {
		return m.Sets
	}
	return nil
}

type RouteInfoKvNode struct {
	NodeID      int32  `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Host        string `protobuf:"bytes,2,opt,name=host" json:"host"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort" json:"servicePort"`
}

func (m *RouteInfoKvNode) Reset()      { *m = RouteInfoKvNode{} }
func (*RouteInfoKvNode) ProtoMessage() {}
func (*RouteInfoKvNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{1}
}
func (m *RouteInfoKvNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteInfoKvNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteInfoKvNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteInfoKvNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteInfoKvNode.Merge(m, src)
}
func (m *RouteInfoKvNode) XXX_Size() int {
	return m.Size()
}
func (m *RouteInfoKvNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteInfoKvNode.DiscardUnknown(m)
}

var xxx_messageInfo_RouteInfoKvNode proto.InternalMessageInfo

func (m *RouteInfoKvNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *RouteInfoKvNode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RouteInfoKvNode) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

type RouteInfoSet struct {
	SetID   int32              `protobuf:"varint,1,opt,name=setID" json:"setID"`
	Stores  []int32            `protobuf:"varint,2,rep,name=stores" json:"stores,omitempty"`
	Slots   [][]byte           `protobuf:"bytes,3,rep,name=slots" json:"slots,omitempty"`
	Kvnodes []*RouteInfoKvNode `protobuf:"bytes,4,rep,name=kvnodes" json:"kvnodes,omitempty"`
}

func (m *RouteInfoSet) Reset()      { *m = RouteInfoSet{} }
func (*RouteInfoSet) ProtoMessage() {}
func (*RouteInfoSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{2}
}
func (m *RouteInfoSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteInfoSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteInfoSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteInfoSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteInfoSet.Merge(m, src)
}
func (m *RouteInfoSet) XXX_Size() int {
	return m.Size()
}
func (m *RouteInfoSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteInfoSet.DiscardUnknown(m)
}

var xxx_messageInfo_RouteInfoSet proto.InternalMessageInfo

func (m *RouteInfoSet) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *RouteInfoSet) GetStores() []int32 {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *RouteInfoSet) GetSlots() [][]byte {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *RouteInfoSet) GetKvnodes() []*RouteInfoKvNode {
	if m != nil {
		return m.Kvnodes
	}
	return nil
}

type QueryRouteInfoResp struct {
	Sets       []*RouteInfoSet `protobuf:"bytes,1,rep,name=sets" json:"sets,omitempty"`
	RemoveSets []int32         `protobuf:"varint,2,rep,name=removeSets" json:"removeSets,omitempty"`
	Version    int64           `protobuf:"varint,3,opt,name=version" json:"version"`
}

func (m *QueryRouteInfoResp) Reset()      { *m = QueryRouteInfoResp{} }
func (*QueryRouteInfoResp) ProtoMessage() {}
func (*QueryRouteInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{3}
}
func (m *QueryRouteInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRouteInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRouteInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRouteInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteInfoResp.Merge(m, src)
}
func (m *QueryRouteInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryRouteInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteInfoResp proto.InternalMessageInfo

func (m *QueryRouteInfoResp) GetSets() []*RouteInfoSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

func (m *QueryRouteInfoResp) GetRemoveSets() []int32 {
	if m != nil {
		return m.RemoveSets
	}
	return nil
}

func (m *QueryRouteInfoResp) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

//查询是否store的leader,如果是返回yes=true
type QueryLeader struct {
	Store int32 `protobuf:"varint,1,opt,name=store" json:"store"`
}

func (m *QueryLeader) Reset()      { *m = QueryLeader{} }
func (*QueryLeader) ProtoMessage() {}
func (*QueryLeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{4}
}
func (m *QueryLeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLeader.Merge(m, src)
}
func (m *QueryLeader) XXX_Size() int {
	return m.Size()
}
func (m *QueryLeader) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLeader.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLeader proto.InternalMessageInfo

func (m *QueryLeader) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type QueryLeaderResp struct {
	Leader int32 `protobuf:"varint,1,opt,name=leader" json:"leader"`
}

func (m *QueryLeaderResp) Reset()      { *m = QueryLeaderResp{} }
func (*QueryLeaderResp) ProtoMessage() {}
func (*QueryLeaderResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{5}
}
func (m *QueryLeaderResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLeaderResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLeaderResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLeaderResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLeaderResp.Merge(m, src)
}
func (m *QueryLeaderResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryLeaderResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLeaderResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLeaderResp proto.InternalMessageInfo

func (m *QueryLeaderResp) GetLeader() int32 {
	if m != nil {
		return m.Leader
	}
	return 0
}

type DeploymentKvnode struct {
	NodeID      int32  `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Host        string `protobuf:"bytes,2,opt,name=host" json:"host"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort" json:"servicePort"`
	RaftPort    int32  `protobuf:"varint,4,opt,name=raftPort" json:"raftPort"`
}

func (m *DeploymentKvnode) Reset()      { *m = DeploymentKvnode{} }
func (*DeploymentKvnode) ProtoMessage() {}
func (*DeploymentKvnode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{6}
}
func (m *DeploymentKvnode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentKvnode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentKvnode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentKvnode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentKvnode.Merge(m, src)
}
func (m *DeploymentKvnode) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentKvnode) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentKvnode.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentKvnode proto.InternalMessageInfo

func (m *DeploymentKvnode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *DeploymentKvnode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DeploymentKvnode) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *DeploymentKvnode) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

type DeploymentSet struct {
	SetID int32               `protobuf:"varint,1,opt,name=setID" json:"setID"`
	Nodes []*DeploymentKvnode `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *DeploymentSet) Reset()      { *m = DeploymentSet{} }
func (*DeploymentSet) ProtoMessage() {}
func (*DeploymentSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{7}
}
func (m *DeploymentSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentSet.Merge(m, src)
}
func (m *DeploymentSet) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentSet) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentSet.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentSet proto.InternalMessageInfo

func (m *DeploymentSet) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *DeploymentSet) GetNodes() []*DeploymentKvnode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type InstallDeployment struct {
	Sets []*DeploymentSet `protobuf:"bytes,1,rep,name=sets" json:"sets,omitempty"`
}

func (m *InstallDeployment) Reset()      { *m = InstallDeployment{} }
func (*InstallDeployment) ProtoMessage() {}
func (*InstallDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{8}
}
func (m *InstallDeployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallDeployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallDeployment.Merge(m, src)
}
func (m *InstallDeployment) XXX_Size() int {
	return m.Size()
}
func (m *InstallDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_InstallDeployment proto.InternalMessageInfo

func (m *InstallDeployment) GetSets() []*DeploymentSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

type InstallDeploymentResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *InstallDeploymentResp) Reset()      { *m = InstallDeploymentResp{} }
func (*InstallDeploymentResp) ProtoMessage() {}
func (*InstallDeploymentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{9}
}
func (m *InstallDeploymentResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallDeploymentResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallDeploymentResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallDeploymentResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallDeploymentResp.Merge(m, src)
}
func (m *InstallDeploymentResp) XXX_Size() int {
	return m.Size()
}
func (m *InstallDeploymentResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallDeploymentResp.DiscardUnknown(m)
}

var xxx_messageInfo_InstallDeploymentResp proto.InternalMessageInfo

func (m *InstallDeploymentResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *InstallDeploymentResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type AddNode struct {
	SetID       int32  `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID      int32  `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
	Host        string `protobuf:"bytes,3,opt,name=host" json:"host"`
	ServicePort int32  `protobuf:"varint,4,opt,name=servicePort" json:"servicePort"`
	RaftPort    int32  `protobuf:"varint,5,opt,name=raftPort" json:"raftPort"`
}

func (m *AddNode) Reset()      { *m = AddNode{} }
func (*AddNode) ProtoMessage() {}
func (*AddNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{10}
}
func (m *AddNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNode.Merge(m, src)
}
func (m *AddNode) XXX_Size() int {
	return m.Size()
}
func (m *AddNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNode.DiscardUnknown(m)
}

var xxx_messageInfo_AddNode proto.InternalMessageInfo

func (m *AddNode) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *AddNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *AddNode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AddNode) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *AddNode) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

type AddNodeResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *AddNodeResp) Reset()      { *m = AddNodeResp{} }
func (*AddNodeResp) ProtoMessage() {}
func (*AddNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{11}
}
func (m *AddNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNodeResp.Merge(m, src)
}
func (m *AddNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *AddNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddNodeResp proto.InternalMessageInfo

func (m *AddNodeResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddNodeResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type RemNode struct {
	SetID  int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID int32 `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
}

func (m *RemNode) Reset()      { *m = RemNode{} }
func (*RemNode) ProtoMessage() {}
func (*RemNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{12}
}
func (m *RemNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemNode.Merge(m, src)
}
func (m *RemNode) XXX_Size() int {
	return m.Size()
}
func (m *RemNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemNode.DiscardUnknown(m)
}

var xxx_messageInfo_RemNode proto.InternalMessageInfo

func (m *RemNode) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *RemNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type RemNodeResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *RemNodeResp) Reset()      { *m = RemNodeResp{} }
func (*RemNodeResp) ProtoMessage() {}
func (*RemNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{13}
}
func (m *RemNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemNodeResp.Merge(m, src)
}
func (m *RemNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *RemNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemNodeResp proto.InternalMessageInfo

func (m *RemNodeResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RemNodeResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type KvnodeBoot struct {
	NodeID int32 `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
}

func (m *KvnodeBoot) Reset()      { *m = KvnodeBoot{} }
func (*KvnodeBoot) ProtoMessage() {}
func (*KvnodeBoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{14}
}
func (m *KvnodeBoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeBoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeBoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeBoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeBoot.Merge(m, src)
}
func (m *KvnodeBoot) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeBoot) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeBoot.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeBoot proto.InternalMessageInfo

func (m *KvnodeBoot) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type StoreInfo struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	RaftCluster string `protobuf:"bytes,2,opt,name=raftCluster" json:"raftCluster"`
	Slots       []byte `protobuf:"bytes,3,opt,name=slots" json:"slots"`
}

func (m *StoreInfo) Reset()      { *m = StoreInfo{} }
func (*StoreInfo) ProtoMessage() {}
func (*StoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{15}
}
func (m *StoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreInfo.Merge(m, src)
}
func (m *StoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *StoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StoreInfo proto.InternalMessageInfo

func (m *StoreInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreInfo) GetRaftCluster() string {
	if m != nil {
		return m.RaftCluster
	}
	return ""
}

func (m *StoreInfo) GetSlots() []byte {
	if m != nil {
		return m.Slots
	}
	return nil
}

type KvnodeBootResp struct {
	Ok          bool         `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason      string       `protobuf:"bytes,2,opt,name=reason" json:"reason"`
	ServiceHost string       `protobuf:"bytes,3,opt,name=serviceHost" json:"serviceHost"`
	ServicePort int32        `protobuf:"varint,4,opt,name=servicePort" json:"servicePort"`
	RaftPort    int32        `protobuf:"varint,5,opt,name=raftPort" json:"raftPort"`
	Stores      []*StoreInfo `protobuf:"bytes,6,rep,name=stores" json:"stores,omitempty"`
	MetaVersion int64        `protobuf:"varint,7,opt,name=metaVersion" json:"metaVersion"`
	Meta        []byte       `protobuf:"bytes,8,opt,name=meta" json:"meta"`
}

func (m *KvnodeBootResp) Reset()      { *m = KvnodeBootResp{} }
func (*KvnodeBootResp) ProtoMessage() {}
func (*KvnodeBootResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{16}
}
func (m *KvnodeBootResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeBootResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeBootResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeBootResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeBootResp.Merge(m, src)
}
func (m *KvnodeBootResp) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeBootResp) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeBootResp.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeBootResp proto.InternalMessageInfo

func (m *KvnodeBootResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *KvnodeBootResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *KvnodeBootResp) GetServiceHost() string {
	if m != nil {
		return m.ServiceHost
	}
	return ""
}

func (m *KvnodeBootResp) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *KvnodeBootResp) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

func (m *KvnodeBootResp) GetStores() []*StoreInfo {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *KvnodeBootResp) GetMetaVersion() int64 {
	if m != nil {
		return m.MetaVersion
	}
	return 0
}

func (m *KvnodeBootResp) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type NotifyAddNode struct {
	NodeID   int32   `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Host     string  `protobuf:"bytes,2,opt,name=host" json:"host"`
	RaftPort int32   `protobuf:"varint,3,opt,name=raftPort" json:"raftPort"`
	Stores   []int32 `protobuf:"varint,4,rep,name=stores" json:"stores,omitempty"`
}

func (m *NotifyAddNode) Reset()      { *m = NotifyAddNode{} }
func (*NotifyAddNode) ProtoMessage() {}
func (*NotifyAddNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{17}
}
func (m *NotifyAddNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyAddNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyAddNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyAddNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyAddNode.Merge(m, src)
}
func (m *NotifyAddNode) XXX_Size() int {
	return m.Size()
}
func (m *NotifyAddNode) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyAddNode.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyAddNode proto.InternalMessageInfo

func (m *NotifyAddNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NotifyAddNode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *NotifyAddNode) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

func (m *NotifyAddNode) GetStores() []int32 {
	if m != nil {
		return m.Stores
	}
	return nil
}

type NotifyAddNodeResp struct {
	NodeID int32 `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Store  int32 `protobuf:"varint,2,opt,name=store" json:"store"`
}

func (m *NotifyAddNodeResp) Reset()      { *m = NotifyAddNodeResp{} }
func (*NotifyAddNodeResp) ProtoMessage() {}
func (*NotifyAddNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{18}
}
func (m *NotifyAddNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyAddNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyAddNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyAddNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyAddNodeResp.Merge(m, src)
}
func (m *NotifyAddNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *NotifyAddNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyAddNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyAddNodeResp proto.InternalMessageInfo

func (m *NotifyAddNodeResp) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NotifyAddNodeResp) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type NotifyRemNode struct {
	NodeID int32   `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Stores []int32 `protobuf:"varint,2,rep,name=stores" json:"stores,omitempty"`
}

func (m *NotifyRemNode) Reset()      { *m = NotifyRemNode{} }
func (*NotifyRemNode) ProtoMessage() {}
func (*NotifyRemNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{19}
}
func (m *NotifyRemNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyRemNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyRemNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyRemNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRemNode.Merge(m, src)
}
func (m *NotifyRemNode) XXX_Size() int {
	return m.Size()
}
func (m *NotifyRemNode) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRemNode.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRemNode proto.InternalMessageInfo

func (m *NotifyRemNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NotifyRemNode) GetStores() []int32 {
	if m != nil {
		return m.Stores
	}
	return nil
}

type NotifyRemNodeResp struct {
	NodeID int32 `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Store  int32 `protobuf:"varint,2,opt,name=store" json:"store"`
}

func (m *NotifyRemNodeResp) Reset()      { *m = NotifyRemNodeResp{} }
func (*NotifyRemNodeResp) ProtoMessage() {}
func (*NotifyRemNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{20}
}
func (m *NotifyRemNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyRemNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyRemNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyRemNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRemNodeResp.Merge(m, src)
}
func (m *NotifyRemNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *NotifyRemNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRemNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRemNodeResp proto.InternalMessageInfo

func (m *NotifyRemNodeResp) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NotifyRemNodeResp) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type NotifySlotTransOut struct {
	Slot  int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
	Store int32 `protobuf:"varint,2,opt,name=store" json:"store"`
}

func (m *NotifySlotTransOut) Reset()      { *m = NotifySlotTransOut{} }
func (*NotifySlotTransOut) ProtoMessage() {}
func (*NotifySlotTransOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{21}
}
func (m *NotifySlotTransOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifySlotTransOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifySlotTransOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifySlotTransOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifySlotTransOut.Merge(m, src)
}
func (m *NotifySlotTransOut) XXX_Size() int {
	return m.Size()
}
func (m *NotifySlotTransOut) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifySlotTransOut.DiscardUnknown(m)
}

var xxx_messageInfo_NotifySlotTransOut proto.InternalMessageInfo

func (m *NotifySlotTransOut) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *NotifySlotTransOut) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type NotifySlotTransOutResp struct {
	Slot int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
}

func (m *NotifySlotTransOutResp) Reset()      { *m = NotifySlotTransOutResp{} }
func (*NotifySlotTransOutResp) ProtoMessage() {}
func (*NotifySlotTransOutResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{22}
}
func (m *NotifySlotTransOutResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifySlotTransOutResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifySlotTransOutResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifySlotTransOutResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifySlotTransOutResp.Merge(m, src)
}
func (m *NotifySlotTransOutResp) XXX_Size() int {
	return m.Size()
}
func (m *NotifySlotTransOutResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifySlotTransOutResp.DiscardUnknown(m)
}

var xxx_messageInfo_NotifySlotTransOutResp proto.InternalMessageInfo

func (m *NotifySlotTransOutResp) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type NotifySlotTransIn struct {
	Slot  int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
	Store int32 `protobuf:"varint,2,opt,name=store" json:"store"`
}

func (m *NotifySlotTransIn) Reset()      { *m = NotifySlotTransIn{} }
func (*NotifySlotTransIn) ProtoMessage() {}
func (*NotifySlotTransIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{23}
}
func (m *NotifySlotTransIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifySlotTransIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifySlotTransIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifySlotTransIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifySlotTransIn.Merge(m, src)
}
func (m *NotifySlotTransIn) XXX_Size() int {
	return m.Size()
}
func (m *NotifySlotTransIn) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifySlotTransIn.DiscardUnknown(m)
}

var xxx_messageInfo_NotifySlotTransIn proto.InternalMessageInfo

func (m *NotifySlotTransIn) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *NotifySlotTransIn) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type NotifySlotTransInResp struct {
	Slot int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
}

func (m *NotifySlotTransInResp) Reset()      { *m = NotifySlotTransInResp{} }
func (*NotifySlotTransInResp) ProtoMessage() {}
func (*NotifySlotTransInResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{24}
}
func (m *NotifySlotTransInResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifySlotTransInResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifySlotTransInResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifySlotTransInResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifySlotTransInResp.Merge(m, src)
}
func (m *NotifySlotTransInResp) XXX_Size() int {
	return m.Size()
}
func (m *NotifySlotTransInResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifySlotTransInResp.DiscardUnknown(m)
}

var xxx_messageInfo_NotifySlotTransInResp proto.InternalMessageInfo

func (m *NotifySlotTransInResp) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type AddSet struct {
	Set *DeploymentSet `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
}

func (m *AddSet) Reset()      { *m = AddSet{} }
func (*AddSet) ProtoMessage() {}
func (*AddSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{25}
}
func (m *AddSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSet.Merge(m, src)
}
func (m *AddSet) XXX_Size() int {
	return m.Size()
}
func (m *AddSet) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSet.DiscardUnknown(m)
}

var xxx_messageInfo_AddSet proto.InternalMessageInfo

func (m *AddSet) GetSet() *DeploymentSet {
	if m != nil {
		return m.Set
	}
	return nil
}

type AddSetResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *AddSetResp) Reset()      { *m = AddSetResp{} }
func (*AddSetResp) ProtoMessage() {}
func (*AddSetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{26}
}
func (m *AddSetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSetResp.Merge(m, src)
}
func (m *AddSetResp) XXX_Size() int {
	return m.Size()
}
func (m *AddSetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSetResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddSetResp proto.InternalMessageInfo

func (m *AddSetResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddSetResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type RemSet struct {
	SetID int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
}

func (m *RemSet) Reset()      { *m = RemSet{} }
func (*RemSet) ProtoMessage() {}
func (*RemSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{27}
}
func (m *RemSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemSet.Merge(m, src)
}
func (m *RemSet) XXX_Size() int {
	return m.Size()
}
func (m *RemSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RemSet.DiscardUnknown(m)
}

var xxx_messageInfo_RemSet proto.InternalMessageInfo

func (m *RemSet) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

type RemSetResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *RemSetResp) Reset()      { *m = RemSetResp{} }
func (*RemSetResp) ProtoMessage() {}
func (*RemSetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{28}
}
func (m *RemSetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemSetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemSetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemSetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemSetResp.Merge(m, src)
}
func (m *RemSetResp) XXX_Size() int {
	return m.Size()
}
func (m *RemSetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemSetResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemSetResp proto.InternalMessageInfo

func (m *RemSetResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RemSetResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type SetMarkClear struct {
	SetID int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
}

func (m *SetMarkClear) Reset()      { *m = SetMarkClear{} }
func (*SetMarkClear) ProtoMessage() {}
func (*SetMarkClear) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{29}
}
func (m *SetMarkClear) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMarkClear) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMarkClear.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMarkClear) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMarkClear.Merge(m, src)
}
func (m *SetMarkClear) XXX_Size() int {
	return m.Size()
}
func (m *SetMarkClear) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMarkClear.DiscardUnknown(m)
}

var xxx_messageInfo_SetMarkClear proto.InternalMessageInfo

func (m *SetMarkClear) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

type SetMarkClearResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *SetMarkClearResp) Reset()      { *m = SetMarkClearResp{} }
func (*SetMarkClearResp) ProtoMessage() {}
func (*SetMarkClearResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{30}
}
func (m *SetMarkClearResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMarkClearResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMarkClearResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMarkClearResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMarkClearResp.Merge(m, src)
}
func (m *SetMarkClearResp) XXX_Size() int {
	return m.Size()
}
func (m *SetMarkClearResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMarkClearResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetMarkClearResp proto.InternalMessageInfo

func (m *SetMarkClearResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SetMarkClearResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type Flygate struct {
	Service      string `protobuf:"bytes,1,opt,name=service" json:"service"`
	MsgPerSecond int32  `protobuf:"varint,2,opt,name=msgPerSecond" json:"msgPerSecond"`
}

func (m *Flygate) Reset()      { *m = Flygate{} }
func (*Flygate) ProtoMessage() {}
func (*Flygate) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{31}
}
func (m *Flygate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Flygate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Flygate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Flygate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flygate.Merge(m, src)
}
func (m *Flygate) XXX_Size() int {
	return m.Size()
}
func (m *Flygate) XXX_DiscardUnknown() {
	xxx_messageInfo_Flygate.DiscardUnknown(m)
}

var xxx_messageInfo_Flygate proto.InternalMessageInfo

func (m *Flygate) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Flygate) GetMsgPerSecond() int32 {
	if m != nil {
		return m.MsgPerSecond
	}
	return 0
}

type GetFlyGateList struct {
}

func (m *GetFlyGateList) Reset()      { *m = GetFlyGateList{} }
func (*GetFlyGateList) ProtoMessage() {}
func (*GetFlyGateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{32}
}
func (m *GetFlyGateList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFlyGateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFlyGateList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFlyGateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlyGateList.Merge(m, src)
}
func (m *GetFlyGateList) XXX_Size() int {
	return m.Size()
}
func (m *GetFlyGateList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlyGateList.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlyGateList proto.InternalMessageInfo

type GetFlyGateListResp struct {
	List []*Flygate `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *GetFlyGateListResp) Reset()      { *m = GetFlyGateListResp{} }
func (*GetFlyGateListResp) ProtoMessage() {}
func (*GetFlyGateListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{33}
}
func (m *GetFlyGateListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFlyGateListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFlyGateListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFlyGateListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlyGateListResp.Merge(m, src)
}
func (m *GetFlyGateListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetFlyGateListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlyGateListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlyGateListResp proto.InternalMessageInfo

func (m *GetFlyGateListResp) GetList() []*Flygate {
	if m != nil {
		return m.List
	}
	return nil
}

type FlyGateHeartBeat struct {
	GateService  string `protobuf:"bytes,1,opt,name=gateService" json:"gateService"`
	Token        string `protobuf:"bytes,2,opt,name=token" json:"token"`
	MsgPerSecond int32  `protobuf:"varint,3,opt,name=msgPerSecond" json:"msgPerSecond"`
}

func (m *FlyGateHeartBeat) Reset()      { *m = FlyGateHeartBeat{} }
func (*FlyGateHeartBeat) ProtoMessage() {}
func (*FlyGateHeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{34}
}
func (m *FlyGateHeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlyGateHeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlyGateHeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlyGateHeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlyGateHeartBeat.Merge(m, src)
}
func (m *FlyGateHeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *FlyGateHeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_FlyGateHeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_FlyGateHeartBeat proto.InternalMessageInfo

func (m *FlyGateHeartBeat) GetGateService() string {
	if m != nil {
		return m.GateService
	}
	return ""
}

func (m *FlyGateHeartBeat) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *FlyGateHeartBeat) GetMsgPerSecond() int32 {
	if m != nil {
		return m.MsgPerSecond
	}
	return 0
}

type ChangeFlyGate struct {
	CurrentGate      string `protobuf:"bytes,1,opt,name=currentGate" json:"currentGate"`
	MsgSendPerSecond int32  `protobuf:"varint,2,opt,name=msgSendPerSecond" json:"msgSendPerSecond"`
}

func (m *ChangeFlyGate) Reset()      { *m = ChangeFlyGate{} }
func (*ChangeFlyGate) ProtoMessage() {}
func (*ChangeFlyGate) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{35}
}
func (m *ChangeFlyGate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeFlyGate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeFlyGate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeFlyGate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeFlyGate.Merge(m, src)
}
func (m *ChangeFlyGate) XXX_Size() int {
	return m.Size()
}
func (m *ChangeFlyGate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeFlyGate.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeFlyGate proto.InternalMessageInfo

func (m *ChangeFlyGate) GetCurrentGate() string {
	if m != nil {
		return m.CurrentGate
	}
	return ""
}

func (m *ChangeFlyGate) GetMsgSendPerSecond() int32 {
	if m != nil {
		return m.MsgSendPerSecond
	}
	return 0
}

type ChangeFlyGateResp struct {
	Ok      bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Service string `protobuf:"bytes,2,opt,name=service" json:"service"`
}

func (m *ChangeFlyGateResp) Reset()      { *m = ChangeFlyGateResp{} }
func (*ChangeFlyGateResp) ProtoMessage() {}
func (*ChangeFlyGateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{36}
}
func (m *ChangeFlyGateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeFlyGateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeFlyGateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeFlyGateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeFlyGateResp.Merge(m, src)
}
func (m *ChangeFlyGateResp) XXX_Size() int {
	return m.Size()
}
func (m *ChangeFlyGateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeFlyGateResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeFlyGateResp proto.InternalMessageInfo

func (m *ChangeFlyGateResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ChangeFlyGateResp) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type SetMeta struct {
	Meta []byte `protobuf:"bytes,1,opt,name=meta" json:"meta"`
}

func (m *SetMeta) Reset()      { *m = SetMeta{} }
func (*SetMeta) ProtoMessage() {}
func (*SetMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{37}
}
func (m *SetMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMeta.Merge(m, src)
}
func (m *SetMeta) XXX_Size() int {
	return m.Size()
}
func (m *SetMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SetMeta proto.InternalMessageInfo

func (m *SetMeta) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type SetMetaResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *SetMetaResp) Reset()      { *m = SetMetaResp{} }
func (*SetMetaResp) ProtoMessage() {}
func (*SetMetaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{38}
}
func (m *SetMetaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMetaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMetaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMetaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMetaResp.Merge(m, src)
}
func (m *SetMetaResp) XXX_Size() int {
	return m.Size()
}
func (m *SetMetaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMetaResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetMetaResp proto.InternalMessageInfo

func (m *SetMetaResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SetMetaResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MetaFiled struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Type    string `protobuf:"bytes,2,opt,name=type" json:"type"`
	Default string `protobuf:"bytes,3,opt,name=default" json:"default"`
}

func (m *MetaFiled) Reset()      { *m = MetaFiled{} }
func (*MetaFiled) ProtoMessage() {}
func (*MetaFiled) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{39}
}
func (m *MetaFiled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaFiled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaFiled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaFiled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaFiled.Merge(m, src)
}
func (m *MetaFiled) XXX_Size() int {
	return m.Size()
}
func (m *MetaFiled) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaFiled.DiscardUnknown(m)
}

var xxx_messageInfo_MetaFiled proto.InternalMessageInfo

func (m *MetaFiled) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetaFiled) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetaFiled) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

type MetaTable struct {
	Name   string       `protobuf:"bytes,1,opt,name=name" json:"name"`
	Fields []*MetaFiled `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (m *MetaTable) Reset()      { *m = MetaTable{} }
func (*MetaTable) ProtoMessage() {}
func (*MetaTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{40}
}
func (m *MetaTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaTable.Merge(m, src)
}
func (m *MetaTable) XXX_Size() int {
	return m.Size()
}
func (m *MetaTable) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaTable.DiscardUnknown(m)
}

var xxx_messageInfo_MetaTable proto.InternalMessageInfo

func (m *MetaTable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetaTable) GetFields() []*MetaFiled {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateMeta struct {
	Updates []*MetaTable `protobuf:"bytes,1,rep,name=updates" json:"updates,omitempty"`
}

func (m *UpdateMeta) Reset()      { *m = UpdateMeta{} }
func (*UpdateMeta) ProtoMessage() {}
func (*UpdateMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{41}
}
func (m *UpdateMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMeta.Merge(m, src)
}
func (m *UpdateMeta) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMeta.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMeta proto.InternalMessageInfo

func (m *UpdateMeta) GetUpdates() []*MetaTable {
	if m != nil {
		return m.Updates
	}
	return nil
}

type UpdateMetaResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *UpdateMetaResp) Reset()      { *m = UpdateMetaResp{} }
func (*UpdateMetaResp) ProtoMessage() {}
func (*UpdateMetaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{42}
}
func (m *UpdateMetaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMetaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMetaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMetaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMetaResp.Merge(m, src)
}
func (m *UpdateMetaResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMetaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMetaResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMetaResp proto.InternalMessageInfo

func (m *UpdateMetaResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *UpdateMetaResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type GetMeta struct {
}

func (m *GetMeta) Reset()      { *m = GetMeta{} }
func (*GetMeta) ProtoMessage() {}
func (*GetMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{43}
}
func (m *GetMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMeta.Merge(m, src)
}
func (m *GetMeta) XXX_Size() int {
	return m.Size()
}
func (m *GetMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMeta.DiscardUnknown(m)
}

var xxx_messageInfo_GetMeta proto.InternalMessageInfo

type GetMetaResp struct {
	Version int64  `protobuf:"varint,1,opt,name=version" json:"version"`
	Meta    []byte `protobuf:"bytes,2,opt,name=meta" json:"meta"`
}

func (m *GetMetaResp) Reset()      { *m = GetMetaResp{} }
func (*GetMetaResp) ProtoMessage() {}
func (*GetMetaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{44}
}
func (m *GetMetaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetaResp.Merge(m, src)
}
func (m *GetMetaResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMetaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetaResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetaResp proto.InternalMessageInfo

func (m *GetMetaResp) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetMetaResp) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type NotifyUpdateMeta struct {
	Store   int32  `protobuf:"varint,1,opt,name=store" json:"store"`
	Version int64  `protobuf:"varint,2,opt,name=version" json:"version"`
	Meta    []byte `protobuf:"bytes,3,opt,name=meta" json:"meta"`
}

func (m *NotifyUpdateMeta) Reset()      { *m = NotifyUpdateMeta{} }
func (*NotifyUpdateMeta) ProtoMessage() {}
func (*NotifyUpdateMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{45}
}
func (m *NotifyUpdateMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyUpdateMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyUpdateMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyUpdateMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyUpdateMeta.Merge(m, src)
}
func (m *NotifyUpdateMeta) XXX_Size() int {
	return m.Size()
}
func (m *NotifyUpdateMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyUpdateMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyUpdateMeta proto.InternalMessageInfo

func (m *NotifyUpdateMeta) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *NotifyUpdateMeta) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *NotifyUpdateMeta) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type NotifyUpdateMetaResp struct {
	Store   int32 `protobuf:"varint,1,opt,name=store" json:"store"`
	Version int64 `protobuf:"varint,2,opt,name=version" json:"version"`
}

func (m *NotifyUpdateMetaResp) Reset()      { *m = NotifyUpdateMetaResp{} }
func (*NotifyUpdateMetaResp) ProtoMessage() {}
func (*NotifyUpdateMetaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{46}
}
func (m *NotifyUpdateMetaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyUpdateMetaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyUpdateMetaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyUpdateMetaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyUpdateMetaResp.Merge(m, src)
}
func (m *NotifyUpdateMetaResp) XXX_Size() int {
	return m.Size()
}
func (m *NotifyUpdateMetaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyUpdateMetaResp.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyUpdateMetaResp proto.InternalMessageInfo

func (m *NotifyUpdateMetaResp) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *NotifyUpdateMetaResp) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.ServerCmdType", ServerCmdType_name, ServerCmdType_value)
	proto.RegisterType((*QueryRouteInfo)(nil), "proto.queryRouteInfo")
	proto.RegisterType((*RouteInfoKvNode)(nil), "proto.routeInfoKvNode")
	proto.RegisterType((*RouteInfoSet)(nil), "proto.routeInfoSet")
	proto.RegisterType((*QueryRouteInfoResp)(nil), "proto.queryRouteInfoResp")
	proto.RegisterType((*QueryLeader)(nil), "proto.query_leader")
	proto.RegisterType((*QueryLeaderResp)(nil), "proto.query_leader_resp")
	proto.RegisterType((*DeploymentKvnode)(nil), "proto.deploymentKvnode")
	proto.RegisterType((*DeploymentSet)(nil), "proto.deploymentSet")
	proto.RegisterType((*InstallDeployment)(nil), "proto.installDeployment")
	proto.RegisterType((*InstallDeploymentResp)(nil), "proto.installDeploymentResp")
	proto.RegisterType((*AddNode)(nil), "proto.addNode")
	proto.RegisterType((*AddNodeResp)(nil), "proto.addNodeResp")
	proto.RegisterType((*RemNode)(nil), "proto.remNode")
	proto.RegisterType((*RemNodeResp)(nil), "proto.remNodeResp")
	proto.RegisterType((*KvnodeBoot)(nil), "proto.kvnodeBoot")
	proto.RegisterType((*StoreInfo)(nil), "proto.storeInfo")
	proto.RegisterType((*KvnodeBootResp)(nil), "proto.kvnodeBootResp")
	proto.RegisterType((*NotifyAddNode)(nil), "proto.notifyAddNode")
	proto.RegisterType((*NotifyAddNodeResp)(nil), "proto.notifyAddNodeResp")
	proto.RegisterType((*NotifyRemNode)(nil), "proto.notifyRemNode")
	proto.RegisterType((*NotifyRemNodeResp)(nil), "proto.notifyRemNodeResp")
	proto.RegisterType((*NotifySlotTransOut)(nil), "proto.notifySlotTransOut")
	proto.RegisterType((*NotifySlotTransOutResp)(nil), "proto.notifySlotTransOutResp")
	proto.RegisterType((*NotifySlotTransIn)(nil), "proto.notifySlotTransIn")
	proto.RegisterType((*NotifySlotTransInResp)(nil), "proto.notifySlotTransInResp")
	proto.RegisterType((*AddSet)(nil), "proto.addSet")
	proto.RegisterType((*AddSetResp)(nil), "proto.addSetResp")
	proto.RegisterType((*RemSet)(nil), "proto.remSet")
	proto.RegisterType((*RemSetResp)(nil), "proto.remSetResp")
	proto.RegisterType((*SetMarkClear)(nil), "proto.setMarkClear")
	proto.RegisterType((*SetMarkClearResp)(nil), "proto.setMarkClearResp")
	proto.RegisterType((*Flygate)(nil), "proto.flygate")
	proto.RegisterType((*GetFlyGateList)(nil), "proto.getFlyGateList")
	proto.RegisterType((*GetFlyGateListResp)(nil), "proto.getFlyGateListResp")
	proto.RegisterType((*FlyGateHeartBeat)(nil), "proto.flyGateHeartBeat")
	proto.RegisterType((*ChangeFlyGate)(nil), "proto.changeFlyGate")
	proto.RegisterType((*ChangeFlyGateResp)(nil), "proto.changeFlyGateResp")
	proto.RegisterType((*SetMeta)(nil), "proto.setMeta")
	proto.RegisterType((*SetMetaResp)(nil), "proto.setMetaResp")
	proto.RegisterType((*MetaFiled)(nil), "proto.metaFiled")
	proto.RegisterType((*MetaTable)(nil), "proto.metaTable")
	proto.RegisterType((*UpdateMeta)(nil), "proto.updateMeta")
	proto.RegisterType((*UpdateMetaResp)(nil), "proto.updateMetaResp")
	proto.RegisterType((*GetMeta)(nil), "proto.getMeta")
	proto.RegisterType((*GetMetaResp)(nil), "proto.getMetaResp")
	proto.RegisterType((*NotifyUpdateMeta)(nil), "proto.notifyUpdateMeta")
	proto.RegisterType((*NotifyUpdateMetaResp)(nil), "proto.notifyUpdateMetaResp")
}

func init() { proto.RegisterFile("flyfish_server.proto", fileDescriptor_03085fc3fc38bb42) }

var fileDescriptor_03085fc3fc38bb42 = []byte{
	// 1481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcb, 0x73, 0x1b, 0x45,
	0x13, 0xf7, 0xec, 0xca, 0x52, 0xdc, 0x92, 0xe5, 0xf1, 0x44, 0x76, 0x94, 0x7c, 0xa9, 0xfd, 0x5c,
	0xfb, 0x7d, 0x15, 0x54, 0xae, 0x22, 0x24, 0x39, 0xe5, 0x42, 0x15, 0xb6, 0x83, 0x1d, 0xe3, 0x44,
	0x49, 0x56, 0x81, 0x03, 0x17, 0xd7, 0xe2, 0x1d, 0xc9, 0xc2, 0xab, 0x5d, 0x67, 0x77, 0xe4, 0x2a,
	0x1d, 0xa8, 0x0a, 0x57, 0x4e, 0x1c, 0x38, 0x41, 0xb8, 0x70, 0x81, 0xbf, 0x00, 0xf8, 0x13, 0x72,
	0x4c, 0xf1, 0x0c, 0xcf, 0xc2, 0xca, 0x85, 0x63, 0xfe, 0x04, 0xaa, 0x67, 0x1f, 0x9a, 0x95, 0x64,
	0x99, 0x52, 0xe0, 0x64, 0x6d, 0x77, 0x4f, 0x3f, 0x7e, 0xdd, 0xd3, 0xdd, 0x63, 0xa8, 0x34, 0xdd,
	0x5e, 0xb3, 0x1d, 0xee, 0xef, 0x86, 0x3c, 0x38, 0xe2, 0xc1, 0xe5, 0xc3, 0xc0, 0x17, 0x3e, 0x9b,
	0x95, 0x7f, 0x2e, 0x54, 0x5a, 0x7e, 0xcb, 0x97, 0x3f, 0x5f, 0xc1, 0x5f, 0x11, 0xd3, 0xbc, 0x01,
	0xe5, 0x07, 0x5d, 0x1e, 0xf4, 0x2c, 0xbf, 0x2b, 0xf8, 0xb6, 0xd7, 0xf4, 0x99, 0x01, 0x85, 0x23,
	0x1e, 0x84, 0x6d, 0xdf, 0xab, 0x92, 0x15, 0x52, 0xd3, 0xd7, 0x73, 0x8f, 0x7f, 0xff, 0xef, 0x8c,
	0x95, 0x10, 0x19, 0x83, 0x5c, 0xc8, 0x45, 0x58, 0xd5, 0x56, 0xf4, 0xda, 0xac, 0x25, 0x7f, 0x9b,
	0x0f, 0x60, 0x21, 0x48, 0x14, 0xec, 0x1c, 0xd5, 0x7d, 0x87, 0xb3, 0x8b, 0x90, 0xf7, 0x7c, 0x87,
	0x6f, 0xdf, 0x90, 0x5a, 0x66, 0x63, 0x2d, 0x31, 0x8d, 0x55, 0x21, 0xb7, 0xef, 0x87, 0xa2, 0xaa,
	0xad, 0x90, 0xda, 0x5c, 0xcc, 0x93, 0x14, 0x76, 0x09, 0x8a, 0xe8, 0x7d, 0x7b, 0x8f, 0xdf, 0xf5,
	0x03, 0x51, 0xd5, 0x95, 0xc3, 0x2a, 0xc3, 0xfc, 0x80, 0x40, 0x29, 0xb5, 0xd9, 0xe0, 0x82, 0x5d,
	0x80, 0xd9, 0x90, 0x8b, 0x21, 0x7b, 0x11, 0x89, 0x2d, 0x43, 0x3e, 0x14, 0x7e, 0xc0, 0x13, 0xaf,
	0xe3, 0x2f, 0x56, 0x81, 0xd9, 0xd0, 0xf5, 0x45, 0x58, 0xd5, 0x57, 0xf4, 0x5a, 0xc9, 0x8a, 0x3e,
	0xd8, 0x15, 0x28, 0x1c, 0x1c, 0xa1, 0xa3, 0x61, 0x35, 0xb7, 0xa2, 0xd7, 0x8a, 0xd7, 0x96, 0x23,
	0xb0, 0x2e, 0x0f, 0xc5, 0x68, 0x25, 0x62, 0xe6, 0x7b, 0xc0, 0xb2, 0x28, 0x5a, 0x3c, 0x3c, 0x64,
	0x2f, 0xc5, 0x48, 0x11, 0xa9, 0xe4, 0xec, 0xb0, 0x92, 0x06, 0x17, 0x11, 0x7c, 0xcc, 0x00, 0x08,
	0x78, 0xc7, 0x3f, 0xe2, 0x8d, 0x01, 0xb0, 0x0a, 0x45, 0x4d, 0x89, 0x3e, 0x26, 0x25, 0xe6, 0x2a,
	0x94, 0xa4, 0xf9, 0x5d, 0x97, 0xdb, 0x0e, 0x0f, 0x24, 0x14, 0x18, 0xe0, 0x10, 0x14, 0x48, 0x32,
	0xaf, 0xc2, 0xa2, 0x2a, 0xbb, 0x1b, 0xa0, 0xa7, 0x17, 0x21, 0x1f, 0x7d, 0x66, 0x93, 0x15, 0xd1,
	0xcc, 0x8f, 0x08, 0x50, 0x87, 0x1f, 0xba, 0x7e, 0xaf, 0xc3, 0x3d, 0xb1, 0x23, 0x63, 0xfe, 0xb7,
	0xf3, 0xcb, 0x56, 0xe0, 0x4c, 0x60, 0x37, 0x85, 0x14, 0xca, 0x29, 0x42, 0x29, 0xd5, 0x7c, 0x1b,
	0xe6, 0x07, 0x5e, 0x9d, 0x56, 0x01, 0x2f, 0xc3, 0x6c, 0x94, 0x51, 0x4d, 0x26, 0xe3, 0x5c, 0x9c,
	0x8c, 0xe1, 0xb0, 0xac, 0x48, 0xca, 0x7c, 0x15, 0x16, 0xdb, 0x5e, 0x28, 0x6c, 0xd7, 0xbd, 0x91,
	0x4a, 0xb0, 0x5a, 0x26, 0x9f, 0x95, 0x11, 0x15, 0x69, 0x42, 0xcd, 0x1d, 0x58, 0x1a, 0x39, 0x2e,
	0x4b, 0xa2, 0x02, 0x9a, 0x7f, 0x20, 0xfd, 0x3b, 0x13, 0xfb, 0xa7, 0xf9, 0x07, 0x88, 0x65, 0xc0,
	0xed, 0xd0, 0xf7, 0x32, 0x78, 0xc5, 0x34, 0xf3, 0x73, 0x02, 0x05, 0xdb, 0x71, 0xe4, 0xad, 0x9a,
	0x14, 0xe2, 0x20, 0x23, 0xda, 0x84, 0x8c, 0xe8, 0xa7, 0x65, 0x24, 0xf7, 0x77, 0x32, 0x32, 0x3b,
	0x36, 0x23, 0x6b, 0x50, 0x8c, 0x1d, 0x9d, 0x3a, 0xd8, 0x0d, 0x28, 0x04, 0xbc, 0xf3, 0x62, 0xb1,
	0xa2, 0x1f, 0xb1, 0x92, 0xa9, 0xfd, 0x58, 0x05, 0x88, 0x2e, 0xf7, 0xba, 0xef, 0x8b, 0xc9, 0xc5,
	0x6e, 0x72, 0x98, 0x93, 0x77, 0x4b, 0xb6, 0xcf, 0x0a, 0x68, 0x6d, 0x27, 0x23, 0xa6, 0xb5, 0x1d,
	0xc4, 0x18, 0x51, 0xda, 0x70, 0xbb, 0xa1, 0xe0, 0x41, 0xc6, 0xa2, 0xca, 0x90, 0x31, 0xc7, 0x0d,
	0x89, 0xd4, 0x4a, 0x69, 0xcc, 0x48, 0x32, 0x3f, 0xd3, 0xa0, 0x3c, 0xf0, 0x69, 0xda, 0xc8, 0x94,
	0x74, 0xdf, 0x1c, 0xae, 0x07, 0x95, 0xf1, 0xcf, 0x95, 0x05, 0xab, 0xa5, 0xdd, 0x37, 0x2f, 0x6f,
	0x0e, 0x8d, 0x6f, 0x4e, 0x0a, 0x5a, 0xda, 0x8f, 0x2f, 0x41, 0xb1, 0xc3, 0x85, 0xfd, 0x56, 0xdc,
	0xec, 0x0a, 0x4a, 0xb3, 0x53, 0x19, 0x58, 0xcc, 0xf8, 0x59, 0x3d, 0xa3, 0xa0, 0x24, 0x29, 0xe6,
	0xfb, 0x04, 0xe6, 0x3d, 0x5f, 0xb4, 0x9b, 0xbd, 0xb5, 0xf8, 0xca, 0x4c, 0xdb, 0xa8, 0xd4, 0xb8,
	0xf4, 0xb1, 0x71, 0x0d, 0xa6, 0x4a, 0x4e, 0x9d, 0x2a, 0xe6, 0x6d, 0x58, 0xcc, 0xb8, 0x60, 0xc5,
	0x2d, 0x76, 0x82, 0x1b, 0x69, 0xc7, 0xd6, 0x46, 0x3b, 0xf6, 0xeb, 0x49, 0x44, 0x56, 0x7c, 0x31,
	0x26, 0xab, 0x3a, 0x61, 0xd6, 0x0d, 0xbc, 0xb2, 0x94, 0xab, 0x31, 0xbd, 0x57, 0x6f, 0x00, 0x8b,
	0xd4, 0x35, 0x5c, 0x5f, 0xdc, 0x0f, 0x6c, 0x2f, 0xbc, 0xd3, 0x15, 0x08, 0x27, 0x16, 0x6b, 0x46,
	0x9b, 0xa4, 0x4c, 0xd4, 0x75, 0x0d, 0x96, 0x47, 0x75, 0x49, 0xff, 0x4e, 0xd4, 0x67, 0x6e, 0x27,
	0xe1, 0xa4, 0x67, 0xb6, 0xbd, 0x29, 0xcd, 0x5f, 0x85, 0xa5, 0x11, 0x55, 0xa7, 0x58, 0xbf, 0x02,
	0x79, 0xdb, 0x71, 0x70, 0xe8, 0x5c, 0x02, 0x3d, 0xe4, 0x91, 0xc8, 0x49, 0x33, 0x01, 0x05, 0xcc,
	0xd7, 0x00, 0xa2, 0x13, 0x53, 0xb7, 0xa4, 0xff, 0x23, 0xb7, 0x73, 0xca, 0xa0, 0x43, 0x3b, 0x91,
	0xd4, 0x0b, 0xb4, 0xbe, 0x52, 0xc8, 0xc5, 0x6d, 0x3b, 0x38, 0xd8, 0x70, 0xb9, 0x1d, 0x4c, 0xb4,
	0xb6, 0x09, 0x54, 0x95, 0x9d, 0xda, 0x66, 0x03, 0x0a, 0x4d, 0xb7, 0xd7, 0xb2, 0x05, 0xc7, 0x65,
	0x27, 0x6e, 0x2f, 0x52, 0x47, 0x22, 0x99, 0x10, 0x59, 0x0d, 0x4a, 0x9d, 0xb0, 0x75, 0x97, 0x07,
	0x0d, 0xbe, 0xe7, 0x7b, 0x4e, 0x26, 0xa1, 0x19, 0x8e, 0x49, 0xa1, 0xdc, 0xe2, 0x62, 0xd3, 0xed,
	0x6d, 0xd9, 0x82, 0xdf, 0x6a, 0x87, 0xc2, 0xbc, 0x0e, 0x2c, 0x4b, 0x91, 0x0e, 0x9b, 0x90, 0x73,
	0xdb, 0xa1, 0x88, 0xe7, 0x7a, 0x39, 0xce, 0x61, 0xec, 0x8f, 0x25, 0x79, 0xe6, 0x43, 0x02, 0xb4,
	0x19, 0x9d, 0xbb, 0xc9, 0xed, 0x40, 0xac, 0x73, 0x5b, 0xb6, 0x48, 0x14, 0x69, 0x8c, 0x71, 0x57,
	0x65, 0x20, 0x82, 0xc2, 0x3f, 0xe0, 0xd9, 0xd0, 0x23, 0xd2, 0x48, 0x38, 0xfa, 0x89, 0xe1, 0xb4,
	0x61, 0x7e, 0x6f, 0xdf, 0xf6, 0x5a, 0x3c, 0xf6, 0x1f, 0xcd, 0xef, 0x75, 0x83, 0x80, 0x7b, 0x02,
	0x3f, 0xb3, 0xe6, 0x15, 0x06, 0xbb, 0x02, 0xb4, 0x13, 0xb6, 0x1a, 0xdc, 0x73, 0xc6, 0xa3, 0x36,
	0xc2, 0xc5, 0xcb, 0x95, 0x31, 0x35, 0x21, 0xaf, 0x4a, 0xba, 0xb4, 0x31, 0xe9, 0x32, 0xff, 0x87,
	0x7c, 0x71, 0x9b, 0x0b, 0x3b, 0xed, 0xda, 0x64, 0xa4, 0x6b, 0xaf, 0xe1, 0xac, 0x91, 0x42, 0x53,
	0x57, 0xd0, 0x2e, 0xcc, 0xa1, 0xaa, 0xcd, 0xb6, 0xcb, 0x1d, 0xb4, 0xe4, 0xd9, 0x9d, 0x2c, 0x24,
	0x92, 0x82, 0x1c, 0xd1, 0x3b, 0xcc, 0xfa, 0x2a, 0x29, 0x18, 0x88, 0xc3, 0x9b, 0x76, 0xd7, 0xcd,
	0xce, 0xc4, 0x84, 0x68, 0xde, 0x89, 0x0c, 0xdc, 0xb7, 0xdf, 0x71, 0xf9, 0x04, 0x03, 0x35, 0xc8,
	0x37, 0xdb, 0xdc, 0x75, 0x92, 0x4d, 0x33, 0x19, 0x76, 0xa9, 0x73, 0x56, 0xcc, 0x37, 0xaf, 0x03,
	0x74, 0x0f, 0x1d, 0x5b, 0x70, 0x09, 0xce, 0x2a, 0x14, 0xa2, 0xaf, 0x64, 0xbf, 0x54, 0x0f, 0x4a,
	0xa3, 0x56, 0x22, 0x80, 0x8f, 0xb6, 0xc1, 0xc9, 0xa9, 0x11, 0x9b, 0x83, 0x42, 0x2b, 0x02, 0xdd,
	0xdc, 0x82, 0x62, 0x4b, 0xc1, 0xff, 0xb4, 0x27, 0x60, 0x92, 0x48, 0x6d, 0x24, 0x91, 0xfb, 0x40,
	0xa3, 0x56, 0xfa, 0xe6, 0x20, 0xb2, 0x09, 0xaf, 0x11, 0xd5, 0x92, 0x36, 0xc9, 0x92, 0x3e, 0x62,
	0xc9, 0x82, 0xca, 0xb0, 0x25, 0xe9, 0xfb, 0x0b, 0x58, 0x5b, 0x7d, 0x94, 0x87, 0xf9, 0x86, 0x7c,
	0x3a, 0x6f, 0x74, 0x9c, 0xfb, 0x58, 0x14, 0x0b, 0x50, 0xbc, 0x87, 0xaf, 0xa5, 0x5b, 0xf2, 0x25,
	0x44, 0x09, 0x3b, 0x0b, 0x0b, 0x0a, 0x01, 0x2d, 0x52, 0x8d, 0x2d, 0xc1, 0xe2, 0xf6, 0xf0, 0xba,
	0x4f, 0x39, 0x3b, 0x0f, 0x4b, 0xdb, 0xe3, 0x5e, 0x01, 0xb4, 0xc9, 0x8a, 0x50, 0x88, 0x97, 0x03,
	0xda, 0x42, 0x23, 0xca, 0xa6, 0x40, 0xf7, 0x91, 0x1b, 0x0f, 0x69, 0xda, 0x46, 0xae, 0x32, 0xb1,
	0xe9, 0xbb, 0x0c, 0x20, 0xbf, 0x26, 0x27, 0x09, 0x3d, 0x60, 0x65, 0x80, 0xb5, 0x74, 0xaa, 0x50,
	0x17, 0x79, 0x96, 0xec, 0xfe, 0xb4, 0x83, 0x3c, 0x2b, 0x9d, 0x04, 0xd4, 0x63, 0x14, 0x4a, 0x0d,
	0xa5, 0x57, 0x53, 0xdc, 0x55, 0x69, 0x63, 0xa8, 0x7b, 0xd3, 0x43, 0xb4, 0xde, 0x88, 0x8a, 0x81,
	0x3e, 0x40, 0xeb, 0x8d, 0x41, 0x65, 0xd0, 0x00, 0xb9, 0x5b, 0x31, 0x37, 0x44, 0xee, 0x96, 0xc2,
	0x15, 0x68, 0x73, 0x90, 0x0f, 0xda, 0x65, 0x0c, 0xca, 0xd9, 0xfc, 0xd0, 0x23, 0xb6, 0x00, 0xb0,
	0x93, 0xae, 0xb1, 0xf4, 0x1b, 0xc4, 0xb4, 0xbc, 0x93, 0xd9, 0x6b, 0xe9, 0xb7, 0x84, 0x31, 0x98,
	0xaf, 0xab, 0x4b, 0x14, 0xfd, 0x8e, 0xb0, 0x65, 0x58, 0xac, 0x0f, 0x2f, 0x56, 0xf4, 0x7b, 0x45,
	0x36, 0x41, 0xed, 0x07, 0x45, 0x56, 0x05, 0xef, 0x47, 0xc2, 0xce, 0x01, 0xab, 0x8f, 0xec, 0x1a,
	0xf4, 0x29, 0x61, 0xff, 0x81, 0xe5, 0xfa, 0xd8, 0x25, 0x84, 0xfe, 0xa4, 0x68, 0x53, 0x56, 0x04,
	0xfa, 0x33, 0x61, 0x17, 0x60, 0xa9, 0x3e, 0x6e, 0x75, 0xa0, 0xbf, 0x10, 0xb6, 0x04, 0xb4, 0x3e,
	0x54, 0xa1, 0xf4, 0x57, 0xc2, 0xce, 0x43, 0xa5, 0x3e, 0xa6, 0x70, 0xe9, 0x6f, 0x12, 0x88, 0x7b,
	0x99, 0x7f, 0x23, 0xd0, 0x2f, 0x35, 0x74, 0xf8, 0xde, 0xc8, 0xff, 0x16, 0xe8, 0x57, 0x58, 0x75,
	0x74, 0x73, 0x68, 0x22, 0xd1, 0xaf, 0x35, 0x54, 0xb2, 0x95, 0x99, 0x71, 0xf4, 0x63, 0x1d, 0x95,
	0x6c, 0x8d, 0x0c, 0x3e, 0xfa, 0x89, 0x8e, 0xd0, 0x6d, 0xa8, 0x9d, 0x9e, 0x3e, 0xd2, 0x31, 0xd8,
	0x8d, 0xe1, 0xee, 0x4f, 0x3f, 0xd5, 0xd7, 0xaf, 0x3f, 0x3e, 0x36, 0xc8, 0x93, 0x63, 0x83, 0x3c,
	0x3d, 0x36, 0x66, 0x9e, 0x1f, 0x1b, 0xe4, 0x61, 0xdf, 0x20, 0x5f, 0xf4, 0x0d, 0xf2, 0xb8, 0x6f,
	0x90, 0x27, 0x7d, 0x83, 0xfc, 0xd1, 0x37, 0xc8, 0x9f, 0x7d, 0x63, 0xe6, 0x79, 0xdf, 0x20, 0x1f,
	0x3e, 0x33, 0x66, 0x9e, 0x3c, 0x33, 0x66, 0x9e, 0x3e, 0x33, 0x66, 0xfe, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0x1c, 0xac, 0x8e, 0x0b, 0x99, 0x12, 0x00, 0x00,
}

func (x ServerCmdType) String() string {
	s, ok := ServerCmdType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *QueryRouteInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRouteInfo)
	if !ok {
		that2, ok := that.(QueryRouteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.Sets) != len(that1.Sets) {
		return false
	}
	for i := range this.Sets {
		if this.Sets[i] != that1.Sets[i] {
			return false
		}
	}
	return true
}
func (this *RouteInfoKvNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteInfoKvNode)
	if !ok {
		that2, ok := that.(RouteInfoKvNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	return true
}
func (this *RouteInfoSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteInfoSet)
	if !ok {
		that2, ok := that.(RouteInfoSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if this.Stores[i] != that1.Stores[i] {
			return false
		}
	}
	if len(this.Slots) != len(that1.Slots) {
		return false
	}
	for i := range this.Slots {
		if !bytes.Equal(this.Slots[i], that1.Slots[i]) {
			return false
		}
	}
	if len(this.Kvnodes) != len(that1.Kvnodes) {
		return false
	}
	for i := range this.Kvnodes {
		if !this.Kvnodes[i].Equal(that1.Kvnodes[i]) {
			return false
		}
	}
	return true
}
func (this *QueryRouteInfoResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRouteInfoResp)
	if !ok {
		that2, ok := that.(QueryRouteInfoResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sets) != len(that1.Sets) {
		return false
	}
	for i := range this.Sets {
		if !this.Sets[i].Equal(that1.Sets[i]) {
			return false
		}
	}
	if len(this.RemoveSets) != len(that1.RemoveSets) {
		return false
	}
	for i := range this.RemoveSets {
		if this.RemoveSets[i] != that1.RemoveSets[i] {
			return false
		}
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *QueryLeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryLeader)
	if !ok {
		that2, ok := that.(QueryLeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *QueryLeaderResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryLeaderResp)
	if !ok {
		that2, ok := that.(QueryLeaderResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Leader != that1.Leader {
		return false
	}
	return true
}
func (this *DeploymentKvnode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentKvnode)
	if !ok {
		that2, ok := that.(DeploymentKvnode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	return true
}
func (this *DeploymentSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentSet)
	if !ok {
		that2, ok := that.(DeploymentSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *InstallDeployment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallDeployment)
	if !ok {
		that2, ok := that.(InstallDeployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sets) != len(that1.Sets) {
		return false
	}
	for i := range this.Sets {
		if !this.Sets[i].Equal(that1.Sets[i]) {
			return false
		}
	}
	return true
}
func (this *InstallDeploymentResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallDeploymentResp)
	if !ok {
		that2, ok := that.(InstallDeploymentResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *AddNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddNode)
	if !ok {
		that2, ok := that.(AddNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	return true
}
func (this *AddNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddNodeResp)
	if !ok {
		that2, ok := that.(AddNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *RemNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemNode)
	if !ok {
		that2, ok := that.(RemNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *RemNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemNodeResp)
	if !ok {
		that2, ok := that.(RemNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *KvnodeBoot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeBoot)
	if !ok {
		that2, ok := that.(KvnodeBoot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *StoreInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreInfo)
	if !ok {
		that2, ok := that.(StoreInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RaftCluster != that1.RaftCluster {
		return false
	}
	if !bytes.Equal(this.Slots, that1.Slots) {
		return false
	}
	return true
}
func (this *KvnodeBootResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeBootResp)
	if !ok {
		that2, ok := that.(KvnodeBootResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.ServiceHost != that1.ServiceHost {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if !this.Stores[i].Equal(that1.Stores[i]) {
			return false
		}
	}
	if this.MetaVersion != that1.MetaVersion {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *NotifyAddNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyAddNode)
	if !ok {
		that2, ok := that.(NotifyAddNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if this.Stores[i] != that1.Stores[i] {
			return false
		}
	}
	return true
}
func (this *NotifyAddNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyAddNodeResp)
	if !ok {
		that2, ok := that.(NotifyAddNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *NotifyRemNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyRemNode)
	if !ok {
		that2, ok := that.(NotifyRemNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if this.Stores[i] != that1.Stores[i] {
			return false
		}
	}
	return true
}
func (this *NotifyRemNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyRemNodeResp)
	if !ok {
		that2, ok := that.(NotifyRemNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *NotifySlotTransOut) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifySlotTransOut)
	if !ok {
		that2, ok := that.(NotifySlotTransOut)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *NotifySlotTransOutResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifySlotTransOutResp)
	if !ok {
		that2, ok := that.(NotifySlotTransOutResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *NotifySlotTransIn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifySlotTransIn)
	if !ok {
		that2, ok := that.(NotifySlotTransIn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *NotifySlotTransInResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifySlotTransInResp)
	if !ok {
		that2, ok := that.(NotifySlotTransInResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *AddSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddSet)
	if !ok {
		that2, ok := that.(AddSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Set.Equal(that1.Set) {
		return false
	}
	return true
}
func (this *AddSetResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddSetResp)
	if !ok {
		that2, ok := that.(AddSetResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *RemSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemSet)
	if !ok {
		that2, ok := that.(RemSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	return true
}
func (this *RemSetResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemSetResp)
	if !ok {
		that2, ok := that.(RemSetResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *SetMarkClear) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMarkClear)
	if !ok {
		that2, ok := that.(SetMarkClear)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	return true
}
func (this *SetMarkClearResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMarkClearResp)
	if !ok {
		that2, ok := that.(SetMarkClearResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *Flygate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Flygate)
	if !ok {
		that2, ok := that.(Flygate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.MsgPerSecond != that1.MsgPerSecond {
		return false
	}
	return true
}
func (this *GetFlyGateList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFlyGateList)
	if !ok {
		that2, ok := that.(GetFlyGateList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetFlyGateListResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFlyGateListResp)
	if !ok {
		that2, ok := that.(GetFlyGateListResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *FlyGateHeartBeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlyGateHeartBeat)
	if !ok {
		that2, ok := that.(FlyGateHeartBeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GateService != that1.GateService {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.MsgPerSecond != that1.MsgPerSecond {
		return false
	}
	return true
}
func (this *ChangeFlyGate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeFlyGate)
	if !ok {
		that2, ok := that.(ChangeFlyGate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CurrentGate != that1.CurrentGate {
		return false
	}
	if this.MsgSendPerSecond != that1.MsgSendPerSecond {
		return false
	}
	return true
}
func (this *ChangeFlyGateResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeFlyGateResp)
	if !ok {
		that2, ok := that.(ChangeFlyGateResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	return true
}
func (this *SetMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMeta)
	if !ok {
		that2, ok := that.(SetMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *SetMetaResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMetaResp)
	if !ok {
		that2, ok := that.(SetMetaResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *MetaFiled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaFiled)
	if !ok {
		that2, ok := that.(MetaFiled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Default != that1.Default {
		return false
	}
	return true
}
func (this *MetaTable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaTable)
	if !ok {
		that2, ok := that.(MetaTable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMeta)
	if !ok {
		that2, ok := that.(UpdateMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Updates) != len(that1.Updates) {
		return false
	}
	for i := range this.Updates {
		if !this.Updates[i].Equal(that1.Updates[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateMetaResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMetaResp)
	if !ok {
		that2, ok := that.(UpdateMetaResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *GetMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMeta)
	if !ok {
		that2, ok := that.(GetMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetMetaResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMetaResp)
	if !ok {
		that2, ok := that.(GetMetaResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *NotifyUpdateMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyUpdateMeta)
	if !ok {
		that2, ok := that.(NotifyUpdateMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *NotifyUpdateMetaResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyUpdateMetaResp)
	if !ok {
		that2, ok := that.(NotifyUpdateMetaResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *QueryRouteInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.QueryRouteInfo{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Sets != nil {
		s = append(s, "Sets: "+fmt.Sprintf("%#v", this.Sets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteInfoKvNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.RouteInfoKvNode{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteInfoSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.RouteInfoSet{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	if this.Slots != nil {
		s = append(s, "Slots: "+fmt.Sprintf("%#v", this.Slots)+",\n")
	}
	if this.Kvnodes != nil {
		s = append(s, "Kvnodes: "+fmt.Sprintf("%#v", this.Kvnodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRouteInfoResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.QueryRouteInfoResp{")
	if this.Sets != nil {
		s = append(s, "Sets: "+fmt.Sprintf("%#v", this.Sets)+",\n")
	}
	if this.RemoveSets != nil {
		s = append(s, "RemoveSets: "+fmt.Sprintf("%#v", this.RemoveSets)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryLeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.QueryLeader{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryLeaderResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.QueryLeaderResp{")
	s = append(s, "Leader: "+fmt.Sprintf("%#v", this.Leader)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentKvnode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.DeploymentKvnode{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.DeploymentSet{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InstallDeployment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.InstallDeployment{")
	if this.Sets != nil {
		s = append(s, "Sets: "+fmt.Sprintf("%#v", this.Sets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InstallDeploymentResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.InstallDeploymentResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.AddNode{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.AddNodeResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemNode{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemNodeResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeBoot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.KvnodeBoot{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.StoreInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "RaftCluster: "+fmt.Sprintf("%#v", this.RaftCluster)+",\n")
	s = append(s, "Slots: "+fmt.Sprintf("%#v", this.Slots)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeBootResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&proto.KvnodeBootResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "ServiceHost: "+fmt.Sprintf("%#v", this.ServiceHost)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	s = append(s, "MetaVersion: "+fmt.Sprintf("%#v", this.MetaVersion)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyAddNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.NotifyAddNode{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyAddNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifyAddNodeResp{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyRemNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifyRemNode{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyRemNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifyRemNodeResp{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifySlotTransOut) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifySlotTransOut{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifySlotTransOutResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.NotifySlotTransOutResp{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifySlotTransIn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifySlotTransIn{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifySlotTransInResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.NotifySlotTransInResp{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.AddSet{")
	if this.Set != nil {
		s = append(s, "Set: "+fmt.Sprintf("%#v", this.Set)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddSetResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.AddSetResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.RemSet{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemSetResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemSetResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMarkClear) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SetMarkClear{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMarkClearResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.SetMarkClearResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Flygate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Flygate{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "MsgPerSecond: "+fmt.Sprintf("%#v", this.MsgPerSecond)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFlyGateList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.GetFlyGateList{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFlyGateListResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GetFlyGateListResp{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlyGateHeartBeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.FlyGateHeartBeat{")
	s = append(s, "GateService: "+fmt.Sprintf("%#v", this.GateService)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "MsgPerSecond: "+fmt.Sprintf("%#v", this.MsgPerSecond)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangeFlyGate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ChangeFlyGate{")
	s = append(s, "CurrentGate: "+fmt.Sprintf("%#v", this.CurrentGate)+",\n")
	s = append(s, "MsgSendPerSecond: "+fmt.Sprintf("%#v", this.MsgSendPerSecond)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangeFlyGateResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ChangeFlyGateResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SetMeta{")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMetaResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.SetMetaResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaFiled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.MetaFiled{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Default: "+fmt.Sprintf("%#v", this.Default)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaTable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.MetaTable{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.UpdateMeta{")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMetaResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.UpdateMetaResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.GetMeta{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMetaResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.GetMetaResp{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyUpdateMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.NotifyUpdateMeta{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyUpdateMetaResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifyUpdateMetaResp{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlyfishServer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueryRouteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRouteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRouteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Sets[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RouteInfoKvNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteInfoKvNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteInfoKvNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x18
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RouteInfoSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteInfoSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteInfoSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kvnodes) > 0 {
		for iNdEx := len(m.Kvnodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Kvnodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Slots) > 0 {
		for iNdEx := len(m.Slots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Slots[iNdEx])
			copy(dAtA[i:], m.Slots[iNdEx])
			i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Slots[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Stores[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *QueryRouteInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRouteInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRouteInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x18
	if len(m.RemoveSets) > 0 {
		for iNdEx := len(m.RemoveSets) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RemoveSets[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *QueryLeaderResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLeaderResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLeaderResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Leader))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DeploymentKvnode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentKvnode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentKvnode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x20
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x18
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DeploymentSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *InstallDeployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallDeployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallDeployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InstallDeploymentResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallDeploymentResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallDeploymentResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x28
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x20
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeBoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeBoot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeBoot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *StoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Slots != nil {
		i -= len(m.Slots)
		copy(dAtA[i:], m.Slots)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Slots)))
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.RaftCluster)
	copy(dAtA[i:], m.RaftCluster)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.RaftCluster)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeBootResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeBootResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeBootResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x42
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MetaVersion))
	i--
	dAtA[i] = 0x38
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x28
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x20
	i -= len(m.ServiceHost)
	copy(dAtA[i:], m.ServiceHost)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.ServiceHost)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifyAddNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyAddNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyAddNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Stores[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x18
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifyAddNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyAddNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyAddNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifyRemNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRemNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyRemNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Stores[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifyRemNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRemNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyRemNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifySlotTransOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifySlotTransOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifySlotTransOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifySlotTransOutResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifySlotTransOutResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifySlotTransOutResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifySlotTransIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifySlotTransIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifySlotTransIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifySlotTransInResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifySlotTransInResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifySlotTransInResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Set != nil {
		{
			size, err := m.Set.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddSetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSetResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSetResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemSetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemSetResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemSetResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SetMarkClear) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMarkClear) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMarkClear) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SetMarkClearResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMarkClearResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMarkClearResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Flygate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Flygate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Flygate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MsgPerSecond))
	i--
	dAtA[i] = 0x10
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetFlyGateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFlyGateList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFlyGateList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetFlyGateListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFlyGateListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFlyGateListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlyGateHeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlyGateHeartBeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlyGateHeartBeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MsgPerSecond))
	i--
	dAtA[i] = 0x18
	i -= len(m.Token)
	copy(dAtA[i:], m.Token)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Token)))
	i--
	dAtA[i] = 0x12
	i -= len(m.GateService)
	copy(dAtA[i:], m.GateService)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.GateService)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChangeFlyGate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeFlyGate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeFlyGate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MsgSendPerSecond))
	i--
	dAtA[i] = 0x10
	i -= len(m.CurrentGate)
	copy(dAtA[i:], m.CurrentGate)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.CurrentGate)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChangeFlyGateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeFlyGateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeFlyGateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SetMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetMetaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMetaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMetaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MetaFiled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaFiled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaFiled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Default)
	copy(dAtA[i:], m.Default)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Default)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetaTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpdateMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMetaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMetaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMetaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GetMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMetaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifyUpdateMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyUpdateMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyUpdateMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifyUpdateMetaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyUpdateMetaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyUpdateMetaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintFlyfishServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlyfishServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRouteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Version))
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			n += 1 + sovFlyfishServer(uint64(e))
		}
	}
	return n
}

func (m *RouteInfoKvNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	return n
}

func (m *RouteInfoSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			n += 1 + sovFlyfishServer(uint64(e))
		}
	}
	if len(m.Slots) > 0 {
		for _, b := range m.Slots {
			l = len(b)
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	if len(m.Kvnodes) > 0 {
		for _, e := range m.Kvnodes {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *QueryRouteInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	if len(m.RemoveSets) > 0 {
		for _, e := range m.RemoveSets {
			n += 1 + sovFlyfishServer(uint64(e))
		}
	}
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *QueryLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *QueryLeaderResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Leader))
	return n
}

func (m *DeploymentKvnode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	return n
}

func (m *DeploymentSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *InstallDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *InstallDeploymentResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *AddNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	return n
}

func (m *AddNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *RemNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	return n
}

func (m *RemNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *KvnodeBoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	return n
}

func (m *StoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Id))
	l = len(m.RaftCluster)
	n += 1 + l + sovFlyfishServer(uint64(l))
	if m.Slots != nil {
		l = len(m.Slots)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *KvnodeBootResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	l = len(m.ServiceHost)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	n += 1 + sovFlyfishServer(uint64(m.MetaVersion))
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *NotifyAddNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			n += 1 + sovFlyfishServer(uint64(e))
		}
	}
	return n
}

func (m *NotifyAddNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *NotifyRemNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			n += 1 + sovFlyfishServer(uint64(e))
		}
	}
	return n
}

func (m *NotifyRemNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *NotifySlotTransOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *NotifySlotTransOutResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *NotifySlotTransIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *NotifySlotTransInResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *AddSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *AddSetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *RemSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	return n
}

func (m *RemSetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *SetMarkClear) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	return n
}

func (m *SetMarkClearResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *Flygate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.MsgPerSecond))
	return n
}

func (m *GetFlyGateList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetFlyGateListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *FlyGateHeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GateService)
	n += 1 + l + sovFlyfishServer(uint64(l))
	l = len(m.Token)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.MsgPerSecond))
	return n
}

func (m *ChangeFlyGate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentGate)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.MsgSendPerSecond))
	return n
}

func (m *ChangeFlyGateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Service)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *SetMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *SetMetaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *MetaFiled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovFlyfishServer(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovFlyfishServer(uint64(l))
	l = len(m.Default)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *MetaTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovFlyfishServer(uint64(l))
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *UpdateMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *UpdateMetaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *GetMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMetaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Version))
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *NotifyUpdateMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	n += 1 + sovFlyfishServer(uint64(m.Version))
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *NotifyUpdateMetaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func sovFlyfishServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlyfishServer(x uint64) (n int) {
	return sovFlyfishServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueryRouteInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryRouteInfo{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Sets:` + fmt.Sprintf("%v", this.Sets) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteInfoKvNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteInfoKvNode{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteInfoSet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKvnodes := "[]*RouteInfoKvNode{"
	for _, f := range this.Kvnodes {
		repeatedStringForKvnodes += strings.Replace(fmt.Sprintf("%v", f), "RouteInfoKvNode", "RouteInfoKvNode", 1) + ","
	}
	repeatedStringForKvnodes += "}"
	s := strings.Join([]string{`&RouteInfoSet{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`Stores:` + fmt.Sprintf("%v", this.Stores) + `,`,
		`Slots:` + fmt.Sprintf("%v", this.Slots) + `,`,
		`Kvnodes:` + repeatedStringForKvnodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRouteInfoResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSets := "[]*RouteInfoSet{"
	for _, f := range this.Sets {
		repeatedStringForSets += strings.Replace(fmt.Sprintf("%v", f), "RouteInfoSet", "RouteInfoSet", 1) + ","
	}
	repeatedStringForSets += "}"
	s := strings.Join([]string{`&QueryRouteInfoResp{`,
		`Sets:` + repeatedStringForSets + `,`,
		`RemoveSets:` + fmt.Sprintf("%v", this.RemoveSets) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryLeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryLeader{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryLeaderResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryLeaderResp{`,
		`Leader:` + fmt.Sprintf("%v", this.Leader) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentKvnode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentKvnode{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentSet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*DeploymentKvnode{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(fmt.Sprintf("%v", f), "DeploymentKvnode", "DeploymentKvnode", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&DeploymentSet{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstallDeployment) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSets := "[]*DeploymentSet{"
	for _, f := range this.Sets {
		repeatedStringForSets += strings.Replace(fmt.Sprintf("%v", f), "DeploymentSet", "DeploymentSet", 1) + ","
	}
	repeatedStringForSets += "}"
	s := strings.Join([]string{`&InstallDeployment{`,
		`Sets:` + repeatedStringForSets + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstallDeploymentResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstallDeploymentResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddNode{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddNodeResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemNode{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemNodeResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeBoot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KvnodeBoot{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StoreInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StoreInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`RaftCluster:` + fmt.Sprintf("%v", this.RaftCluster) + `,`,
		`Slots:` + fmt.Sprintf("%v", this.Slots) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeBootResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStores := "[]*StoreInfo{"
	for _, f := range this.Stores {
		repeatedStringForStores += strings.Replace(fmt.Sprintf("%v", f), "StoreInfo", "StoreInfo", 1) + ","
	}
	repeatedStringForStores += "}"
	s := strings.Join([]string{`&KvnodeBootResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`ServiceHost:` + fmt.Sprintf("%v", this.ServiceHost) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`Stores:` + repeatedStringForStores + `,`,
		`MetaVersion:` + fmt.Sprintf("%v", this.MetaVersion) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyAddNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyAddNode{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`Stores:` + fmt.Sprintf("%v", this.Stores) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyAddNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyAddNodeResp{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyRemNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyRemNode{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Stores:` + fmt.Sprintf("%v", this.Stores) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyRemNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyRemNodeResp{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifySlotTransOut) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifySlotTransOut{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifySlotTransOutResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifySlotTransOutResp{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifySlotTransIn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifySlotTransIn{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifySlotTransInResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifySlotTransInResp{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddSet{`,
		`Set:` + strings.Replace(fmt.Sprintf("%v", this.Set), "DeploymentSet", "DeploymentSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddSetResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddSetResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemSet{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemSetResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemSetResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMarkClear) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMarkClear{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMarkClearResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMarkClearResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Flygate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Flygate{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`MsgPerSecond:` + fmt.Sprintf("%v", this.MsgPerSecond) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFlyGateList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFlyGateList{`,
		`}`,
	}, "")
	return s
}
func (this *GetFlyGateListResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForList := "[]*Flygate{"
	for _, f := range this.List {
		repeatedStringForList += strings.Replace(fmt.Sprintf("%v", f), "Flygate", "Flygate", 1) + ","
	}
	repeatedStringForList += "}"
	s := strings.Join([]string{`&GetFlyGateListResp{`,
		`List:` + repeatedStringForList + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlyGateHeartBeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlyGateHeartBeat{`,
		`GateService:` + fmt.Sprintf("%v", this.GateService) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`MsgPerSecond:` + fmt.Sprintf("%v", this.MsgPerSecond) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeFlyGate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeFlyGate{`,
		`CurrentGate:` + fmt.Sprintf("%v", this.CurrentGate) + `,`,
		`MsgSendPerSecond:` + fmt.Sprintf("%v", this.MsgSendPerSecond) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeFlyGateResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeFlyGateResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMeta{`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMetaResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMetaResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaFiled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetaFiled{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Default:` + fmt.Sprintf("%v", this.Default) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaTable) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*MetaFiled{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "MetaFiled", "MetaFiled", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&MetaTable{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMeta) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUpdates := "[]*MetaTable{"
	for _, f := range this.Updates {
		repeatedStringForUpdates += strings.Replace(fmt.Sprintf("%v", f), "MetaTable", "MetaTable", 1) + ","
	}
	repeatedStringForUpdates += "}"
	s := strings.Join([]string{`&UpdateMeta{`,
		`Updates:` + repeatedStringForUpdates + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMetaResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMetaResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMeta{`,
		`}`,
	}, "")
	return s
}
func (this *GetMetaResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMetaResp{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyUpdateMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyUpdateMeta{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyUpdateMetaResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyUpdateMetaResp{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlyfishServer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueryRouteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: queryRouteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: queryRouteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sets = append(m.Sets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sets) == 0 {
					m.Sets = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyfishServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sets = append(m.Sets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteInfoKvNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: routeInfoKvNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: routeInfoKvNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteInfoSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: routeInfoSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: routeInfoSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stores = append(m.Stores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stores) == 0 {
					m.Stores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyfishServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stores = append(m.Stores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots, make([]byte, postIndex-iNdEx))
			copy(m.Slots[len(m.Slots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvnodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kvnodes = append(m.Kvnodes, &RouteInfoKvNode{})
			if err := m.Kvnodes[len(m.Kvnodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRouteInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: queryRouteInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: queryRouteInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &RouteInfoSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RemoveSets = append(m.RemoveSets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RemoveSets) == 0 {
					m.RemoveSets = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyfishServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RemoveSets = append(m.RemoveSets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveSets", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_leader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_leader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLeaderResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_leader_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_leader_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			m.Leader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentKvnode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deploymentKvnode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deploymentKvnode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deploymentSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deploymentSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &DeploymentKvnode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallDeployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: installDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: installDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &DeploymentSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallDeploymentResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: installDeploymentResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: installDeploymentResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeBoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeBoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeBoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: storeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: storeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots[:0], dAtA[iNdEx:postIndex]...)
			if m.Slots == nil {
				m.Slots = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeBootResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeBootResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeBootResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, &StoreInfo{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaVersion", wireType)
			}
			m.MetaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyAddNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyAddNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyAddNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stores = append(m.Stores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stores) == 0 {
					m.Stores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyfishServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stores = append(m.Stores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyAddNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyAddNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyAddNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRemNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyRemNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyRemNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stores = append(m.Stores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stores) == 0 {
					m.Stores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyfishServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stores = append(m.Stores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRemNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyRemNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyRemNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifySlotTransOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifySlotTransOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifySlotTransOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifySlotTransOutResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifySlotTransOutResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifySlotTransOutResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifySlotTransIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifySlotTransIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifySlotTransIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifySlotTransInResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifySlotTransInResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifySlotTransInResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Set == nil {
				m.Set = &DeploymentSet{}
			}
			if err := m.Set.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addSetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addSetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemSetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remSetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remSetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMarkClear) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setMarkClear: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setMarkClear: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMarkClearResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setMarkClearResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setMarkClearResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Flygate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flygate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flygate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgPerSecond", wireType)
			}
			m.MsgPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgPerSecond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFlyGateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getFlyGateList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getFlyGateList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFlyGateListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getFlyGateListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getFlyGateListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Flygate{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlyGateHeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flyGateHeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flyGateHeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgPerSecond", wireType)
			}
			m.MsgPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgPerSecond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeFlyGate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: changeFlyGate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: changeFlyGate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentGate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentGate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSendPerSecond", wireType)
			}
			m.MsgSendPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSendPerSecond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeFlyGateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: changeFlyGateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: changeFlyGateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMetaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setMetaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setMetaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaFiled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaFiled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaFiled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Default = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &MetaFiled{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updateMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updateMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &MetaTable{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMetaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updateMetaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updateMetaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getMetaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getMetaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyUpdateMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyUpdateMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyUpdateMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyUpdateMetaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyUpdateMetaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyUpdateMetaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlyfishServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlyfishServer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFlyfishServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFlyfishServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFlyfishServer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFlyfishServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlyfishServer   = fmt.Errorf("proto: integer overflow")
)
