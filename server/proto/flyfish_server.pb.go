// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flyfish_server.proto

package proto

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ServerCmdType int32

const (
	//flygate <-> flykv
	ServerCmdType_QueryLeader     ServerCmdType = 1
	ServerCmdType_QueryLeaderResp ServerCmdType = 2
	//console <-> pd
	ServerCmdType_AddNode              ServerCmdType = 103
	ServerCmdType_AddNodeResp          ServerCmdType = 104
	ServerCmdType_RemNode              ServerCmdType = 111
	ServerCmdType_RemNodeResp          ServerCmdType = 112
	ServerCmdType_AddSet               ServerCmdType = 113
	ServerCmdType_AddSetResp           ServerCmdType = 114
	ServerCmdType_RemSet               ServerCmdType = 115
	ServerCmdType_RemSetResp           ServerCmdType = 116
	ServerCmdType_SetMarkClear         ServerCmdType = 117
	ServerCmdType_SetMarkClearResp     ServerCmdType = 118
	ServerCmdType_GetMeta              ServerCmdType = 119
	ServerCmdType_GetMetaResp          ServerCmdType = 120
	ServerCmdType_GetKvStatus          ServerCmdType = 121
	ServerCmdType_GetKvStatusResp      ServerCmdType = 122
	ServerCmdType_MetaAddTable         ServerCmdType = 123
	ServerCmdType_MetaAddTableResp     ServerCmdType = 124
	ServerCmdType_MetaAddFields        ServerCmdType = 125
	ServerCmdType_MetaAddFieldsResp    ServerCmdType = 126
	ServerCmdType_MetaRemoveTable      ServerCmdType = 127
	ServerCmdType_MetaRemoveTableResp  ServerCmdType = 128
	ServerCmdType_MetaRemoveFields     ServerCmdType = 129
	ServerCmdType_MetaRemoveFieldsResp ServerCmdType = 130
	ServerCmdType_QueryPdLeader        ServerCmdType = 131
	ServerCmdType_QueryPdLeaderResp    ServerCmdType = 132
	ServerCmdType_AddPdNode            ServerCmdType = 133
	ServerCmdType_AddPdNodeResp        ServerCmdType = 134
	ServerCmdType_RemovePdNode         ServerCmdType = 135
	ServerCmdType_RemovePdNodeResp     ServerCmdType = 136
	ServerCmdType_ListPdMembers        ServerCmdType = 137
	ServerCmdType_ListPdMembersResp    ServerCmdType = 138
	ServerCmdType_ClearDBData          ServerCmdType = 139
	ServerCmdType_ClearDBDataResp      ServerCmdType = 140
	ServerCmdType_ClearCache           ServerCmdType = 141
	ServerCmdType_ClearCacheResp       ServerCmdType = 142
	ServerCmdType_SuspendKvStore       ServerCmdType = 143
	ServerCmdType_SuspendKvStoreResp   ServerCmdType = 144
	ServerCmdType_ResumeKvStore        ServerCmdType = 145
	ServerCmdType_ResumeKvStoreResp    ServerCmdType = 146
	ServerCmdType_GetDeployment        ServerCmdType = 147
	ServerCmdType_GetDeploymentResp    ServerCmdType = 148
	//kvnode <-> pd
	ServerCmdType_KvnodeBoot          ServerCmdType = 210
	ServerCmdType_KvnodeBootResp      ServerCmdType = 211
	ServerCmdType_NotifyNodeStoreOp   ServerCmdType = 212
	ServerCmdType_NodeStoreOpOk       ServerCmdType = 213
	ServerCmdType_IsTransInReady      ServerCmdType = 214
	ServerCmdType_IsTransInReadyResp  ServerCmdType = 215
	ServerCmdType_NotifySlotTransOut  ServerCmdType = 218
	ServerCmdType_SlotTransOutOk      ServerCmdType = 219
	ServerCmdType_NotifySlotTransIn   ServerCmdType = 220
	ServerCmdType_SlotTransInOk       ServerCmdType = 221
	ServerCmdType_NotifyUpdateMeta    ServerCmdType = 222
	ServerCmdType_KvnodeReportStatus  ServerCmdType = 223
	ServerCmdType_TrasnferLeader      ServerCmdType = 224
	ServerCmdType_ClearStoreCache     ServerCmdType = 225
	ServerCmdType_NotifyMissingStores ServerCmdType = 226
	ServerCmdType_SuspendStore        ServerCmdType = 227
	ServerCmdType_ResumeStore         ServerCmdType = 228
	//flygate <-> pd
	ServerCmdType_QueryRouteInfo       ServerCmdType = 310
	ServerCmdType_QueryRouteInfoResp   ServerCmdType = 311
	ServerCmdType_FlyGateHeartBeat     ServerCmdType = 312
	ServerCmdType_GetScanTableMeta     ServerCmdType = 313
	ServerCmdType_GetScanTableMetaResp ServerCmdType = 314
	ServerCmdType_FlySqlHeartBeat      ServerCmdType = 510
	ServerCmdType_FlySqlHeartBeatResp  ServerCmdType = 511
	//client <-> pd
	ServerCmdType_GetFlyGateList      ServerCmdType = 410
	ServerCmdType_GetFlyGateListResp  ServerCmdType = 411
	ServerCmdType_GetFlySqlList       ServerCmdType = 412
	ServerCmdType_GetFlySqlListResp   ServerCmdType = 413
	ServerCmdType_OrderSequenceID     ServerCmdType = 414
	ServerCmdType_OrderSequenceIDResp ServerCmdType = 415
	//for test
	ServerCmdType_PacketTest ServerCmdType = 1000
)

var ServerCmdType_name = map[int32]string{
	1:    "QueryLeader",
	2:    "QueryLeaderResp",
	103:  "AddNode",
	104:  "AddNodeResp",
	111:  "RemNode",
	112:  "RemNodeResp",
	113:  "AddSet",
	114:  "AddSetResp",
	115:  "RemSet",
	116:  "RemSetResp",
	117:  "SetMarkClear",
	118:  "SetMarkClearResp",
	119:  "GetMeta",
	120:  "GetMetaResp",
	121:  "GetKvStatus",
	122:  "GetKvStatusResp",
	123:  "MetaAddTable",
	124:  "MetaAddTableResp",
	125:  "MetaAddFields",
	126:  "MetaAddFieldsResp",
	127:  "MetaRemoveTable",
	128:  "MetaRemoveTableResp",
	129:  "MetaRemoveFields",
	130:  "MetaRemoveFieldsResp",
	131:  "QueryPdLeader",
	132:  "QueryPdLeaderResp",
	133:  "AddPdNode",
	134:  "AddPdNodeResp",
	135:  "RemovePdNode",
	136:  "RemovePdNodeResp",
	137:  "ListPdMembers",
	138:  "ListPdMembersResp",
	139:  "ClearDBData",
	140:  "ClearDBDataResp",
	141:  "ClearCache",
	142:  "ClearCacheResp",
	143:  "SuspendKvStore",
	144:  "SuspendKvStoreResp",
	145:  "ResumeKvStore",
	146:  "ResumeKvStoreResp",
	147:  "GetDeployment",
	148:  "GetDeploymentResp",
	210:  "KvnodeBoot",
	211:  "KvnodeBootResp",
	212:  "NotifyNodeStoreOp",
	213:  "NodeStoreOpOk",
	214:  "IsTransInReady",
	215:  "IsTransInReadyResp",
	218:  "NotifySlotTransOut",
	219:  "SlotTransOutOk",
	220:  "NotifySlotTransIn",
	221:  "SlotTransInOk",
	222:  "NotifyUpdateMeta",
	223:  "KvnodeReportStatus",
	224:  "TrasnferLeader",
	225:  "ClearStoreCache",
	226:  "NotifyMissingStores",
	227:  "SuspendStore",
	228:  "ResumeStore",
	310:  "QueryRouteInfo",
	311:  "QueryRouteInfoResp",
	312:  "FlyGateHeartBeat",
	313:  "GetScanTableMeta",
	314:  "GetScanTableMetaResp",
	510:  "FlySqlHeartBeat",
	511:  "FlySqlHeartBeatResp",
	410:  "GetFlyGateList",
	411:  "GetFlyGateListResp",
	412:  "GetFlySqlList",
	413:  "GetFlySqlListResp",
	414:  "OrderSequenceID",
	415:  "OrderSequenceIDResp",
	1000: "PacketTest",
}

var ServerCmdType_value = map[string]int32{
	"QueryLeader":          1,
	"QueryLeaderResp":      2,
	"AddNode":              103,
	"AddNodeResp":          104,
	"RemNode":              111,
	"RemNodeResp":          112,
	"AddSet":               113,
	"AddSetResp":           114,
	"RemSet":               115,
	"RemSetResp":           116,
	"SetMarkClear":         117,
	"SetMarkClearResp":     118,
	"GetMeta":              119,
	"GetMetaResp":          120,
	"GetKvStatus":          121,
	"GetKvStatusResp":      122,
	"MetaAddTable":         123,
	"MetaAddTableResp":     124,
	"MetaAddFields":        125,
	"MetaAddFieldsResp":    126,
	"MetaRemoveTable":      127,
	"MetaRemoveTableResp":  128,
	"MetaRemoveFields":     129,
	"MetaRemoveFieldsResp": 130,
	"QueryPdLeader":        131,
	"QueryPdLeaderResp":    132,
	"AddPdNode":            133,
	"AddPdNodeResp":        134,
	"RemovePdNode":         135,
	"RemovePdNodeResp":     136,
	"ListPdMembers":        137,
	"ListPdMembersResp":    138,
	"ClearDBData":          139,
	"ClearDBDataResp":      140,
	"ClearCache":           141,
	"ClearCacheResp":       142,
	"SuspendKvStore":       143,
	"SuspendKvStoreResp":   144,
	"ResumeKvStore":        145,
	"ResumeKvStoreResp":    146,
	"GetDeployment":        147,
	"GetDeploymentResp":    148,
	"KvnodeBoot":           210,
	"KvnodeBootResp":       211,
	"NotifyNodeStoreOp":    212,
	"NodeStoreOpOk":        213,
	"IsTransInReady":       214,
	"IsTransInReadyResp":   215,
	"NotifySlotTransOut":   218,
	"SlotTransOutOk":       219,
	"NotifySlotTransIn":    220,
	"SlotTransInOk":        221,
	"NotifyUpdateMeta":     222,
	"KvnodeReportStatus":   223,
	"TrasnferLeader":       224,
	"ClearStoreCache":      225,
	"NotifyMissingStores":  226,
	"SuspendStore":         227,
	"ResumeStore":          228,
	"QueryRouteInfo":       310,
	"QueryRouteInfoResp":   311,
	"FlyGateHeartBeat":     312,
	"GetScanTableMeta":     313,
	"GetScanTableMetaResp": 314,
	"FlySqlHeartBeat":      510,
	"FlySqlHeartBeatResp":  511,
	"GetFlyGateList":       410,
	"GetFlyGateListResp":   411,
	"GetFlySqlList":        412,
	"GetFlySqlListResp":    413,
	"OrderSequenceID":      414,
	"OrderSequenceIDResp":  415,
	"PacketTest":           1000,
}

func (x ServerCmdType) Enum() *ServerCmdType {
	p := new(ServerCmdType)
	*p = x
	return p
}

func (x ServerCmdType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ServerCmdType_name, int32(x))
}

func (x *ServerCmdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServerCmdType_value, data, "ServerCmdType")
	if err != nil {
		return err
	}
	*x = ServerCmdType(value)
	return nil
}

func (ServerCmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{0}
}

type StoreOpType int32

const (
	StoreOpType_AddLearner     StoreOpType = 1
	StoreOpType_PromoteLearner StoreOpType = 2
	StoreOpType_RemoveStore    StoreOpType = 4
)

var StoreOpType_name = map[int32]string{
	1: "AddLearner",
	2: "PromoteLearner",
	4: "RemoveStore",
}

var StoreOpType_value = map[string]int32{
	"AddLearner":     1,
	"PromoteLearner": 2,
	"RemoveStore":    4,
}

func (x StoreOpType) Enum() *StoreOpType {
	p := new(StoreOpType)
	*p = x
	return p
}

func (x StoreOpType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(StoreOpType_name, int32(x))
}

func (x *StoreOpType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreOpType_value, data, "StoreOpType")
	if err != nil {
		return err
	}
	*x = StoreOpType(value)
	return nil
}

func (StoreOpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{1}
}

type QueryRouteInfo struct {
	Version int64 `protobuf:"varint,1,opt,name=version" json:"version"`
}

func (m *QueryRouteInfo) Reset()      { *m = QueryRouteInfo{} }
func (*QueryRouteInfo) ProtoMessage() {}
func (*QueryRouteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{0}
}
func (m *QueryRouteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRouteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRouteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRouteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteInfo.Merge(m, src)
}
func (m *QueryRouteInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryRouteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteInfo proto.InternalMessageInfo

func (m *QueryRouteInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type RouteInfoKvNode struct {
	NodeID      int32  `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Host        string `protobuf:"bytes,2,opt,name=host" json:"host"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort" json:"servicePort"`
}

func (m *RouteInfoKvNode) Reset()      { *m = RouteInfoKvNode{} }
func (*RouteInfoKvNode) ProtoMessage() {}
func (*RouteInfoKvNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{1}
}
func (m *RouteInfoKvNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteInfoKvNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteInfoKvNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteInfoKvNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteInfoKvNode.Merge(m, src)
}
func (m *RouteInfoKvNode) XXX_Size() int {
	return m.Size()
}
func (m *RouteInfoKvNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteInfoKvNode.DiscardUnknown(m)
}

var xxx_messageInfo_RouteInfoKvNode proto.InternalMessageInfo

func (m *RouteInfoKvNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *RouteInfoKvNode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RouteInfoKvNode) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

type RouteInfoSet struct {
	SetID   int32              `protobuf:"varint,1,opt,name=setID" json:"setID"`
	Stores  []int32            `protobuf:"varint,2,rep,name=stores" json:"stores,omitempty"`
	Slots   [][]byte           `protobuf:"bytes,3,rep,name=slots" json:"slots,omitempty"`
	Kvnodes []*RouteInfoKvNode `protobuf:"bytes,4,rep,name=kvnodes" json:"kvnodes,omitempty"`
}

func (m *RouteInfoSet) Reset()      { *m = RouteInfoSet{} }
func (*RouteInfoSet) ProtoMessage() {}
func (*RouteInfoSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{2}
}
func (m *RouteInfoSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteInfoSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteInfoSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteInfoSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteInfoSet.Merge(m, src)
}
func (m *RouteInfoSet) XXX_Size() int {
	return m.Size()
}
func (m *RouteInfoSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteInfoSet.DiscardUnknown(m)
}

var xxx_messageInfo_RouteInfoSet proto.InternalMessageInfo

func (m *RouteInfoSet) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *RouteInfoSet) GetStores() []int32 {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *RouteInfoSet) GetSlots() [][]byte {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *RouteInfoSet) GetKvnodes() []*RouteInfoKvNode {
	if m != nil {
		return m.Kvnodes
	}
	return nil
}

type QueryRouteInfoResp struct {
	Version int64           `protobuf:"varint,1,opt,name=version" json:"version"`
	Sets    []*RouteInfoSet `protobuf:"bytes,2,rep,name=sets" json:"sets,omitempty"`
}

func (m *QueryRouteInfoResp) Reset()      { *m = QueryRouteInfoResp{} }
func (*QueryRouteInfoResp) ProtoMessage() {}
func (*QueryRouteInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{3}
}
func (m *QueryRouteInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRouteInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRouteInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRouteInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteInfoResp.Merge(m, src)
}
func (m *QueryRouteInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryRouteInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteInfoResp proto.InternalMessageInfo

func (m *QueryRouteInfoResp) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *QueryRouteInfoResp) GetSets() []*RouteInfoSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

//查询是否store的leader,如果是返回yes=true
type QueryLeader struct {
	Store int32 `protobuf:"varint,1,opt,name=store" json:"store"`
}

func (m *QueryLeader) Reset()      { *m = QueryLeader{} }
func (*QueryLeader) ProtoMessage() {}
func (*QueryLeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{4}
}
func (m *QueryLeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLeader.Merge(m, src)
}
func (m *QueryLeader) XXX_Size() int {
	return m.Size()
}
func (m *QueryLeader) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLeader.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLeader proto.InternalMessageInfo

func (m *QueryLeader) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type QueryLeaderResp struct {
	Leader int32 `protobuf:"varint,1,opt,name=leader" json:"leader"`
}

func (m *QueryLeaderResp) Reset()      { *m = QueryLeaderResp{} }
func (*QueryLeaderResp) ProtoMessage() {}
func (*QueryLeaderResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{5}
}
func (m *QueryLeaderResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLeaderResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLeaderResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLeaderResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLeaderResp.Merge(m, src)
}
func (m *QueryLeaderResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryLeaderResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLeaderResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLeaderResp proto.InternalMessageInfo

func (m *QueryLeaderResp) GetLeader() int32 {
	if m != nil {
		return m.Leader
	}
	return 0
}

type DeploymentKvnode struct {
	NodeID      int32  `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Host        string `protobuf:"bytes,2,opt,name=host" json:"host"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort" json:"servicePort"`
	RaftPort    int32  `protobuf:"varint,4,opt,name=raftPort" json:"raftPort"`
}

func (m *DeploymentKvnode) Reset()      { *m = DeploymentKvnode{} }
func (*DeploymentKvnode) ProtoMessage() {}
func (*DeploymentKvnode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{6}
}
func (m *DeploymentKvnode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentKvnode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentKvnode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentKvnode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentKvnode.Merge(m, src)
}
func (m *DeploymentKvnode) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentKvnode) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentKvnode.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentKvnode proto.InternalMessageInfo

func (m *DeploymentKvnode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *DeploymentKvnode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DeploymentKvnode) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *DeploymentKvnode) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

type DeploymentSet struct {
	SetID int32               `protobuf:"varint,1,opt,name=setID" json:"setID"`
	Nodes []*DeploymentKvnode `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *DeploymentSet) Reset()      { *m = DeploymentSet{} }
func (*DeploymentSet) ProtoMessage() {}
func (*DeploymentSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{7}
}
func (m *DeploymentSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentSet.Merge(m, src)
}
func (m *DeploymentSet) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentSet) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentSet.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentSet proto.InternalMessageInfo

func (m *DeploymentSet) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *DeploymentSet) GetNodes() []*DeploymentKvnode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type AddNode struct {
	SetID       int32  `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID      int32  `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
	Host        string `protobuf:"bytes,3,opt,name=host" json:"host"`
	ServicePort int32  `protobuf:"varint,4,opt,name=servicePort" json:"servicePort"`
	RaftPort    int32  `protobuf:"varint,5,opt,name=raftPort" json:"raftPort"`
}

func (m *AddNode) Reset()      { *m = AddNode{} }
func (*AddNode) ProtoMessage() {}
func (*AddNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{8}
}
func (m *AddNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNode.Merge(m, src)
}
func (m *AddNode) XXX_Size() int {
	return m.Size()
}
func (m *AddNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNode.DiscardUnknown(m)
}

var xxx_messageInfo_AddNode proto.InternalMessageInfo

func (m *AddNode) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *AddNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *AddNode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AddNode) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *AddNode) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

type AddNodeResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *AddNodeResp) Reset()      { *m = AddNodeResp{} }
func (*AddNodeResp) ProtoMessage() {}
func (*AddNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{9}
}
func (m *AddNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNodeResp.Merge(m, src)
}
func (m *AddNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *AddNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddNodeResp proto.InternalMessageInfo

func (m *AddNodeResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddNodeResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type RemNode struct {
	SetID  int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID int32 `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
}

func (m *RemNode) Reset()      { *m = RemNode{} }
func (*RemNode) ProtoMessage() {}
func (*RemNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{10}
}
func (m *RemNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemNode.Merge(m, src)
}
func (m *RemNode) XXX_Size() int {
	return m.Size()
}
func (m *RemNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemNode.DiscardUnknown(m)
}

var xxx_messageInfo_RemNode proto.InternalMessageInfo

func (m *RemNode) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *RemNode) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type RemNodeResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *RemNodeResp) Reset()      { *m = RemNodeResp{} }
func (*RemNodeResp) ProtoMessage() {}
func (*RemNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{11}
}
func (m *RemNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemNodeResp.Merge(m, src)
}
func (m *RemNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *RemNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemNodeResp proto.InternalMessageInfo

func (m *RemNodeResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RemNodeResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type KvnodeBoot struct {
	NodeID int32 `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
}

func (m *KvnodeBoot) Reset()      { *m = KvnodeBoot{} }
func (*KvnodeBoot) ProtoMessage() {}
func (*KvnodeBoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{12}
}
func (m *KvnodeBoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeBoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeBoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeBoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeBoot.Merge(m, src)
}
func (m *KvnodeBoot) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeBoot) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeBoot.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeBoot proto.InternalMessageInfo

func (m *KvnodeBoot) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type StoreInfo struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	RaftCluster string `protobuf:"bytes,2,opt,name=raftCluster" json:"raftCluster"`
	Slots       []byte `protobuf:"bytes,3,opt,name=slots" json:"slots"`
	RaftID      uint64 `protobuf:"varint,4,opt,name=raftID" json:"raftID"`
}

func (m *StoreInfo) Reset()      { *m = StoreInfo{} }
func (*StoreInfo) ProtoMessage() {}
func (*StoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{13}
}
func (m *StoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreInfo.Merge(m, src)
}
func (m *StoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *StoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StoreInfo proto.InternalMessageInfo

func (m *StoreInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StoreInfo) GetRaftCluster() string {
	if m != nil {
		return m.RaftCluster
	}
	return ""
}

func (m *StoreInfo) GetSlots() []byte {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *StoreInfo) GetRaftID() uint64 {
	if m != nil {
		return m.RaftID
	}
	return 0
}

type KvnodeBootResp struct {
	Ok          bool         `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason      string       `protobuf:"bytes,2,opt,name=reason" json:"reason"`
	SetID       int32        `protobuf:"varint,3,opt,name=setID" json:"setID"`
	ServiceHost string       `protobuf:"bytes,4,opt,name=serviceHost" json:"serviceHost"`
	ServicePort int32        `protobuf:"varint,5,opt,name=servicePort" json:"servicePort"`
	RaftPort    int32        `protobuf:"varint,6,opt,name=raftPort" json:"raftPort"`
	Stores      []*StoreInfo `protobuf:"bytes,7,rep,name=stores" json:"stores,omitempty"`
	Meta        []byte       `protobuf:"bytes,8,opt,name=meta" json:"meta"`
}

func (m *KvnodeBootResp) Reset()      { *m = KvnodeBootResp{} }
func (*KvnodeBootResp) ProtoMessage() {}
func (*KvnodeBootResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{14}
}
func (m *KvnodeBootResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeBootResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeBootResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeBootResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeBootResp.Merge(m, src)
}
func (m *KvnodeBootResp) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeBootResp) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeBootResp.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeBootResp proto.InternalMessageInfo

func (m *KvnodeBootResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *KvnodeBootResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *KvnodeBootResp) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *KvnodeBootResp) GetServiceHost() string {
	if m != nil {
		return m.ServiceHost
	}
	return ""
}

func (m *KvnodeBootResp) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *KvnodeBootResp) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

func (m *KvnodeBootResp) GetStores() []*StoreInfo {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *KvnodeBootResp) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type FlySqlHeartBeat struct {
	Service     string `protobuf:"bytes,1,opt,name=service" json:"service"`
	MetaVersion int64  `protobuf:"varint,2,opt,name=metaVersion" json:"metaVersion"`
}

func (m *FlySqlHeartBeat) Reset()      { *m = FlySqlHeartBeat{} }
func (*FlySqlHeartBeat) ProtoMessage() {}
func (*FlySqlHeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{15}
}
func (m *FlySqlHeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlySqlHeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlySqlHeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlySqlHeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlySqlHeartBeat.Merge(m, src)
}
func (m *FlySqlHeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *FlySqlHeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_FlySqlHeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_FlySqlHeartBeat proto.InternalMessageInfo

func (m *FlySqlHeartBeat) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *FlySqlHeartBeat) GetMetaVersion() int64 {
	if m != nil {
		return m.MetaVersion
	}
	return 0
}

type FlySqlHeartBeatResp struct {
	Meta []byte `protobuf:"bytes,1,opt,name=meta" json:"meta"`
}

func (m *FlySqlHeartBeatResp) Reset()      { *m = FlySqlHeartBeatResp{} }
func (*FlySqlHeartBeatResp) ProtoMessage() {}
func (*FlySqlHeartBeatResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{16}
}
func (m *FlySqlHeartBeatResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlySqlHeartBeatResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlySqlHeartBeatResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlySqlHeartBeatResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlySqlHeartBeatResp.Merge(m, src)
}
func (m *FlySqlHeartBeatResp) XXX_Size() int {
	return m.Size()
}
func (m *FlySqlHeartBeatResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FlySqlHeartBeatResp.DiscardUnknown(m)
}

var xxx_messageInfo_FlySqlHeartBeatResp proto.InternalMessageInfo

func (m *FlySqlHeartBeatResp) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type NotifyNodeStoreOp struct {
	Op       int32  `protobuf:"varint,1,opt,name=op" json:"op"`
	NodeID   int32  `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
	Host     string `protobuf:"bytes,3,opt,name=host" json:"host"`
	RaftPort int32  `protobuf:"varint,4,opt,name=raftPort" json:"raftPort"`
	Port     int32  `protobuf:"varint,5,opt,name=port" json:"port"`
	Store    int32  `protobuf:"varint,6,opt,name=store" json:"store"`
	RaftID   uint64 `protobuf:"varint,7,opt,name=raftID" json:"raftID"`
}

func (m *NotifyNodeStoreOp) Reset()      { *m = NotifyNodeStoreOp{} }
func (*NotifyNodeStoreOp) ProtoMessage() {}
func (*NotifyNodeStoreOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{17}
}
func (m *NotifyNodeStoreOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyNodeStoreOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyNodeStoreOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyNodeStoreOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyNodeStoreOp.Merge(m, src)
}
func (m *NotifyNodeStoreOp) XXX_Size() int {
	return m.Size()
}
func (m *NotifyNodeStoreOp) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyNodeStoreOp.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyNodeStoreOp proto.InternalMessageInfo

func (m *NotifyNodeStoreOp) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *NotifyNodeStoreOp) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NotifyNodeStoreOp) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *NotifyNodeStoreOp) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

func (m *NotifyNodeStoreOp) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *NotifyNodeStoreOp) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *NotifyNodeStoreOp) GetRaftID() uint64 {
	if m != nil {
		return m.RaftID
	}
	return 0
}

type NodeStoreOpOk struct {
}

func (m *NodeStoreOpOk) Reset()      { *m = NodeStoreOpOk{} }
func (*NodeStoreOpOk) ProtoMessage() {}
func (*NodeStoreOpOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{18}
}
func (m *NodeStoreOpOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStoreOpOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStoreOpOk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStoreOpOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStoreOpOk.Merge(m, src)
}
func (m *NodeStoreOpOk) XXX_Size() int {
	return m.Size()
}
func (m *NodeStoreOpOk) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStoreOpOk.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStoreOpOk proto.InternalMessageInfo

type IsTransInReady struct {
	Store int32 `protobuf:"varint,1,opt,name=store" json:"store"`
	Slot  int32 `protobuf:"varint,2,opt,name=slot" json:"slot"`
}

func (m *IsTransInReady) Reset()      { *m = IsTransInReady{} }
func (*IsTransInReady) ProtoMessage() {}
func (*IsTransInReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{19}
}
func (m *IsTransInReady) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTransInReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTransInReady.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTransInReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTransInReady.Merge(m, src)
}
func (m *IsTransInReady) XXX_Size() int {
	return m.Size()
}
func (m *IsTransInReady) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTransInReady.DiscardUnknown(m)
}

var xxx_messageInfo_IsTransInReady proto.InternalMessageInfo

func (m *IsTransInReady) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *IsTransInReady) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type IsTransInReadyResp struct {
	Ready bool  `protobuf:"varint,1,opt,name=ready" json:"ready"`
	Slot  int32 `protobuf:"varint,2,opt,name=slot" json:"slot"`
}

func (m *IsTransInReadyResp) Reset()      { *m = IsTransInReadyResp{} }
func (*IsTransInReadyResp) ProtoMessage() {}
func (*IsTransInReadyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{20}
}
func (m *IsTransInReadyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTransInReadyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTransInReadyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTransInReadyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTransInReadyResp.Merge(m, src)
}
func (m *IsTransInReadyResp) XXX_Size() int {
	return m.Size()
}
func (m *IsTransInReadyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTransInReadyResp.DiscardUnknown(m)
}

var xxx_messageInfo_IsTransInReadyResp proto.InternalMessageInfo

func (m *IsTransInReadyResp) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *IsTransInReadyResp) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type NotifySlotTransOut struct {
	Slot  int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
	Store int32 `protobuf:"varint,2,opt,name=store" json:"store"`
}

func (m *NotifySlotTransOut) Reset()      { *m = NotifySlotTransOut{} }
func (*NotifySlotTransOut) ProtoMessage() {}
func (*NotifySlotTransOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{21}
}
func (m *NotifySlotTransOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifySlotTransOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifySlotTransOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifySlotTransOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifySlotTransOut.Merge(m, src)
}
func (m *NotifySlotTransOut) XXX_Size() int {
	return m.Size()
}
func (m *NotifySlotTransOut) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifySlotTransOut.DiscardUnknown(m)
}

var xxx_messageInfo_NotifySlotTransOut proto.InternalMessageInfo

func (m *NotifySlotTransOut) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *NotifySlotTransOut) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type SlotTransOutOk struct {
	Slot int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
}

func (m *SlotTransOutOk) Reset()      { *m = SlotTransOutOk{} }
func (*SlotTransOutOk) ProtoMessage() {}
func (*SlotTransOutOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{22}
}
func (m *SlotTransOutOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotTransOutOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotTransOutOk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotTransOutOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotTransOutOk.Merge(m, src)
}
func (m *SlotTransOutOk) XXX_Size() int {
	return m.Size()
}
func (m *SlotTransOutOk) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotTransOutOk.DiscardUnknown(m)
}

var xxx_messageInfo_SlotTransOutOk proto.InternalMessageInfo

func (m *SlotTransOutOk) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type NotifySlotTransIn struct {
	Slot  int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
	Store int32 `protobuf:"varint,2,opt,name=store" json:"store"`
}

func (m *NotifySlotTransIn) Reset()      { *m = NotifySlotTransIn{} }
func (*NotifySlotTransIn) ProtoMessage() {}
func (*NotifySlotTransIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{23}
}
func (m *NotifySlotTransIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifySlotTransIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifySlotTransIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifySlotTransIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifySlotTransIn.Merge(m, src)
}
func (m *NotifySlotTransIn) XXX_Size() int {
	return m.Size()
}
func (m *NotifySlotTransIn) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifySlotTransIn.DiscardUnknown(m)
}

var xxx_messageInfo_NotifySlotTransIn proto.InternalMessageInfo

func (m *NotifySlotTransIn) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *NotifySlotTransIn) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type SlotTransInOk struct {
	Slot int32 `protobuf:"varint,1,opt,name=slot" json:"slot"`
}

func (m *SlotTransInOk) Reset()      { *m = SlotTransInOk{} }
func (*SlotTransInOk) ProtoMessage() {}
func (*SlotTransInOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{24}
}
func (m *SlotTransInOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotTransInOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotTransInOk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotTransInOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotTransInOk.Merge(m, src)
}
func (m *SlotTransInOk) XXX_Size() int {
	return m.Size()
}
func (m *SlotTransInOk) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotTransInOk.DiscardUnknown(m)
}

var xxx_messageInfo_SlotTransInOk proto.InternalMessageInfo

func (m *SlotTransInOk) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type AddSet struct {
	Set *DeploymentSet `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
}

func (m *AddSet) Reset()      { *m = AddSet{} }
func (*AddSet) ProtoMessage() {}
func (*AddSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{25}
}
func (m *AddSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSet.Merge(m, src)
}
func (m *AddSet) XXX_Size() int {
	return m.Size()
}
func (m *AddSet) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSet.DiscardUnknown(m)
}

var xxx_messageInfo_AddSet proto.InternalMessageInfo

func (m *AddSet) GetSet() *DeploymentSet {
	if m != nil {
		return m.Set
	}
	return nil
}

type AddSetResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *AddSetResp) Reset()      { *m = AddSetResp{} }
func (*AddSetResp) ProtoMessage() {}
func (*AddSetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{26}
}
func (m *AddSetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSetResp.Merge(m, src)
}
func (m *AddSetResp) XXX_Size() int {
	return m.Size()
}
func (m *AddSetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSetResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddSetResp proto.InternalMessageInfo

func (m *AddSetResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddSetResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type RemSet struct {
	SetID int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
}

func (m *RemSet) Reset()      { *m = RemSet{} }
func (*RemSet) ProtoMessage() {}
func (*RemSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{27}
}
func (m *RemSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemSet.Merge(m, src)
}
func (m *RemSet) XXX_Size() int {
	return m.Size()
}
func (m *RemSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RemSet.DiscardUnknown(m)
}

var xxx_messageInfo_RemSet proto.InternalMessageInfo

func (m *RemSet) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

type RemSetResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *RemSetResp) Reset()      { *m = RemSetResp{} }
func (*RemSetResp) ProtoMessage() {}
func (*RemSetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{28}
}
func (m *RemSetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemSetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemSetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemSetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemSetResp.Merge(m, src)
}
func (m *RemSetResp) XXX_Size() int {
	return m.Size()
}
func (m *RemSetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemSetResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemSetResp proto.InternalMessageInfo

func (m *RemSetResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RemSetResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type SetMarkClear struct {
	SetID int32 `protobuf:"varint,1,opt,name=setID" json:"setID"`
}

func (m *SetMarkClear) Reset()      { *m = SetMarkClear{} }
func (*SetMarkClear) ProtoMessage() {}
func (*SetMarkClear) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{29}
}
func (m *SetMarkClear) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMarkClear) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMarkClear.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMarkClear) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMarkClear.Merge(m, src)
}
func (m *SetMarkClear) XXX_Size() int {
	return m.Size()
}
func (m *SetMarkClear) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMarkClear.DiscardUnknown(m)
}

var xxx_messageInfo_SetMarkClear proto.InternalMessageInfo

func (m *SetMarkClear) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

type SetMarkClearResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *SetMarkClearResp) Reset()      { *m = SetMarkClearResp{} }
func (*SetMarkClearResp) ProtoMessage() {}
func (*SetMarkClearResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{30}
}
func (m *SetMarkClearResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMarkClearResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMarkClearResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMarkClearResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMarkClearResp.Merge(m, src)
}
func (m *SetMarkClearResp) XXX_Size() int {
	return m.Size()
}
func (m *SetMarkClearResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMarkClearResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetMarkClearResp proto.InternalMessageInfo

func (m *SetMarkClearResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SetMarkClearResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type GetFlyGateList struct {
}

func (m *GetFlyGateList) Reset()      { *m = GetFlyGateList{} }
func (*GetFlyGateList) ProtoMessage() {}
func (*GetFlyGateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{31}
}
func (m *GetFlyGateList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFlyGateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFlyGateList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFlyGateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlyGateList.Merge(m, src)
}
func (m *GetFlyGateList) XXX_Size() int {
	return m.Size()
}
func (m *GetFlyGateList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlyGateList.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlyGateList proto.InternalMessageInfo

type GetFlyGateListResp struct {
	List []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *GetFlyGateListResp) Reset()      { *m = GetFlyGateListResp{} }
func (*GetFlyGateListResp) ProtoMessage() {}
func (*GetFlyGateListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{32}
}
func (m *GetFlyGateListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFlyGateListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFlyGateListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFlyGateListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlyGateListResp.Merge(m, src)
}
func (m *GetFlyGateListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetFlyGateListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlyGateListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlyGateListResp proto.InternalMessageInfo

func (m *GetFlyGateListResp) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type GetFlySqlList struct {
}

func (m *GetFlySqlList) Reset()      { *m = GetFlySqlList{} }
func (*GetFlySqlList) ProtoMessage() {}
func (*GetFlySqlList) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{33}
}
func (m *GetFlySqlList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFlySqlList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFlySqlList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFlySqlList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlySqlList.Merge(m, src)
}
func (m *GetFlySqlList) XXX_Size() int {
	return m.Size()
}
func (m *GetFlySqlList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlySqlList.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlySqlList proto.InternalMessageInfo

type GetFlySqlListResp struct {
	List []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *GetFlySqlListResp) Reset()      { *m = GetFlySqlListResp{} }
func (*GetFlySqlListResp) ProtoMessage() {}
func (*GetFlySqlListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{34}
}
func (m *GetFlySqlListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFlySqlListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFlySqlListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFlySqlListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlySqlListResp.Merge(m, src)
}
func (m *GetFlySqlListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetFlySqlListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlySqlListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlySqlListResp proto.InternalMessageInfo

func (m *GetFlySqlListResp) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type FlyGateHeartBeat struct {
	GateService string `protobuf:"bytes,1,opt,name=gateService" json:"gateService"`
}

func (m *FlyGateHeartBeat) Reset()      { *m = FlyGateHeartBeat{} }
func (*FlyGateHeartBeat) ProtoMessage() {}
func (*FlyGateHeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{35}
}
func (m *FlyGateHeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlyGateHeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlyGateHeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlyGateHeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlyGateHeartBeat.Merge(m, src)
}
func (m *FlyGateHeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *FlyGateHeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_FlyGateHeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_FlyGateHeartBeat proto.InternalMessageInfo

func (m *FlyGateHeartBeat) GetGateService() string {
	if m != nil {
		return m.GateService
	}
	return ""
}

type MetaFiled struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Type    string `protobuf:"bytes,2,opt,name=type" json:"type"`
	Default string `protobuf:"bytes,3,opt,name=default" json:"default"`
}

func (m *MetaFiled) Reset()      { *m = MetaFiled{} }
func (*MetaFiled) ProtoMessage() {}
func (*MetaFiled) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{36}
}
func (m *MetaFiled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaFiled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaFiled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaFiled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaFiled.Merge(m, src)
}
func (m *MetaFiled) XXX_Size() int {
	return m.Size()
}
func (m *MetaFiled) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaFiled.DiscardUnknown(m)
}

var xxx_messageInfo_MetaFiled proto.InternalMessageInfo

func (m *MetaFiled) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetaFiled) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetaFiled) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

type MetaAddTable struct {
	Name    string       `protobuf:"bytes,1,opt,name=name" json:"name"`
	Fields  []*MetaFiled `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
	Version int64        `protobuf:"varint,3,opt,name=version" json:"version"`
}

func (m *MetaAddTable) Reset()      { *m = MetaAddTable{} }
func (*MetaAddTable) ProtoMessage() {}
func (*MetaAddTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{37}
}
func (m *MetaAddTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaAddTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaAddTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaAddTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaAddTable.Merge(m, src)
}
func (m *MetaAddTable) XXX_Size() int {
	return m.Size()
}
func (m *MetaAddTable) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaAddTable.DiscardUnknown(m)
}

var xxx_messageInfo_MetaAddTable proto.InternalMessageInfo

func (m *MetaAddTable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetaAddTable) GetFields() []*MetaFiled {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *MetaAddTable) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type MetaAddTableResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *MetaAddTableResp) Reset()      { *m = MetaAddTableResp{} }
func (*MetaAddTableResp) ProtoMessage() {}
func (*MetaAddTableResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{38}
}
func (m *MetaAddTableResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaAddTableResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaAddTableResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaAddTableResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaAddTableResp.Merge(m, src)
}
func (m *MetaAddTableResp) XXX_Size() int {
	return m.Size()
}
func (m *MetaAddTableResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaAddTableResp.DiscardUnknown(m)
}

var xxx_messageInfo_MetaAddTableResp proto.InternalMessageInfo

func (m *MetaAddTableResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MetaAddTableResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MetaAddFields struct {
	Table   string       `protobuf:"bytes,1,opt,name=table" json:"table"`
	Fields  []*MetaFiled `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
	Version int64        `protobuf:"varint,3,opt,name=version" json:"version"`
}

func (m *MetaAddFields) Reset()      { *m = MetaAddFields{} }
func (*MetaAddFields) ProtoMessage() {}
func (*MetaAddFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{39}
}
func (m *MetaAddFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaAddFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaAddFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaAddFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaAddFields.Merge(m, src)
}
func (m *MetaAddFields) XXX_Size() int {
	return m.Size()
}
func (m *MetaAddFields) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaAddFields.DiscardUnknown(m)
}

var xxx_messageInfo_MetaAddFields proto.InternalMessageInfo

func (m *MetaAddFields) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *MetaAddFields) GetFields() []*MetaFiled {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *MetaAddFields) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type MetaAddFieldsResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *MetaAddFieldsResp) Reset()      { *m = MetaAddFieldsResp{} }
func (*MetaAddFieldsResp) ProtoMessage() {}
func (*MetaAddFieldsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{40}
}
func (m *MetaAddFieldsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaAddFieldsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaAddFieldsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaAddFieldsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaAddFieldsResp.Merge(m, src)
}
func (m *MetaAddFieldsResp) XXX_Size() int {
	return m.Size()
}
func (m *MetaAddFieldsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaAddFieldsResp.DiscardUnknown(m)
}

var xxx_messageInfo_MetaAddFieldsResp proto.InternalMessageInfo

func (m *MetaAddFieldsResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MetaAddFieldsResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MetaRemoveTable struct {
	Table   string `protobuf:"bytes,1,opt,name=table" json:"table"`
	Version int64  `protobuf:"varint,2,opt,name=version" json:"version"`
}

func (m *MetaRemoveTable) Reset()      { *m = MetaRemoveTable{} }
func (*MetaRemoveTable) ProtoMessage() {}
func (*MetaRemoveTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{41}
}
func (m *MetaRemoveTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaRemoveTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaRemoveTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaRemoveTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaRemoveTable.Merge(m, src)
}
func (m *MetaRemoveTable) XXX_Size() int {
	return m.Size()
}
func (m *MetaRemoveTable) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaRemoveTable.DiscardUnknown(m)
}

var xxx_messageInfo_MetaRemoveTable proto.InternalMessageInfo

func (m *MetaRemoveTable) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *MetaRemoveTable) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type MetaRemoveTableResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *MetaRemoveTableResp) Reset()      { *m = MetaRemoveTableResp{} }
func (*MetaRemoveTableResp) ProtoMessage() {}
func (*MetaRemoveTableResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{42}
}
func (m *MetaRemoveTableResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaRemoveTableResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaRemoveTableResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaRemoveTableResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaRemoveTableResp.Merge(m, src)
}
func (m *MetaRemoveTableResp) XXX_Size() int {
	return m.Size()
}
func (m *MetaRemoveTableResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaRemoveTableResp.DiscardUnknown(m)
}

var xxx_messageInfo_MetaRemoveTableResp proto.InternalMessageInfo

func (m *MetaRemoveTableResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MetaRemoveTableResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MetaRemoveFields struct {
	Table   string   `protobuf:"bytes,1,opt,name=table" json:"table"`
	Fields  []string `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
	Version int64    `protobuf:"varint,3,opt,name=version" json:"version"`
}

func (m *MetaRemoveFields) Reset()      { *m = MetaRemoveFields{} }
func (*MetaRemoveFields) ProtoMessage() {}
func (*MetaRemoveFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{43}
}
func (m *MetaRemoveFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaRemoveFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaRemoveFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaRemoveFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaRemoveFields.Merge(m, src)
}
func (m *MetaRemoveFields) XXX_Size() int {
	return m.Size()
}
func (m *MetaRemoveFields) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaRemoveFields.DiscardUnknown(m)
}

var xxx_messageInfo_MetaRemoveFields proto.InternalMessageInfo

func (m *MetaRemoveFields) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *MetaRemoveFields) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *MetaRemoveFields) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type MetaRemoveFieldsResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *MetaRemoveFieldsResp) Reset()      { *m = MetaRemoveFieldsResp{} }
func (*MetaRemoveFieldsResp) ProtoMessage() {}
func (*MetaRemoveFieldsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{44}
}
func (m *MetaRemoveFieldsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaRemoveFieldsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaRemoveFieldsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaRemoveFieldsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaRemoveFieldsResp.Merge(m, src)
}
func (m *MetaRemoveFieldsResp) XXX_Size() int {
	return m.Size()
}
func (m *MetaRemoveFieldsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaRemoveFieldsResp.DiscardUnknown(m)
}

var xxx_messageInfo_MetaRemoveFieldsResp proto.InternalMessageInfo

func (m *MetaRemoveFieldsResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MetaRemoveFieldsResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type GetMeta struct {
}

func (m *GetMeta) Reset()      { *m = GetMeta{} }
func (*GetMeta) ProtoMessage() {}
func (*GetMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{45}
}
func (m *GetMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMeta.Merge(m, src)
}
func (m *GetMeta) XXX_Size() int {
	return m.Size()
}
func (m *GetMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMeta.DiscardUnknown(m)
}

var xxx_messageInfo_GetMeta proto.InternalMessageInfo

type GetMetaResp struct {
	Version int64  `protobuf:"varint,1,opt,name=version" json:"version"`
	Meta    []byte `protobuf:"bytes,2,opt,name=meta" json:"meta"`
}

func (m *GetMetaResp) Reset()      { *m = GetMetaResp{} }
func (*GetMetaResp) ProtoMessage() {}
func (*GetMetaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{46}
}
func (m *GetMetaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetaResp.Merge(m, src)
}
func (m *GetMetaResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMetaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetaResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetaResp proto.InternalMessageInfo

func (m *GetMetaResp) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetMetaResp) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type NotifyUpdateMeta struct {
	Store   int32  `protobuf:"varint,1,opt,name=store" json:"store"`
	Version int64  `protobuf:"varint,2,opt,name=version" json:"version"`
	Meta    []byte `protobuf:"bytes,3,opt,name=meta" json:"meta"`
}

func (m *NotifyUpdateMeta) Reset()      { *m = NotifyUpdateMeta{} }
func (*NotifyUpdateMeta) ProtoMessage() {}
func (*NotifyUpdateMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{47}
}
func (m *NotifyUpdateMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyUpdateMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyUpdateMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyUpdateMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyUpdateMeta.Merge(m, src)
}
func (m *NotifyUpdateMeta) XXX_Size() int {
	return m.Size()
}
func (m *NotifyUpdateMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyUpdateMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyUpdateMeta proto.InternalMessageInfo

func (m *NotifyUpdateMeta) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *NotifyUpdateMeta) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *NotifyUpdateMeta) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type PacketTest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message"`
}

func (m *PacketTest) Reset()      { *m = PacketTest{} }
func (*PacketTest) ProtoMessage() {}
func (*PacketTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{48}
}
func (m *PacketTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketTest.Merge(m, src)
}
func (m *PacketTest) XXX_Size() int {
	return m.Size()
}
func (m *PacketTest) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketTest.DiscardUnknown(m)
}

var xxx_messageInfo_PacketTest proto.InternalMessageInfo

func (m *PacketTest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetKvStatus struct {
}

func (m *GetKvStatus) Reset()      { *m = GetKvStatus{} }
func (*GetKvStatus) ProtoMessage() {}
func (*GetKvStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{49}
}
func (m *GetKvStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetKvStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetKvStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetKvStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKvStatus.Merge(m, src)
}
func (m *GetKvStatus) XXX_Size() int {
	return m.Size()
}
func (m *GetKvStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKvStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GetKvStatus proto.InternalMessageInfo

type StoreStatus struct {
	StoreID     int32 `protobuf:"varint,1,opt,name=storeID" json:"storeID"`
	Slotcount   int32 `protobuf:"varint,2,opt,name=slotcount" json:"slotcount"`
	Kvcount     int32 `protobuf:"varint,3,opt,name=kvcount" json:"kvcount"`
	MetaVersion int64 `protobuf:"varint,4,opt,name=metaVersion" json:"metaVersion"`
	Halt        bool  `protobuf:"varint,5,opt,name=halt" json:"halt"`
}

func (m *StoreStatus) Reset()      { *m = StoreStatus{} }
func (*StoreStatus) ProtoMessage() {}
func (*StoreStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{50}
}
func (m *StoreStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreStatus.Merge(m, src)
}
func (m *StoreStatus) XXX_Size() int {
	return m.Size()
}
func (m *StoreStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StoreStatus proto.InternalMessageInfo

func (m *StoreStatus) GetStoreID() int32 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

func (m *StoreStatus) GetSlotcount() int32 {
	if m != nil {
		return m.Slotcount
	}
	return 0
}

func (m *StoreStatus) GetKvcount() int32 {
	if m != nil {
		return m.Kvcount
	}
	return 0
}

func (m *StoreStatus) GetMetaVersion() int64 {
	if m != nil {
		return m.MetaVersion
	}
	return 0
}

func (m *StoreStatus) GetHalt() bool {
	if m != nil {
		return m.Halt
	}
	return false
}

type KvnodeStoreStatus struct {
	StoreID     int32  `protobuf:"varint,1,opt,name=storeID" json:"storeID"`
	RaftID      uint64 `protobuf:"varint,2,opt,name=raftID" json:"raftID"`
	StoreType   int32  `protobuf:"varint,3,opt,name=storeType" json:"storeType"`
	IsLeader    bool   `protobuf:"varint,4,opt,name=isLeader" json:"isLeader"`
	Progress    uint64 `protobuf:"varint,5,opt,name=progress" json:"progress"`
	Halt        bool   `protobuf:"varint,6,opt,name=halt" json:"halt"`
	MetaVersion int64  `protobuf:"varint,7,opt,name=metaVersion" json:"metaVersion"`
	LastReport  int64  `protobuf:"varint,8,opt,name=lastReport" json:"lastReport"`
}

func (m *KvnodeStoreStatus) Reset()      { *m = KvnodeStoreStatus{} }
func (*KvnodeStoreStatus) ProtoMessage() {}
func (*KvnodeStoreStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{51}
}
func (m *KvnodeStoreStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeStoreStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeStoreStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeStoreStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeStoreStatus.Merge(m, src)
}
func (m *KvnodeStoreStatus) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeStoreStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeStoreStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeStoreStatus proto.InternalMessageInfo

func (m *KvnodeStoreStatus) GetStoreID() int32 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

func (m *KvnodeStoreStatus) GetRaftID() uint64 {
	if m != nil {
		return m.RaftID
	}
	return 0
}

func (m *KvnodeStoreStatus) GetStoreType() int32 {
	if m != nil {
		return m.StoreType
	}
	return 0
}

func (m *KvnodeStoreStatus) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

func (m *KvnodeStoreStatus) GetProgress() uint64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *KvnodeStoreStatus) GetHalt() bool {
	if m != nil {
		return m.Halt
	}
	return false
}

func (m *KvnodeStoreStatus) GetMetaVersion() int64 {
	if m != nil {
		return m.MetaVersion
	}
	return 0
}

func (m *KvnodeStoreStatus) GetLastReport() int64 {
	if m != nil {
		return m.LastReport
	}
	return 0
}

type KvnodeStatus struct {
	NodeID  int32                `protobuf:"varint,1,opt,name=nodeID" json:"nodeID"`
	Stores  []*KvnodeStoreStatus `protobuf:"bytes,2,rep,name=stores" json:"stores,omitempty"`
	Service string               `protobuf:"bytes,3,opt,name=service" json:"service"`
}

func (m *KvnodeStatus) Reset()      { *m = KvnodeStatus{} }
func (*KvnodeStatus) ProtoMessage() {}
func (*KvnodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{52}
}
func (m *KvnodeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeStatus.Merge(m, src)
}
func (m *KvnodeStatus) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeStatus proto.InternalMessageInfo

func (m *KvnodeStatus) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *KvnodeStatus) GetStores() []*KvnodeStoreStatus {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *KvnodeStatus) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type SetStatus struct {
	SetID     int32           `protobuf:"varint,1,opt,name=setID" json:"setID"`
	MarkClear bool            `protobuf:"varint,2,opt,name=markClear" json:"markClear"`
	Kvcount   int32           `protobuf:"varint,3,opt,name=kvcount" json:"kvcount"`
	Stores    []*StoreStatus  `protobuf:"bytes,4,rep,name=stores" json:"stores,omitempty"`
	Nodes     []*KvnodeStatus `protobuf:"bytes,5,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *SetStatus) Reset()      { *m = SetStatus{} }
func (*SetStatus) ProtoMessage() {}
func (*SetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{53}
}
func (m *SetStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStatus.Merge(m, src)
}
func (m *SetStatus) XXX_Size() int {
	return m.Size()
}
func (m *SetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SetStatus proto.InternalMessageInfo

func (m *SetStatus) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *SetStatus) GetMarkClear() bool {
	if m != nil {
		return m.MarkClear
	}
	return false
}

func (m *SetStatus) GetKvcount() int32 {
	if m != nil {
		return m.Kvcount
	}
	return 0
}

func (m *SetStatus) GetStores() []*StoreStatus {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *SetStatus) GetNodes() []*KvnodeStatus {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type GetKvStatusResp struct {
	Now               int64        `protobuf:"varint,1,opt,name=now" json:"now"`
	Kvcount           int32        `protobuf:"varint,2,opt,name=kvcount" json:"kvcount"`
	FreeSlotCount     int32        `protobuf:"varint,3,opt,name=freeSlotCount" json:"freeSlotCount"`
	TransferSlotCount int32        `protobuf:"varint,4,opt,name=transferSlotCount" json:"transferSlotCount"`
	Sets              []*SetStatus `protobuf:"bytes,5,rep,name=sets" json:"sets,omitempty"`
}

func (m *GetKvStatusResp) Reset()      { *m = GetKvStatusResp{} }
func (*GetKvStatusResp) ProtoMessage() {}
func (*GetKvStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{54}
}
func (m *GetKvStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetKvStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetKvStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetKvStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKvStatusResp.Merge(m, src)
}
func (m *GetKvStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *GetKvStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKvStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetKvStatusResp proto.InternalMessageInfo

func (m *GetKvStatusResp) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *GetKvStatusResp) GetKvcount() int32 {
	if m != nil {
		return m.Kvcount
	}
	return 0
}

func (m *GetKvStatusResp) GetFreeSlotCount() int32 {
	if m != nil {
		return m.FreeSlotCount
	}
	return 0
}

func (m *GetKvStatusResp) GetTransferSlotCount() int32 {
	if m != nil {
		return m.TransferSlotCount
	}
	return 0
}

func (m *GetKvStatusResp) GetSets() []*SetStatus {
	if m != nil {
		return m.Sets
	}
	return nil
}

type StoreReportStatus struct {
	StoreID     int32  `protobuf:"varint,1,opt,name=storeID" json:"storeID"`
	RaftID      uint64 `protobuf:"varint,2,opt,name=raftID" json:"raftID"`
	Isleader    bool   `protobuf:"varint,3,opt,name=isleader" json:"isleader"`
	Kvcount     int32  `protobuf:"varint,4,opt,name=kvcount" json:"kvcount"`
	Progress    uint64 `protobuf:"varint,5,opt,name=progress" json:"progress"`
	MetaVersion int64  `protobuf:"varint,6,opt,name=metaVersion" json:"metaVersion"`
	Halt        bool   `protobuf:"varint,7,opt,name=halt" json:"halt"`
}

func (m *StoreReportStatus) Reset()      { *m = StoreReportStatus{} }
func (*StoreReportStatus) ProtoMessage() {}
func (*StoreReportStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{55}
}
func (m *StoreReportStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreReportStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreReportStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreReportStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreReportStatus.Merge(m, src)
}
func (m *StoreReportStatus) XXX_Size() int {
	return m.Size()
}
func (m *StoreReportStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreReportStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StoreReportStatus proto.InternalMessageInfo

func (m *StoreReportStatus) GetStoreID() int32 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

func (m *StoreReportStatus) GetRaftID() uint64 {
	if m != nil {
		return m.RaftID
	}
	return 0
}

func (m *StoreReportStatus) GetIsleader() bool {
	if m != nil {
		return m.Isleader
	}
	return false
}

func (m *StoreReportStatus) GetKvcount() int32 {
	if m != nil {
		return m.Kvcount
	}
	return 0
}

func (m *StoreReportStatus) GetProgress() uint64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *StoreReportStatus) GetMetaVersion() int64 {
	if m != nil {
		return m.MetaVersion
	}
	return 0
}

func (m *StoreReportStatus) GetHalt() bool {
	if m != nil {
		return m.Halt
	}
	return false
}

type KvnodeReportStatus struct {
	SetID  int32                `protobuf:"varint,1,opt,name=setID" json:"setID"`
	NodeID int32                `protobuf:"varint,2,opt,name=nodeID" json:"nodeID"`
	Stores []*StoreReportStatus `protobuf:"bytes,3,rep,name=stores" json:"stores,omitempty"`
}

func (m *KvnodeReportStatus) Reset()      { *m = KvnodeReportStatus{} }
func (*KvnodeReportStatus) ProtoMessage() {}
func (*KvnodeReportStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{56}
}
func (m *KvnodeReportStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvnodeReportStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvnodeReportStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvnodeReportStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvnodeReportStatus.Merge(m, src)
}
func (m *KvnodeReportStatus) XXX_Size() int {
	return m.Size()
}
func (m *KvnodeReportStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KvnodeReportStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KvnodeReportStatus proto.InternalMessageInfo

func (m *KvnodeReportStatus) GetSetID() int32 {
	if m != nil {
		return m.SetID
	}
	return 0
}

func (m *KvnodeReportStatus) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *KvnodeReportStatus) GetStores() []*StoreReportStatus {
	if m != nil {
		return m.Stores
	}
	return nil
}

type NotifyMissingStores struct {
	Stores []*StoreInfo `protobuf:"bytes,1,rep,name=stores" json:"stores,omitempty"`
	Meta   []byte       `protobuf:"bytes,2,opt,name=meta" json:"meta"`
}

func (m *NotifyMissingStores) Reset()      { *m = NotifyMissingStores{} }
func (*NotifyMissingStores) ProtoMessage() {}
func (*NotifyMissingStores) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{57}
}
func (m *NotifyMissingStores) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyMissingStores) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyMissingStores.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyMissingStores) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyMissingStores.Merge(m, src)
}
func (m *NotifyMissingStores) XXX_Size() int {
	return m.Size()
}
func (m *NotifyMissingStores) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyMissingStores.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyMissingStores proto.InternalMessageInfo

func (m *NotifyMissingStores) GetStores() []*StoreInfo {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *NotifyMissingStores) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type TrasnferLeader struct {
	StoreID    int32  `protobuf:"varint,1,opt,name=storeID" json:"storeID"`
	Transferee uint64 `protobuf:"varint,2,opt,name=transferee" json:"transferee"`
}

func (m *TrasnferLeader) Reset()      { *m = TrasnferLeader{} }
func (*TrasnferLeader) ProtoMessage() {}
func (*TrasnferLeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{58}
}
func (m *TrasnferLeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrasnferLeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrasnferLeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrasnferLeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrasnferLeader.Merge(m, src)
}
func (m *TrasnferLeader) XXX_Size() int {
	return m.Size()
}
func (m *TrasnferLeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TrasnferLeader.DiscardUnknown(m)
}

var xxx_messageInfo_TrasnferLeader proto.InternalMessageInfo

func (m *TrasnferLeader) GetStoreID() int32 {
	if m != nil {
		return m.StoreID
	}
	return 0
}

func (m *TrasnferLeader) GetTransferee() uint64 {
	if m != nil {
		return m.Transferee
	}
	return 0
}

type ScanField struct {
	Field   string `protobuf:"bytes,1,opt,name=field" json:"field"`
	Version int64  `protobuf:"varint,2,opt,name=version" json:"version"`
}

func (m *ScanField) Reset()      { *m = ScanField{} }
func (*ScanField) ProtoMessage() {}
func (*ScanField) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{59}
}
func (m *ScanField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanField.Merge(m, src)
}
func (m *ScanField) XXX_Size() int {
	return m.Size()
}
func (m *ScanField) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanField.DiscardUnknown(m)
}

var xxx_messageInfo_ScanField proto.InternalMessageInfo

func (m *ScanField) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *ScanField) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type GetScanTableMeta struct {
	Table string `protobuf:"bytes,1,opt,name=table" json:"table"`
}

func (m *GetScanTableMeta) Reset()      { *m = GetScanTableMeta{} }
func (*GetScanTableMeta) ProtoMessage() {}
func (*GetScanTableMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{60}
}
func (m *GetScanTableMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScanTableMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScanTableMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScanTableMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScanTableMeta.Merge(m, src)
}
func (m *GetScanTableMeta) XXX_Size() int {
	return m.Size()
}
func (m *GetScanTableMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScanTableMeta.DiscardUnknown(m)
}

var xxx_messageInfo_GetScanTableMeta proto.InternalMessageInfo

func (m *GetScanTableMeta) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

type GetScanTableMetaResp struct {
	TabVersion int64        `protobuf:"varint,1,opt,name=tabVersion" json:"tabVersion"`
	Fields     []*ScanField `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (m *GetScanTableMetaResp) Reset()      { *m = GetScanTableMetaResp{} }
func (*GetScanTableMetaResp) ProtoMessage() {}
func (*GetScanTableMetaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{61}
}
func (m *GetScanTableMetaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScanTableMetaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScanTableMetaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScanTableMetaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScanTableMetaResp.Merge(m, src)
}
func (m *GetScanTableMetaResp) XXX_Size() int {
	return m.Size()
}
func (m *GetScanTableMetaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScanTableMetaResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetScanTableMetaResp proto.InternalMessageInfo

func (m *GetScanTableMetaResp) GetTabVersion() int64 {
	if m != nil {
		return m.TabVersion
	}
	return 0
}

func (m *GetScanTableMetaResp) GetFields() []*ScanField {
	if m != nil {
		return m.Fields
	}
	return nil
}

type QueryPdLeader struct {
}

func (m *QueryPdLeader) Reset()      { *m = QueryPdLeader{} }
func (*QueryPdLeader) ProtoMessage() {}
func (*QueryPdLeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{62}
}
func (m *QueryPdLeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPdLeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPdLeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPdLeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPdLeader.Merge(m, src)
}
func (m *QueryPdLeader) XXX_Size() int {
	return m.Size()
}
func (m *QueryPdLeader) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPdLeader.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPdLeader proto.InternalMessageInfo

type QueryPdLeaderResp struct {
	Yes     bool   `protobuf:"varint,1,opt,name=yes" json:"yes"`
	Service string `protobuf:"bytes,2,opt,name=service" json:"service"`
}

func (m *QueryPdLeaderResp) Reset()      { *m = QueryPdLeaderResp{} }
func (*QueryPdLeaderResp) ProtoMessage() {}
func (*QueryPdLeaderResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{63}
}
func (m *QueryPdLeaderResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPdLeaderResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPdLeaderResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPdLeaderResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPdLeaderResp.Merge(m, src)
}
func (m *QueryPdLeaderResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryPdLeaderResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPdLeaderResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPdLeaderResp proto.InternalMessageInfo

func (m *QueryPdLeaderResp) GetYes() bool {
	if m != nil {
		return m.Yes
	}
	return false
}

func (m *QueryPdLeaderResp) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type AddPdNode struct {
	Id        int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	Url       string `protobuf:"bytes,2,opt,name=url" json:"url"`
	ClientUrl string `protobuf:"bytes,3,opt,name=clientUrl" json:"clientUrl"`
}

func (m *AddPdNode) Reset()      { *m = AddPdNode{} }
func (*AddPdNode) ProtoMessage() {}
func (*AddPdNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{64}
}
func (m *AddPdNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPdNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPdNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPdNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPdNode.Merge(m, src)
}
func (m *AddPdNode) XXX_Size() int {
	return m.Size()
}
func (m *AddPdNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPdNode.DiscardUnknown(m)
}

var xxx_messageInfo_AddPdNode proto.InternalMessageInfo

func (m *AddPdNode) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddPdNode) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AddPdNode) GetClientUrl() string {
	if m != nil {
		return m.ClientUrl
	}
	return ""
}

type AddPdNodeResp struct {
	Ok          bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason      string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
	Cluster     uint32 `protobuf:"varint,3,opt,name=cluster" json:"cluster"`
	RaftID      uint64 `protobuf:"varint,4,opt,name=raftID" json:"raftID"`
	RaftCluster string `protobuf:"bytes,5,opt,name=raftCluster" json:"raftCluster"`
}

func (m *AddPdNodeResp) Reset()      { *m = AddPdNodeResp{} }
func (*AddPdNodeResp) ProtoMessage() {}
func (*AddPdNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{65}
}
func (m *AddPdNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPdNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPdNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPdNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPdNodeResp.Merge(m, src)
}
func (m *AddPdNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *AddPdNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPdNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddPdNodeResp proto.InternalMessageInfo

func (m *AddPdNodeResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AddPdNodeResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AddPdNodeResp) GetCluster() uint32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *AddPdNodeResp) GetRaftID() uint64 {
	if m != nil {
		return m.RaftID
	}
	return 0
}

func (m *AddPdNodeResp) GetRaftCluster() string {
	if m != nil {
		return m.RaftCluster
	}
	return ""
}

type RemovePdNode struct {
	Id     int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	RaftID uint64 `protobuf:"varint,2,opt,name=raftID" json:"raftID"`
}

func (m *RemovePdNode) Reset()      { *m = RemovePdNode{} }
func (*RemovePdNode) ProtoMessage() {}
func (*RemovePdNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{66}
}
func (m *RemovePdNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePdNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePdNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePdNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePdNode.Merge(m, src)
}
func (m *RemovePdNode) XXX_Size() int {
	return m.Size()
}
func (m *RemovePdNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePdNode.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePdNode proto.InternalMessageInfo

func (m *RemovePdNode) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemovePdNode) GetRaftID() uint64 {
	if m != nil {
		return m.RaftID
	}
	return 0
}

type RemovePdNodeResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *RemovePdNodeResp) Reset()      { *m = RemovePdNodeResp{} }
func (*RemovePdNodeResp) ProtoMessage() {}
func (*RemovePdNodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{67}
}
func (m *RemovePdNodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePdNodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePdNodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePdNodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePdNodeResp.Merge(m, src)
}
func (m *RemovePdNodeResp) XXX_Size() int {
	return m.Size()
}
func (m *RemovePdNodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePdNodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePdNodeResp proto.InternalMessageInfo

func (m *RemovePdNodeResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RemovePdNodeResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ListPdMembers struct {
}

func (m *ListPdMembers) Reset()      { *m = ListPdMembers{} }
func (*ListPdMembers) ProtoMessage() {}
func (*ListPdMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{68}
}
func (m *ListPdMembers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPdMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPdMembers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPdMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPdMembers.Merge(m, src)
}
func (m *ListPdMembers) XXX_Size() int {
	return m.Size()
}
func (m *ListPdMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPdMembers.DiscardUnknown(m)
}

var xxx_messageInfo_ListPdMembers proto.InternalMessageInfo

type ListPdMembersResp struct {
	Members []string `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (m *ListPdMembersResp) Reset()      { *m = ListPdMembersResp{} }
func (*ListPdMembersResp) ProtoMessage() {}
func (*ListPdMembersResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{69}
}
func (m *ListPdMembersResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPdMembersResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPdMembersResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPdMembersResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPdMembersResp.Merge(m, src)
}
func (m *ListPdMembersResp) XXX_Size() int {
	return m.Size()
}
func (m *ListPdMembersResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPdMembersResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListPdMembersResp proto.InternalMessageInfo

func (m *ListPdMembersResp) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

type ClearStoreCache struct {
	Store int32 `protobuf:"varint,1,opt,name=store" json:"store"`
}

func (m *ClearStoreCache) Reset()      { *m = ClearStoreCache{} }
func (*ClearStoreCache) ProtoMessage() {}
func (*ClearStoreCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{70}
}
func (m *ClearStoreCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearStoreCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearStoreCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearStoreCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearStoreCache.Merge(m, src)
}
func (m *ClearStoreCache) XXX_Size() int {
	return m.Size()
}
func (m *ClearStoreCache) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearStoreCache.DiscardUnknown(m)
}

var xxx_messageInfo_ClearStoreCache proto.InternalMessageInfo

func (m *ClearStoreCache) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type ClearDBData struct {
	Tables []string `protobuf:"bytes,1,rep,name=tables" json:"tables,omitempty"`
}

func (m *ClearDBData) Reset()      { *m = ClearDBData{} }
func (*ClearDBData) ProtoMessage() {}
func (*ClearDBData) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{71}
}
func (m *ClearDBData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearDBData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearDBData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearDBData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearDBData.Merge(m, src)
}
func (m *ClearDBData) XXX_Size() int {
	return m.Size()
}
func (m *ClearDBData) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearDBData.DiscardUnknown(m)
}

var xxx_messageInfo_ClearDBData proto.InternalMessageInfo

func (m *ClearDBData) GetTables() []string {
	if m != nil {
		return m.Tables
	}
	return nil
}

type ClearDBDataResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *ClearDBDataResp) Reset()      { *m = ClearDBDataResp{} }
func (*ClearDBDataResp) ProtoMessage() {}
func (*ClearDBDataResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{72}
}
func (m *ClearDBDataResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearDBDataResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearDBDataResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearDBDataResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearDBDataResp.Merge(m, src)
}
func (m *ClearDBDataResp) XXX_Size() int {
	return m.Size()
}
func (m *ClearDBDataResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearDBDataResp.DiscardUnknown(m)
}

var xxx_messageInfo_ClearDBDataResp proto.InternalMessageInfo

func (m *ClearDBDataResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ClearDBDataResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ClearCache struct {
}

func (m *ClearCache) Reset()      { *m = ClearCache{} }
func (*ClearCache) ProtoMessage() {}
func (*ClearCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{73}
}
func (m *ClearCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearCache.Merge(m, src)
}
func (m *ClearCache) XXX_Size() int {
	return m.Size()
}
func (m *ClearCache) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearCache.DiscardUnknown(m)
}

var xxx_messageInfo_ClearCache proto.InternalMessageInfo

type ClearCacheResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *ClearCacheResp) Reset()      { *m = ClearCacheResp{} }
func (*ClearCacheResp) ProtoMessage() {}
func (*ClearCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{74}
}
func (m *ClearCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearCacheResp.Merge(m, src)
}
func (m *ClearCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *ClearCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_ClearCacheResp proto.InternalMessageInfo

func (m *ClearCacheResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ClearCacheResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type SuspendKvStore struct {
}

func (m *SuspendKvStore) Reset()      { *m = SuspendKvStore{} }
func (*SuspendKvStore) ProtoMessage() {}
func (*SuspendKvStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{75}
}
func (m *SuspendKvStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuspendKvStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuspendKvStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuspendKvStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendKvStore.Merge(m, src)
}
func (m *SuspendKvStore) XXX_Size() int {
	return m.Size()
}
func (m *SuspendKvStore) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendKvStore.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendKvStore proto.InternalMessageInfo

type SuspendKvStoreResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *SuspendKvStoreResp) Reset()      { *m = SuspendKvStoreResp{} }
func (*SuspendKvStoreResp) ProtoMessage() {}
func (*SuspendKvStoreResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{76}
}
func (m *SuspendKvStoreResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuspendKvStoreResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuspendKvStoreResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuspendKvStoreResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendKvStoreResp.Merge(m, src)
}
func (m *SuspendKvStoreResp) XXX_Size() int {
	return m.Size()
}
func (m *SuspendKvStoreResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendKvStoreResp.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendKvStoreResp proto.InternalMessageInfo

func (m *SuspendKvStoreResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SuspendKvStoreResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ResumeKvStore struct {
}

func (m *ResumeKvStore) Reset()      { *m = ResumeKvStore{} }
func (*ResumeKvStore) ProtoMessage() {}
func (*ResumeKvStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{77}
}
func (m *ResumeKvStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResumeKvStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResumeKvStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResumeKvStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeKvStore.Merge(m, src)
}
func (m *ResumeKvStore) XXX_Size() int {
	return m.Size()
}
func (m *ResumeKvStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeKvStore.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeKvStore proto.InternalMessageInfo

type ResumeKvStoreResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
}

func (m *ResumeKvStoreResp) Reset()      { *m = ResumeKvStoreResp{} }
func (*ResumeKvStoreResp) ProtoMessage() {}
func (*ResumeKvStoreResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{78}
}
func (m *ResumeKvStoreResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResumeKvStoreResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResumeKvStoreResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResumeKvStoreResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeKvStoreResp.Merge(m, src)
}
func (m *ResumeKvStoreResp) XXX_Size() int {
	return m.Size()
}
func (m *ResumeKvStoreResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeKvStoreResp.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeKvStoreResp proto.InternalMessageInfo

func (m *ResumeKvStoreResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ResumeKvStoreResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type SuspendStore struct {
	Store int32 `protobuf:"varint,1,opt,name=store" json:"store"`
}

func (m *SuspendStore) Reset()      { *m = SuspendStore{} }
func (*SuspendStore) ProtoMessage() {}
func (*SuspendStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{79}
}
func (m *SuspendStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuspendStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuspendStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuspendStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendStore.Merge(m, src)
}
func (m *SuspendStore) XXX_Size() int {
	return m.Size()
}
func (m *SuspendStore) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendStore.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendStore proto.InternalMessageInfo

func (m *SuspendStore) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type ResumeStore struct {
	Store int32 `protobuf:"varint,1,opt,name=store" json:"store"`
}

func (m *ResumeStore) Reset()      { *m = ResumeStore{} }
func (*ResumeStore) ProtoMessage() {}
func (*ResumeStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{80}
}
func (m *ResumeStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResumeStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResumeStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResumeStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeStore.Merge(m, src)
}
func (m *ResumeStore) XXX_Size() int {
	return m.Size()
}
func (m *ResumeStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeStore.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeStore proto.InternalMessageInfo

func (m *ResumeStore) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

type GetDeployment struct {
}

func (m *GetDeployment) Reset()      { *m = GetDeployment{} }
func (*GetDeployment) ProtoMessage() {}
func (*GetDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{81}
}
func (m *GetDeployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeployment.Merge(m, src)
}
func (m *GetDeployment) XXX_Size() int {
	return m.Size()
}
func (m *GetDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeployment proto.InternalMessageInfo

type Node struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	Host        string `protobuf:"bytes,2,opt,name=host" json:"host"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort" json:"servicePort"`
	RaftPort    int32  `protobuf:"varint,4,opt,name=raftPort" json:"raftPort"`
}

func (m *Node) Reset()      { *m = Node{} }
func (*Node) ProtoMessage() {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{82}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Node) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *Node) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

type Set struct {
	Id        int32   `protobuf:"varint,1,opt,name=id" json:"id"`
	Nodes     []*Node `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	MarkClear bool    `protobuf:"varint,3,opt,name=markClear" json:"markClear"`
}

func (m *Set) Reset()      { *m = Set{} }
func (*Set) ProtoMessage() {}
func (*Set) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{83}
}
func (m *Set) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Set) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Set.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Set) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Set.Merge(m, src)
}
func (m *Set) XXX_Size() int {
	return m.Size()
}
func (m *Set) XXX_DiscardUnknown() {
	xxx_messageInfo_Set.DiscardUnknown(m)
}

var xxx_messageInfo_Set proto.InternalMessageInfo

func (m *Set) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Set) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Set) GetMarkClear() bool {
	if m != nil {
		return m.MarkClear
	}
	return false
}

type GetDeploymentResp struct {
	Sets []*Set `protobuf:"bytes,1,rep,name=sets" json:"sets,omitempty"`
}

func (m *GetDeploymentResp) Reset()      { *m = GetDeploymentResp{} }
func (*GetDeploymentResp) ProtoMessage() {}
func (*GetDeploymentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{84}
}
func (m *GetDeploymentResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeploymentResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeploymentResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeploymentResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeploymentResp.Merge(m, src)
}
func (m *GetDeploymentResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeploymentResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeploymentResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeploymentResp proto.InternalMessageInfo

func (m *GetDeploymentResp) GetSets() []*Set {
	if m != nil {
		return m.Sets
	}
	return nil
}

type OrderSequenceID struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count"`
}

func (m *OrderSequenceID) Reset()      { *m = OrderSequenceID{} }
func (*OrderSequenceID) ProtoMessage() {}
func (*OrderSequenceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{85}
}
func (m *OrderSequenceID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderSequenceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderSequenceID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderSequenceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderSequenceID.Merge(m, src)
}
func (m *OrderSequenceID) XXX_Size() int {
	return m.Size()
}
func (m *OrderSequenceID) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderSequenceID.DiscardUnknown(m)
}

var xxx_messageInfo_OrderSequenceID proto.InternalMessageInfo

func (m *OrderSequenceID) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type OrderSequenceIDResp struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason"`
	Max    int64  `protobuf:"varint,3,opt,name=max" json:"max"`
}

func (m *OrderSequenceIDResp) Reset()      { *m = OrderSequenceIDResp{} }
func (*OrderSequenceIDResp) ProtoMessage() {}
func (*OrderSequenceIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_03085fc3fc38bb42, []int{86}
}
func (m *OrderSequenceIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderSequenceIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderSequenceIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderSequenceIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderSequenceIDResp.Merge(m, src)
}
func (m *OrderSequenceIDResp) XXX_Size() int {
	return m.Size()
}
func (m *OrderSequenceIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderSequenceIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_OrderSequenceIDResp proto.InternalMessageInfo

func (m *OrderSequenceIDResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *OrderSequenceIDResp) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *OrderSequenceIDResp) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.ServerCmdType", ServerCmdType_name, ServerCmdType_value)
	proto.RegisterEnum("proto.StoreOpType", StoreOpType_name, StoreOpType_value)
	proto.RegisterType((*QueryRouteInfo)(nil), "proto.queryRouteInfo")
	proto.RegisterType((*RouteInfoKvNode)(nil), "proto.routeInfoKvNode")
	proto.RegisterType((*RouteInfoSet)(nil), "proto.routeInfoSet")
	proto.RegisterType((*QueryRouteInfoResp)(nil), "proto.queryRouteInfoResp")
	proto.RegisterType((*QueryLeader)(nil), "proto.query_leader")
	proto.RegisterType((*QueryLeaderResp)(nil), "proto.query_leader_resp")
	proto.RegisterType((*DeploymentKvnode)(nil), "proto.deploymentKvnode")
	proto.RegisterType((*DeploymentSet)(nil), "proto.deploymentSet")
	proto.RegisterType((*AddNode)(nil), "proto.addNode")
	proto.RegisterType((*AddNodeResp)(nil), "proto.addNodeResp")
	proto.RegisterType((*RemNode)(nil), "proto.remNode")
	proto.RegisterType((*RemNodeResp)(nil), "proto.remNodeResp")
	proto.RegisterType((*KvnodeBoot)(nil), "proto.kvnodeBoot")
	proto.RegisterType((*StoreInfo)(nil), "proto.storeInfo")
	proto.RegisterType((*KvnodeBootResp)(nil), "proto.kvnodeBootResp")
	proto.RegisterType((*FlySqlHeartBeat)(nil), "proto.flySqlHeartBeat")
	proto.RegisterType((*FlySqlHeartBeatResp)(nil), "proto.flySqlHeartBeatResp")
	proto.RegisterType((*NotifyNodeStoreOp)(nil), "proto.notifyNodeStoreOp")
	proto.RegisterType((*NodeStoreOpOk)(nil), "proto.nodeStoreOpOk")
	proto.RegisterType((*IsTransInReady)(nil), "proto.isTransInReady")
	proto.RegisterType((*IsTransInReadyResp)(nil), "proto.isTransInReadyResp")
	proto.RegisterType((*NotifySlotTransOut)(nil), "proto.notifySlotTransOut")
	proto.RegisterType((*SlotTransOutOk)(nil), "proto.slotTransOutOk")
	proto.RegisterType((*NotifySlotTransIn)(nil), "proto.notifySlotTransIn")
	proto.RegisterType((*SlotTransInOk)(nil), "proto.slotTransInOk")
	proto.RegisterType((*AddSet)(nil), "proto.addSet")
	proto.RegisterType((*AddSetResp)(nil), "proto.addSetResp")
	proto.RegisterType((*RemSet)(nil), "proto.remSet")
	proto.RegisterType((*RemSetResp)(nil), "proto.remSetResp")
	proto.RegisterType((*SetMarkClear)(nil), "proto.setMarkClear")
	proto.RegisterType((*SetMarkClearResp)(nil), "proto.setMarkClearResp")
	proto.RegisterType((*GetFlyGateList)(nil), "proto.getFlyGateList")
	proto.RegisterType((*GetFlyGateListResp)(nil), "proto.getFlyGateListResp")
	proto.RegisterType((*GetFlySqlList)(nil), "proto.getFlySqlList")
	proto.RegisterType((*GetFlySqlListResp)(nil), "proto.getFlySqlListResp")
	proto.RegisterType((*FlyGateHeartBeat)(nil), "proto.flyGateHeartBeat")
	proto.RegisterType((*MetaFiled)(nil), "proto.metaFiled")
	proto.RegisterType((*MetaAddTable)(nil), "proto.metaAddTable")
	proto.RegisterType((*MetaAddTableResp)(nil), "proto.metaAddTableResp")
	proto.RegisterType((*MetaAddFields)(nil), "proto.metaAddFields")
	proto.RegisterType((*MetaAddFieldsResp)(nil), "proto.metaAddFieldsResp")
	proto.RegisterType((*MetaRemoveTable)(nil), "proto.metaRemoveTable")
	proto.RegisterType((*MetaRemoveTableResp)(nil), "proto.metaRemoveTableResp")
	proto.RegisterType((*MetaRemoveFields)(nil), "proto.metaRemoveFields")
	proto.RegisterType((*MetaRemoveFieldsResp)(nil), "proto.metaRemoveFieldsResp")
	proto.RegisterType((*GetMeta)(nil), "proto.getMeta")
	proto.RegisterType((*GetMetaResp)(nil), "proto.getMetaResp")
	proto.RegisterType((*NotifyUpdateMeta)(nil), "proto.notifyUpdateMeta")
	proto.RegisterType((*PacketTest)(nil), "proto.packetTest")
	proto.RegisterType((*GetKvStatus)(nil), "proto.getKvStatus")
	proto.RegisterType((*StoreStatus)(nil), "proto.storeStatus")
	proto.RegisterType((*KvnodeStoreStatus)(nil), "proto.kvnodeStoreStatus")
	proto.RegisterType((*KvnodeStatus)(nil), "proto.kvnodeStatus")
	proto.RegisterType((*SetStatus)(nil), "proto.setStatus")
	proto.RegisterType((*GetKvStatusResp)(nil), "proto.getKvStatusResp")
	proto.RegisterType((*StoreReportStatus)(nil), "proto.storeReportStatus")
	proto.RegisterType((*KvnodeReportStatus)(nil), "proto.kvnodeReportStatus")
	proto.RegisterType((*NotifyMissingStores)(nil), "proto.notifyMissingStores")
	proto.RegisterType((*TrasnferLeader)(nil), "proto.trasnferLeader")
	proto.RegisterType((*ScanField)(nil), "proto.scanField")
	proto.RegisterType((*GetScanTableMeta)(nil), "proto.getScanTableMeta")
	proto.RegisterType((*GetScanTableMetaResp)(nil), "proto.getScanTableMetaResp")
	proto.RegisterType((*QueryPdLeader)(nil), "proto.queryPdLeader")
	proto.RegisterType((*QueryPdLeaderResp)(nil), "proto.queryPdLeaderResp")
	proto.RegisterType((*AddPdNode)(nil), "proto.addPdNode")
	proto.RegisterType((*AddPdNodeResp)(nil), "proto.addPdNodeResp")
	proto.RegisterType((*RemovePdNode)(nil), "proto.removePdNode")
	proto.RegisterType((*RemovePdNodeResp)(nil), "proto.removePdNodeResp")
	proto.RegisterType((*ListPdMembers)(nil), "proto.listPdMembers")
	proto.RegisterType((*ListPdMembersResp)(nil), "proto.listPdMembersResp")
	proto.RegisterType((*ClearStoreCache)(nil), "proto.clearStoreCache")
	proto.RegisterType((*ClearDBData)(nil), "proto.clearDBData")
	proto.RegisterType((*ClearDBDataResp)(nil), "proto.clearDBDataResp")
	proto.RegisterType((*ClearCache)(nil), "proto.clearCache")
	proto.RegisterType((*ClearCacheResp)(nil), "proto.clearCacheResp")
	proto.RegisterType((*SuspendKvStore)(nil), "proto.suspendKvStore")
	proto.RegisterType((*SuspendKvStoreResp)(nil), "proto.suspendKvStoreResp")
	proto.RegisterType((*ResumeKvStore)(nil), "proto.resumeKvStore")
	proto.RegisterType((*ResumeKvStoreResp)(nil), "proto.resumeKvStoreResp")
	proto.RegisterType((*SuspendStore)(nil), "proto.suspendStore")
	proto.RegisterType((*ResumeStore)(nil), "proto.resumeStore")
	proto.RegisterType((*GetDeployment)(nil), "proto.getDeployment")
	proto.RegisterType((*Node)(nil), "proto.node")
	proto.RegisterType((*Set)(nil), "proto.set")
	proto.RegisterType((*GetDeploymentResp)(nil), "proto.getDeploymentResp")
	proto.RegisterType((*OrderSequenceID)(nil), "proto.orderSequenceID")
	proto.RegisterType((*OrderSequenceIDResp)(nil), "proto.orderSequenceIDResp")
}

func init() { proto.RegisterFile("flyfish_server.proto", fileDescriptor_03085fc3fc38bb42) }

var fileDescriptor_03085fc3fc38bb42 = []byte{
	// 2620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4b, 0x70, 0x1b, 0xc7,
	0xd1, 0xe6, 0x62, 0x01, 0x42, 0x6c, 0x10, 0xc4, 0x60, 0x49, 0xd3, 0xfc, 0x55, 0x2e, 0xfc, 0xcc,
	0x96, 0x22, 0x53, 0xac, 0x48, 0x56, 0x94, 0x4b, 0x2a, 0xa7, 0x90, 0x54, 0x08, 0xd1, 0x24, 0x48,
	0x0a, 0x90, 0x55, 0xe5, 0x54, 0xb9, 0x54, 0x2b, 0xee, 0x80, 0x42, 0x11, 0xc0, 0x82, 0xbb, 0x0b,
	0xda, 0xcc, 0xc3, 0x51, 0xe2, 0x3c, 0x9d, 0x97, 0x93, 0xb8, 0x72, 0xc8, 0xb3, 0x72, 0x4a, 0x72,
	0x4e, 0x55, 0x5e, 0xc7, 0x9c, 0x74, 0x8b, 0x2a, 0x2f, 0xbb, 0xf2, 0x70, 0x2c, 0x2a, 0x07, 0x1f,
	0x7d, 0x4b, 0x4e, 0x49, 0xaa, 0x7b, 0xf6, 0x31, 0xb3, 0x0b, 0x82, 0x0c, 0xe4, 0xe4, 0x04, 0x6c,
	0x4f, 0xcf, 0xf4, 0xd7, 0x3d, 0x3d, 0xdd, 0x3d, 0x3d, 0x30, 0xd3, 0x6c, 0x1f, 0x36, 0x5b, 0xde,
	0x9d, 0x5b, 0x1e, 0x77, 0x0f, 0xb8, 0x7b, 0xa9, 0xe7, 0x3a, 0xbe, 0x63, 0xe4, 0xe8, 0xe7, 0xec,
	0xcc, 0xae, 0xb3, 0xeb, 0xd0, 0xdf, 0xa7, 0xf0, 0x9f, 0x18, 0x34, 0x2f, 0xc3, 0xd4, 0x7e, 0x9f,
	0xbb, 0x87, 0x75, 0xa7, 0xef, 0xf3, 0xb5, 0x6e, 0xd3, 0x31, 0x2a, 0x90, 0x3f, 0xe0, 0xae, 0xd7,
	0x72, 0xba, 0x73, 0xda, 0xbc, 0xb6, 0xa0, 0x2f, 0x67, 0xef, 0xbd, 0xf1, 0xff, 0x63, 0xf5, 0x90,
	0x68, 0xee, 0x43, 0xc9, 0x0d, 0x99, 0xd7, 0x0f, 0x36, 0x1d, 0x9b, 0x1b, 0x4f, 0xc0, 0x78, 0xd7,
	0xb1, 0xf9, 0xda, 0x55, 0x9a, 0x91, 0x0b, 0x66, 0x04, 0x34, 0x63, 0x0e, 0xb2, 0x77, 0x1c, 0xcf,
	0x9f, 0xcb, 0xcc, 0x6b, 0x0b, 0x13, 0xc1, 0x18, 0x51, 0x8c, 0xf3, 0x50, 0x40, 0xa4, 0xad, 0x1d,
	0xbe, 0xed, 0xb8, 0xfe, 0x9c, 0x2e, 0x4d, 0x96, 0x07, 0xcc, 0x97, 0x35, 0x98, 0x8c, 0x64, 0x36,
	0xb8, 0x6f, 0x9c, 0x85, 0x9c, 0xc7, 0xfd, 0x84, 0x3c, 0x41, 0x32, 0x66, 0x61, 0xdc, 0xf3, 0x1d,
	0x97, 0x7b, 0x73, 0x99, 0x79, 0x7d, 0x21, 0x57, 0x0f, 0xbe, 0x8c, 0x19, 0xc8, 0x79, 0x6d, 0xc7,
	0xf7, 0xe6, 0xf4, 0x79, 0x7d, 0x61, 0xb2, 0x2e, 0x3e, 0x8c, 0xcb, 0x90, 0xdf, 0x3b, 0x40, 0xa0,
	0xde, 0x5c, 0x76, 0x5e, 0x5f, 0x28, 0x5c, 0x99, 0x15, 0x86, 0xb9, 0x94, 0xd0, 0xb1, 0x1e, 0xb2,
	0x99, 0xcf, 0x81, 0xa1, 0x5a, 0xac, 0xce, 0xbd, 0xde, 0x49, 0x56, 0x33, 0x9e, 0x84, 0xac, 0xc7,
	0x7d, 0x81, 0xa9, 0x70, 0x65, 0x3a, 0x29, 0xa4, 0xc1, 0xfd, 0x3a, 0x31, 0x98, 0x8b, 0x30, 0x49,
	0xcb, 0xdf, 0x6a, 0x73, 0xcb, 0xe6, 0x2e, 0xa9, 0x8a, 0x0a, 0x24, 0x54, 0x45, 0x92, 0xf9, 0x5e,
	0x28, 0xcb, 0xbc, 0xb7, 0x5c, 0x44, 0xf2, 0x04, 0x8c, 0x8b, 0x4f, 0x75, 0x33, 0x04, 0xcd, 0x7c,
	0x55, 0x03, 0x66, 0xf3, 0x5e, 0xdb, 0x39, 0xec, 0xf0, 0xae, 0xbf, 0x4e, 0x3a, 0xfd, 0xb7, 0xf7,
	0xcf, 0x98, 0x87, 0x33, 0xae, 0xd5, 0xf4, 0x89, 0x29, 0x2b, 0x31, 0x45, 0x54, 0xf3, 0xc3, 0x50,
	0x8c, 0x51, 0x9d, 0xb4, 0xc3, 0x17, 0x21, 0x27, 0x76, 0x4c, 0x18, 0xf3, 0xf1, 0xc0, 0x98, 0x49,
	0xb5, 0xea, 0x82, 0xcb, 0xfc, 0xa1, 0x06, 0x79, 0xcb, 0xb6, 0xc9, 0x53, 0x87, 0x2d, 0x1b, 0x5b,
	0x21, 0x33, 0xc4, 0x0a, 0xfa, 0x49, 0x56, 0xc8, 0x9e, 0xc6, 0x0a, 0xb9, 0x81, 0x56, 0x58, 0x82,
	0x42, 0x00, 0x94, 0x7c, 0x6a, 0x06, 0x32, 0xce, 0x1e, 0x21, 0x3d, 0x13, 0xb0, 0x66, 0x9c, 0x3d,
	0x84, 0xe9, 0x72, 0xcb, 0x73, 0xba, 0xca, 0x86, 0x04, 0x34, 0x73, 0x05, 0xf2, 0x2e, 0xef, 0x3c,
	0x9a, 0xae, 0x88, 0x23, 0x58, 0x64, 0x64, 0x1c, 0x8b, 0x00, 0xe2, 0xc0, 0x2c, 0x3b, 0x8e, 0x3f,
	0xdc, 0xc1, 0xcc, 0x97, 0x34, 0x98, 0x20, 0x87, 0xa6, 0xf8, 0x33, 0x03, 0x99, 0x96, 0xad, 0xf0,
	0x65, 0x5a, 0x36, 0x1a, 0x19, 0xcd, 0xb4, 0xd2, 0xee, 0x7b, 0x3e, 0x77, 0x15, 0x91, 0xf2, 0x00,
	0x29, 0x1d, 0x9c, 0x72, 0x6d, 0x61, 0x32, 0x52, 0x9a, 0xce, 0x3a, 0x22, 0xb6, 0x9a, 0x68, 0x11,
	0xdc, 0xa3, 0x6c, 0x84, 0x98, 0x68, 0xe6, 0x37, 0x33, 0x30, 0x15, 0x43, 0x1e, 0x55, 0xf1, 0xd8,
	0xea, 0x7a, 0xda, 0xea, 0xb1, 0xa7, 0x5c, 0x43, 0x57, 0xca, 0xca, 0x4a, 0x48, 0x03, 0x49, 0x8f,
	0xca, 0x9d, 0xc6, 0xa3, 0xc6, 0x07, 0x79, 0x94, 0xb1, 0x10, 0x05, 0xc3, 0x3c, 0x9d, 0x15, 0x16,
	0x9c, 0x95, 0xc8, 0xdc, 0x51, 0x78, 0x9c, 0x83, 0x6c, 0x87, 0xfb, 0xd6, 0xdc, 0x19, 0xc9, 0x6e,
	0x44, 0x31, 0x9f, 0x85, 0x52, 0xb3, 0x7d, 0xd8, 0xd8, 0x6f, 0x5f, 0xe3, 0x96, 0xeb, 0x2f, 0x73,
	0xcb, 0xc7, 0x68, 0x17, 0xe0, 0x20, 0xeb, 0x84, 0x4a, 0x84, 0x44, 0x54, 0x00, 0xa7, 0xde, 0x0c,
	0x22, 0x62, 0x46, 0x8a, 0x88, 0xf2, 0x80, 0xf9, 0x14, 0x4c, 0x27, 0x96, 0x26, 0xbb, 0x87, 0x58,
	0xb4, 0x14, 0x96, 0xd7, 0x34, 0x28, 0x77, 0x1d, 0xbf, 0xd5, 0x3c, 0x44, 0xef, 0x6c, 0x20, 0xf4,
	0x2d, 0xb1, 0x4f, 0x3d, 0xd5, 0x65, 0x9c, 0xde, 0xc8, 0xe7, 0xf9, 0xc4, 0x68, 0x85, 0x73, 0x7b,
	0xc9, 0x8d, 0x21, 0x4a, 0x1c, 0xad, 0xc7, 0x53, 0xd1, 0x5a, 0x72, 0xbf, 0xfc, 0x00, 0xf7, 0x2b,
	0x41, 0xb1, 0x1b, 0xab, 0xb4, 0xb5, 0x67, 0xae, 0xc2, 0x54, 0xcb, 0xbb, 0xe1, 0x5a, 0x5d, 0x6f,
	0xad, 0x5b, 0xe7, 0x96, 0x7d, 0x38, 0x2c, 0x15, 0x20, 0x24, 0x74, 0x72, 0x45, 0x55, 0xa2, 0x98,
	0x4f, 0x83, 0xa1, 0xae, 0x43, 0x26, 0x3e, 0x0b, 0x39, 0x17, 0x3f, 0x14, 0xef, 0x16, 0xa4, 0xe1,
	0x6b, 0x09, 0xeb, 0x37, 0xda, 0x8e, 0x4f, 0x6b, 0x6e, 0xf5, 0xfd, 0x88, 0x5f, 0x4b, 0xf2, 0xc7,
	0x88, 0x33, 0xe9, 0xe4, 0xb5, 0x08, 0x53, 0x9e, 0xb4, 0xca, 0xd6, 0xde, 0xf1, 0xeb, 0x98, 0x6b,
	0xe1, 0xae, 0x47, 0x72, 0xd7, 0xba, 0x23, 0x8a, 0xbd, 0x00, 0x45, 0x2f, 0x5e, 0x64, 0xa8, 0xd4,
	0xcb, 0x30, 0x6e, 0xd9, 0x36, 0x66, 0xa3, 0xf3, 0xa0, 0x7b, 0x5c, 0xb0, 0x14, 0xae, 0xcc, 0xa4,
	0xf2, 0x0d, 0x66, 0x6f, 0x64, 0x30, 0x3f, 0x08, 0x20, 0x66, 0x8c, 0x1c, 0x37, 0xcf, 0xe1, 0x68,
	0xe7, 0x84, 0x0c, 0x88, 0x72, 0x04, 0xd7, 0x23, 0xc4, 0xe7, 0x49, 0x8f, 0xfb, 0x35, 0xcb, 0xdd,
	0x5b, 0x69, 0x73, 0xcb, 0x1d, 0x2a, 0x6d, 0x15, 0x98, 0xcc, 0x3b, 0xb2, 0x4c, 0x06, 0x53, 0xbb,
	0xdc, 0x5f, 0x6d, 0x1f, 0x56, 0x2d, 0x9f, 0x6f, 0xb4, 0x3c, 0xdf, 0x5c, 0x00, 0x43, 0xa5, 0xd0,
	0xda, 0x06, 0x64, 0xdb, 0x2d, 0x0f, 0xcd, 0xad, 0x2f, 0x4c, 0xd4, 0xe9, 0x3f, 0x1e, 0x0f, 0xc1,
	0xd9, 0xd8, 0x6f, 0xd3, 0xd4, 0x27, 0xa1, 0xac, 0x10, 0x8e, 0x9d, 0xf9, 0x01, 0x60, 0x4d, 0x21,
	0x20, 0x8e, 0x5f, 0xe7, 0xa1, 0xb0, 0x6b, 0xf9, 0xbc, 0x31, 0x20, 0x86, 0xc9, 0x03, 0xe6, 0x2d,
	0x98, 0xc0, 0xb0, 0xb3, 0xda, 0x6a, 0x73, 0x1b, 0x1d, 0xa5, 0x6b, 0x75, 0x54, 0x6e, 0xa2, 0xe0,
	0x88, 0x7f, 0xd8, 0xe3, 0x6a, 0x85, 0x84, 0x14, 0x0c, 0x94, 0x36, 0x6f, 0x5a, 0xfd, 0xb6, 0x1a,
	0x68, 0x42, 0xa2, 0xe9, 0xc2, 0x24, 0x0a, 0x58, 0xb2, 0xed, 0x1b, 0xd6, 0xed, 0x36, 0x1f, 0x22,
	0x63, 0x01, 0xc6, 0x9b, 0x2d, 0xde, 0xb6, 0xc3, 0xaa, 0x27, 0x8c, 0xe4, 0x11, 0xbe, 0x7a, 0x30,
	0x2e, 0x97, 0xa2, 0xfa, 0xa0, 0x02, 0x7e, 0x15, 0x98, 0x2c, 0x73, 0xe4, 0xed, 0xec, 0x43, 0x31,
	0x58, 0x67, 0x55, 0x08, 0x3e, 0x0b, 0x39, 0x1f, 0x57, 0x54, 0xd0, 0x0b, 0xd2, 0x3b, 0x08, 0xbf,
	0x0a, 0x65, 0x45, 0xec, 0xc8, 0xf8, 0x6b, 0x50, 0xc2, 0x85, 0xea, 0xbc, 0xe3, 0x1c, 0x70, 0x61,
	0xfe, 0x61, 0x1a, 0x48, 0xb8, 0x32, 0x83, 0x70, 0xad, 0xc1, 0x74, 0x62, 0xb9, 0x91, 0x91, 0x35,
	0xc5, 0x0e, 0x89, 0xa5, 0x4e, 0x61, 0xdc, 0x59, 0xc5, 0xb8, 0x13, 0xa7, 0x36, 0xe5, 0xd3, 0x30,
	0x93, 0x94, 0x33, 0x32, 0xe6, 0x09, 0xc8, 0xef, 0x72, 0xbf, 0x86, 0x49, 0xba, 0x0a, 0x85, 0xe0,
	0xef, 0xa9, 0xae, 0x46, 0x61, 0xb6, 0xcf, 0xa4, 0xb2, 0xfd, 0x1d, 0x60, 0x22, 0xec, 0x3f, 0xd3,
	0xb3, 0x2d, 0x9f, 0xe3, 0x8a, 0x43, 0x93, 0xe0, 0x09, 0x5b, 0x14, 0x49, 0xd2, 0x53, 0x92, 0xde,
	0x03, 0xd0, 0xb3, 0x76, 0xf6, 0xb8, 0x7f, 0x83, 0x7b, 0x54, 0xde, 0x74, 0xb8, 0xe7, 0x59, 0xbb,
	0x89, 0xf2, 0x26, 0x20, 0x9a, 0x45, 0x52, 0x70, 0xfd, 0xa0, 0xe1, 0x5b, 0x7e, 0xdf, 0x33, 0x7f,
	0xa2, 0x41, 0x81, 0x00, 0x88, 0x6f, 0xaa, 0x8e, 0xa8, 0xbe, 0x52, 0xa3, 0x69, 0x48, 0x34, 0x4c,
	0x98, 0xc0, 0xfc, 0xb2, 0xe3, 0xf4, 0xbb, 0x6a, 0x92, 0x8d, 0xc9, 0xb8, 0xc6, 0xde, 0x81, 0xe0,
	0x90, 0x0b, 0xc9, 0x90, 0x98, 0xac, 0xb0, 0xb2, 0xc7, 0x54, 0x58, 0x54, 0xe6, 0x58, 0x6d, 0x51,
	0xaa, 0x9c, 0x89, 0xca, 0x1c, 0xab, 0xed, 0x9b, 0x3f, 0xc8, 0x40, 0x59, 0xd4, 0xbb, 0x8d, 0xff,
	0x00, 0x7b, 0x5c, 0xc4, 0x64, 0xd2, 0x45, 0x0c, 0x69, 0x86, 0x8c, 0x37, 0x30, 0x1a, 0xea, 0x8a,
	0x66, 0x21, 0x19, 0xcb, 0xab, 0x96, 0xb7, 0x21, 0x6e, 0xa8, 0x59, 0x09, 0x55, 0x44, 0x45, 0x8e,
	0x9e, 0xeb, 0xec, 0xba, 0xdc, 0xf3, 0x08, 0x77, 0x28, 0x25, 0xa2, 0x46, 0x5a, 0x8d, 0x27, 0xb5,
	0x4a, 0xda, 0x25, 0x7f, 0x9c, 0x5d, 0xce, 0x01, 0xb4, 0x2d, 0xcc, 0x1a, 0x54, 0xc8, 0x9d, 0x91,
	0xd8, 0x24, 0xba, 0xf9, 0x22, 0x4c, 0x86, 0x26, 0x22, 0xeb, 0x0c, 0xbf, 0x28, 0x5f, 0x56, 0x3a,
	0x0f, 0x85, 0x2b, 0x73, 0x41, 0x8c, 0x4b, 0x59, 0x39, 0x2a, 0xba, 0xa5, 0x3a, 0x5a, 0x1f, 0x50,
	0x47, 0x9b, 0xbf, 0xc2, 0x9b, 0x11, 0xf7, 0x03, 0xe9, 0xc3, 0x2e, 0x74, 0x26, 0x4c, 0x74, 0xc2,
	0x04, 0x4d, 0x5b, 0x13, 0x9a, 0x25, 0x26, 0x9f, 0xe8, 0x53, 0x8b, 0x11, 0x7e, 0xd1, 0x0a, 0x31,
	0xe4, 0xcb, 0x42, 0x02, 0xf9, 0x85, 0xf0, 0x0e, 0x9e, 0x53, 0x1a, 0x1a, 0xb2, 0xb5, 0xc2, 0xfb,
	0xf7, 0xaf, 0x35, 0x28, 0x49, 0xc7, 0x85, 0x62, 0xc2, 0x2c, 0xe8, 0x5d, 0xe7, 0x79, 0x25, 0x1e,
	0x20, 0x41, 0x86, 0x98, 0x19, 0x0c, 0xb1, 0xd8, 0x74, 0x39, 0xc7, 0x32, 0x70, 0x25, 0xa5, 0x88,
	0x3a, 0x64, 0x5c, 0x81, 0xb2, 0x8f, 0x55, 0x5e, 0x93, 0xbb, 0x31, 0xbf, 0x5c, 0xd0, 0xa7, 0x87,
	0x8d, 0x73, 0x41, 0x9b, 0x26, 0xa7, 0xde, 0x96, 0xc2, 0x2d, 0x08, 0x7a, 0x34, 0x7f, 0xd7, 0xa0,
	0x4c, 0x76, 0x10, 0x6e, 0xf2, 0x8e, 0x1c, 0x1d, 0x3a, 0x16, 0x41, 0xe3, 0x46, 0x57, 0x8f, 0x45,
	0xd0, 0x09, 0x92, 0x6c, 0x93, 0x1d, 0x64, 0x9b, 0x93, 0x8f, 0x4d, 0xe2, 0x70, 0x8c, 0x9f, 0x14,
	0x34, 0xf2, 0xa9, 0xa0, 0x71, 0x57, 0x03, 0x43, 0xec, 0xb1, 0xa2, 0xfa, 0xe8, 0x6d, 0x95, 0xf8,
	0xcc, 0xe8, 0xca, 0x99, 0x49, 0x99, 0x37, 0xf4, 0x3c, 0xf3, 0x59, 0x98, 0x16, 0x49, 0xa1, 0xd6,
	0xf2, 0xbc, 0x56, 0x77, 0xb7, 0x21, 0x1c, 0x32, 0xbe, 0xe9, 0x6a, 0xa7, 0xbc, 0xe9, 0xa6, 0xf3,
	0xcd, 0x4d, 0x98, 0xf2, 0x5d, 0xcb, 0xeb, 0x36, 0xb9, 0xbb, 0x11, 0xd9, 0x7c, 0xe8, 0x9e, 0x9e,
	0x03, 0x08, 0x9d, 0x88, 0x73, 0x65, 0x5f, 0x25, 0xba, 0x59, 0x85, 0x09, 0x6f, 0xc7, 0xea, 0x52,
	0x86, 0x45, 0x5b, 0x51, 0x7a, 0x56, 0x13, 0x39, 0x91, 0x4e, 0xac, 0x31, 0x2e, 0x01, 0xdb, 0xe5,
	0x7e, 0x63, 0xc7, 0xea, 0x52, 0x81, 0x11, 0x26, 0xc4, 0xe3, 0x0a, 0x03, 0xb3, 0x09, 0x33, 0x49,
	0x7e, 0x3a, 0x7e, 0x08, 0xdb, 0xba, 0x7d, 0x73, 0x40, 0x56, 0x96, 0xe8, 0xc7, 0xd6, 0x6c, 0x91,
	0x2e, 0x61, 0xa1, 0x81, 0xd5, 0x39, 0x35, 0x22, 0xb7, 0x6d, 0x61, 0x37, 0x73, 0x3d, 0xe8, 0x4c,
	0x86, 0x84, 0xf0, 0xd0, 0x1f, 0xd2, 0xfe, 0xc4, 0x5e, 0x85, 0x04, 0x39, 0x0a, 0x66, 0x06, 0x45,
	0xc1, 0xe7, 0x60, 0xc2, 0xb2, 0xed, 0x6d, 0xd1, 0xc1, 0x1b, 0xdc, 0x1e, 0x9a, 0x05, 0xbd, 0xef,
	0xb6, 0x95, 0xe9, 0x48, 0xc0, 0xb0, 0xb8, 0xd3, 0x6e, 0xf1, 0xae, 0xff, 0x8c, 0xdb, 0x56, 0x42,
	0x6c, 0x4c, 0x36, 0x7f, 0xac, 0x41, 0x31, 0x5a, 0x7f, 0xe4, 0xbe, 0x4f, 0x05, 0xf2, 0x3b, 0x41,
	0x73, 0x0a, 0xe5, 0x14, 0x43, 0x25, 0x02, 0xe2, 0xf0, 0xe6, 0x53, 0xb2, 0xbd, 0x95, 0x3b, 0xa6,
	0xbd, 0x65, 0x2e, 0xc3, 0xa4, 0x4b, 0xd5, 0xda, 0x50, 0x6b, 0x0c, 0x8d, 0x34, 0x58, 0xff, 0xcb,
	0x6b, 0x8c, 0x5c, 0xf1, 0x95, 0xa0, 0x88, 0x17, 0xac, 0x6d, 0xbb, 0xc6, 0x3b, 0xb7, 0xb9, 0xeb,
	0x99, 0x17, 0xa1, 0xac, 0x10, 0x82, 0x5e, 0x4e, 0xbe, 0x23, 0x3e, 0x83, 0x5b, 0x59, 0xf8, 0x69,
	0x5e, 0x84, 0xd2, 0x0e, 0xe6, 0x25, 0x3a, 0xc0, 0x2b, 0xd6, 0xce, 0x1d, 0x3e, 0xb4, 0xd9, 0xfd,
	0x6e, 0x28, 0x10, 0xfb, 0xd5, 0xe5, 0xab, 0x96, 0x6f, 0x61, 0xcd, 0x4b, 0x3e, 0x1e, 0x2e, 0x1b,
	0x7c, 0x99, 0x1f, 0x0a, 0x56, 0x15, 0x6c, 0x23, 0x2b, 0x37, 0x09, 0x40, 0xcb, 0x10, 0x2e, 0xf3,
	0x2a, 0x4c, 0xc5, 0x5f, 0x8f, 0x72, 0xff, 0xf5, 0xfa, 0x5e, 0x8f, 0x77, 0x6d, 0xcc, 0x85, 0xa8,
	0xd3, 0x35, 0x30, 0x54, 0xca, 0xa3, 0x6c, 0x86, 0xcb, 0xbd, 0x7e, 0x87, 0x87, 0x4b, 0x57, 0xa1,
	0xac, 0x10, 0x1e, 0xa9, 0x53, 0x20, 0x30, 0xd2, 0x3a, 0x43, 0xf7, 0xe8, 0x02, 0x14, 0x84, 0xd0,
	0x93, 0x59, 0xc5, 0x85, 0xfe, 0x6a, 0xd4, 0x43, 0xc1, 0xd4, 0x92, 0xed, 0x1e, 0xef, 0xd3, 0xff,
	0x8b, 0x57, 0x88, 0xdb, 0xd4, 0xe6, 0x39, 0x06, 0xc0, 0xbb, 0xd4, 0x57, 0x87, 0x42, 0x10, 0x0c,
	0xa5, 0x97, 0x06, 0xb5, 0x08, 0xd3, 0x07, 0x16, 0x61, 0xe6, 0xfb, 0xa8, 0x6f, 0x11, 0xeb, 0x1d,
	0x5c, 0x91, 0x44, 0xd9, 0x21, 0x52, 0x17, 0xc4, 0x65, 0x47, 0x50, 0x70, 0x5c, 0x84, 0x92, 0xe3,
	0xda, 0xdc, 0x6d, 0xf0, 0xfd, 0x3e, 0xef, 0xee, 0x60, 0xe6, 0x39, 0x0b, 0x39, 0x51, 0x0b, 0xc8,
	0xd1, 0x5b, 0x90, 0x4c, 0x0b, 0xa6, 0x13, 0xec, 0x23, 0x87, 0xb5, 0x59, 0xd0, 0x3b, 0xd6, 0x0b,
	0xca, 0xf5, 0x11, 0x09, 0x8b, 0xff, 0x28, 0x40, 0xb1, 0x41, 0xaf, 0x8c, 0x2b, 0x1d, 0x9b, 0xea,
	0xfa, 0x12, 0x14, 0xae, 0x63, 0xc8, 0x17, 0x01, 0x9f, 0x69, 0xc6, 0x34, 0x94, 0x24, 0x02, 0x22,
	0x60, 0x19, 0xa3, 0x00, 0xf9, 0x25, 0xf1, 0xc4, 0xc1, 0x76, 0x71, 0xca, 0x52, 0xfc, 0xde, 0xc1,
	0xee, 0xe0, 0x68, 0x5d, 0x3c, 0x3c, 0x30, 0x07, 0x47, 0xeb, 0xf1, 0x2b, 0x04, 0xeb, 0x19, 0x00,
	0xe3, 0x4b, 0xd4, 0x5d, 0x63, 0xfb, 0xc6, 0x14, 0xc0, 0x52, 0xd4, 0x69, 0x63, 0x2e, 0x8e, 0xd5,
	0xa9, 0x23, 0xc6, 0x3c, 0x1c, 0xab, 0x47, 0xdd, 0x31, 0xe6, 0x1b, 0x0c, 0x26, 0x1b, 0x52, 0xff,
	0x8a, 0xf5, 0x8d, 0x19, 0x60, 0x8d, 0x44, 0x47, 0x8b, 0x1d, 0xa0, 0xf4, 0xaa, 0xb8, 0xb7, 0xb2,
	0xe7, 0x51, 0x7a, 0x35, 0xbe, 0xc4, 0xb2, 0x17, 0x02, 0x42, 0x58, 0xc5, 0xb2, 0x43, 0xd4, 0xaf,
	0xaa, 0x96, 0xb5, 0xec, 0x23, 0x28, 0xab, 0x26, 0x35, 0x57, 0xd8, 0x47, 0x51, 0x56, 0x2d, 0xd1,
	0x6e, 0x61, 0x1f, 0x33, 0xca, 0x50, 0xac, 0xc9, 0x5d, 0x0c, 0xf6, 0x71, 0xe3, 0x31, 0x28, 0xd7,
	0x92, 0x8d, 0x0d, 0xf6, 0x22, 0x8a, 0xa9, 0xa9, 0x7d, 0x05, 0xf6, 0x09, 0x63, 0x0e, 0xa6, 0x6b,
	0xe9, 0x66, 0x03, 0xbb, 0xab, 0x19, 0x8f, 0x09, 0x71, 0xf2, 0x9d, 0x9e, 0x7d, 0x52, 0x33, 0xfe,
	0x0f, 0x66, 0x6a, 0x03, 0xae, 0xfa, 0xec, 0x53, 0x9a, 0x61, 0x40, 0xf1, 0xba, 0x9c, 0xab, 0xd9,
	0x4b, 0x9a, 0x31, 0x0b, 0xe5, 0xeb, 0xc9, 0xfc, 0xcd, 0x3e, 0xad, 0x19, 0x53, 0x30, 0xb1, 0x14,
	0xa6, 0x4a, 0xf6, 0x19, 0x9a, 0xbb, 0x24, 0xa7, 0x4e, 0xf6, 0x59, 0xcd, 0x28, 0xc3, 0x64, 0x5d,
	0xca, 0x2f, 0xec, 0x73, 0x04, 0xaa, 0x9e, 0x48, 0x39, 0xec, 0xf3, 0x34, 0x7b, 0x43, 0x4e, 0x18,
	0xec, 0x0b, 0x24, 0x79, 0x23, 0x99, 0x44, 0xd8, 0xcb, 0x9a, 0xc1, 0xa0, 0xb0, 0x12, 0xc7, 0x75,
	0xf6, 0x45, 0xcd, 0x98, 0x81, 0xd2, 0x8a, 0x1a, 0xe9, 0xd9, 0x97, 0x34, 0xa3, 0x04, 0xb0, 0x12,
	0x85, 0x6a, 0xf6, 0x65, 0x74, 0xc3, 0xa9, 0x15, 0x25, 0x76, 0xb3, 0xaf, 0x10, 0xb1, 0xa1, 0x04,
	0x5e, 0xf6, 0x55, 0xcd, 0x78, 0x1c, 0x8c, 0x46, 0x2a, 0x1a, 0xb3, 0x57, 0x08, 0x67, 0x5d, 0x8e,
	0xa5, 0xec, 0x6b, 0x84, 0xb3, 0x9e, 0x8c, 0xaf, 0xec, 0xeb, 0xc4, 0x5b, 0x95, 0xcf, 0x37, 0xfb,
	0x06, 0xf1, 0x56, 0x93, 0x67, 0x9e, 0xbd, 0x4a, 0x58, 0xd7, 0xa3, 0x17, 0x27, 0xf6, 0x1b, 0x82,
	0xb5, 0xae, 0x3c, 0x41, 0xb1, 0xdf, 0xd2, 0xec, 0xcd, 0xe4, 0x93, 0x07, 0xfb, 0x1d, 0x49, 0xda,
	0x94, 0x5f, 0x0c, 0xd8, 0xef, 0x69, 0x81, 0x35, 0xa5, 0xd9, 0xcf, 0xfe, 0x40, 0x7a, 0xad, 0xa5,
	0x5e, 0x00, 0xd8, 0x6b, 0x34, 0xb0, 0x99, 0x6a, 0xe7, 0xb3, 0x3f, 0x0a, 0xf3, 0x28, 0xbd, 0x79,
	0xf6, 0x27, 0x09, 0x87, 0xd4, 0x84, 0x67, 0x7f, 0x26, 0x1c, 0x0d, 0xb9, 0xa3, 0xce, 0xfe, 0x42,
	0x1b, 0xbe, 0x99, 0xe8, 0xdc, 0xb0, 0x37, 0x48, 0xe0, 0x7a, 0xea, 0xf6, 0xc0, 0xfe, 0x4a, 0x02,
	0x6f, 0x28, 0x95, 0x37, 0x7b, 0x33, 0xde, 0xe0, 0xb8, 0x40, 0x60, 0x0f, 0x34, 0x74, 0xfd, 0xcd,
	0x74, 0xfd, 0xcf, 0x8e, 0xc8, 0xf1, 0x1a, 0x52, 0xa6, 0x62, 0x0f, 0xc9, 0x6b, 0xea, 0x71, 0x42,
	0x62, 0x7f, 0x23, 0x49, 0xd7, 0x95, 0xe7, 0x7b, 0xf6, 0xd3, 0x0c, 0xe2, 0xba, 0x9e, 0x7a, 0xd3,
	0x67, 0x3f, 0xcb, 0xa0, 0x1e, 0xab, 0x89, 0xe6, 0x31, 0xfb, 0x39, 0x91, 0xab, 0x89, 0xba, 0x9a,
	0xfd, 0x22, 0x83, 0x87, 0xac, 0x3a, 0xa0, 0xdc, 0x66, 0xbf, 0xcc, 0xa0, 0x2e, 0xab, 0xea, 0x4b,
	0x17, 0xfb, 0xa7, 0x8e, 0xba, 0xac, 0xa6, 0xdf, 0xbf, 0xd8, 0xbf, 0x74, 0x84, 0x59, 0x55, 0x3a,
	0xe3, 0xec, 0x5b, 0x3a, 0xc2, 0xac, 0xa6, 0xda, 0xe5, 0xec, 0xdb, 0x7a, 0xe0, 0x74, 0x71, 0x33,
	0x9c, 0x7d, 0x47, 0x0f, 0x9c, 0x4e, 0x6d, 0x90, 0xb3, 0xef, 0xea, 0x88, 0x64, 0x4b, 0x4d, 0x0e,
	0xec, 0x7b, 0x84, 0x64, 0x2b, 0x9d, 0x32, 0xd8, 0xf7, 0x75, 0x74, 0xd2, 0xed, 0xa8, 0x35, 0xc6,
	0xde, 0xca, 0x2f, 0x2e, 0x43, 0x21, 0xf0, 0x39, 0x8a, 0xfb, 0x22, 0x12, 0x6f, 0x70, 0xcb, 0xed,
	0x52, 0xd8, 0x37, 0x60, 0x6a, 0xdb, 0x75, 0x3a, 0x8e, 0xcf, 0x43, 0x5a, 0x26, 0x08, 0xe5, 0xce,
	0x41, 0xb0, 0x0d, 0xd9, 0xe5, 0xf7, 0xdf, 0x7b, 0x50, 0xd1, 0xee, 0x3f, 0xa8, 0x68, 0xaf, 0x3f,
	0xa8, 0x8c, 0xbd, 0xfd, 0xa0, 0xa2, 0xdd, 0x3d, 0xaa, 0x68, 0x3f, 0x3a, 0xaa, 0x68, 0xf7, 0x8e,
	0x2a, 0xda, 0xfd, 0xa3, 0x8a, 0xf6, 0xe6, 0x51, 0x45, 0x7b, 0xeb, 0xa8, 0x32, 0xf6, 0xf6, 0x51,
	0x45, 0x7b, 0xe5, 0x61, 0x65, 0xec, 0xfe, 0xc3, 0xca, 0xd8, 0xeb, 0x0f, 0x2b, 0x63, 0xff, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0xe1, 0xcd, 0xa9, 0x03, 0xe4, 0x22, 0x00, 0x00,
}

func (x ServerCmdType) String() string {
	s, ok := ServerCmdType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StoreOpType) String() string {
	s, ok := StoreOpType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *QueryRouteInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRouteInfo)
	if !ok {
		that2, ok := that.(QueryRouteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *RouteInfoKvNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteInfoKvNode)
	if !ok {
		that2, ok := that.(RouteInfoKvNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	return true
}
func (this *RouteInfoSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteInfoSet)
	if !ok {
		that2, ok := that.(RouteInfoSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if this.Stores[i] != that1.Stores[i] {
			return false
		}
	}
	if len(this.Slots) != len(that1.Slots) {
		return false
	}
	for i := range this.Slots {
		if !bytes.Equal(this.Slots[i], that1.Slots[i]) {
			return false
		}
	}
	if len(this.Kvnodes) != len(that1.Kvnodes) {
		return false
	}
	for i := range this.Kvnodes {
		if !this.Kvnodes[i].Equal(that1.Kvnodes[i]) {
			return false
		}
	}
	return true
}
func (this *QueryRouteInfoResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRouteInfoResp)
	if !ok {
		that2, ok := that.(QueryRouteInfoResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.Sets) != len(that1.Sets) {
		return false
	}
	for i := range this.Sets {
		if !this.Sets[i].Equal(that1.Sets[i]) {
			return false
		}
	}
	return true
}
func (this *QueryLeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryLeader)
	if !ok {
		that2, ok := that.(QueryLeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *QueryLeaderResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryLeaderResp)
	if !ok {
		that2, ok := that.(QueryLeaderResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Leader != that1.Leader {
		return false
	}
	return true
}
func (this *DeploymentKvnode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentKvnode)
	if !ok {
		that2, ok := that.(DeploymentKvnode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	return true
}
func (this *DeploymentSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentSet)
	if !ok {
		that2, ok := that.(DeploymentSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *AddNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddNode)
	if !ok {
		that2, ok := that.(AddNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	return true
}
func (this *AddNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddNodeResp)
	if !ok {
		that2, ok := that.(AddNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *RemNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemNode)
	if !ok {
		that2, ok := that.(RemNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *RemNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemNodeResp)
	if !ok {
		that2, ok := that.(RemNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *KvnodeBoot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeBoot)
	if !ok {
		that2, ok := that.(KvnodeBoot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *StoreInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreInfo)
	if !ok {
		that2, ok := that.(StoreInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RaftCluster != that1.RaftCluster {
		return false
	}
	if !bytes.Equal(this.Slots, that1.Slots) {
		return false
	}
	if this.RaftID != that1.RaftID {
		return false
	}
	return true
}
func (this *KvnodeBootResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeBootResp)
	if !ok {
		that2, ok := that.(KvnodeBootResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.ServiceHost != that1.ServiceHost {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if !this.Stores[i].Equal(that1.Stores[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *FlySqlHeartBeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlySqlHeartBeat)
	if !ok {
		that2, ok := that.(FlySqlHeartBeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.MetaVersion != that1.MetaVersion {
		return false
	}
	return true
}
func (this *FlySqlHeartBeatResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlySqlHeartBeatResp)
	if !ok {
		that2, ok := that.(FlySqlHeartBeatResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *NotifyNodeStoreOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyNodeStoreOp)
	if !ok {
		that2, ok := that.(NotifyNodeStoreOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if this.RaftID != that1.RaftID {
		return false
	}
	return true
}
func (this *NodeStoreOpOk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeStoreOpOk)
	if !ok {
		that2, ok := that.(NodeStoreOpOk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *IsTransInReady) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsTransInReady)
	if !ok {
		that2, ok := that.(IsTransInReady)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *IsTransInReadyResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsTransInReadyResp)
	if !ok {
		that2, ok := that.(IsTransInReadyResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *NotifySlotTransOut) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifySlotTransOut)
	if !ok {
		that2, ok := that.(NotifySlotTransOut)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *SlotTransOutOk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlotTransOutOk)
	if !ok {
		that2, ok := that.(SlotTransOutOk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *NotifySlotTransIn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifySlotTransIn)
	if !ok {
		that2, ok := that.(NotifySlotTransIn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *SlotTransInOk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlotTransInOk)
	if !ok {
		that2, ok := that.(SlotTransInOk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *AddSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddSet)
	if !ok {
		that2, ok := that.(AddSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Set.Equal(that1.Set) {
		return false
	}
	return true
}
func (this *AddSetResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddSetResp)
	if !ok {
		that2, ok := that.(AddSetResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *RemSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemSet)
	if !ok {
		that2, ok := that.(RemSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	return true
}
func (this *RemSetResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemSetResp)
	if !ok {
		that2, ok := that.(RemSetResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *SetMarkClear) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMarkClear)
	if !ok {
		that2, ok := that.(SetMarkClear)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	return true
}
func (this *SetMarkClearResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMarkClearResp)
	if !ok {
		that2, ok := that.(SetMarkClearResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *GetFlyGateList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFlyGateList)
	if !ok {
		that2, ok := that.(GetFlyGateList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetFlyGateListResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFlyGateListResp)
	if !ok {
		that2, ok := that.(GetFlyGateListResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if this.List[i] != that1.List[i] {
			return false
		}
	}
	return true
}
func (this *GetFlySqlList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFlySqlList)
	if !ok {
		that2, ok := that.(GetFlySqlList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetFlySqlListResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFlySqlListResp)
	if !ok {
		that2, ok := that.(GetFlySqlListResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if this.List[i] != that1.List[i] {
			return false
		}
	}
	return true
}
func (this *FlyGateHeartBeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlyGateHeartBeat)
	if !ok {
		that2, ok := that.(FlyGateHeartBeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GateService != that1.GateService {
		return false
	}
	return true
}
func (this *MetaFiled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaFiled)
	if !ok {
		that2, ok := that.(MetaFiled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Default != that1.Default {
		return false
	}
	return true
}
func (this *MetaAddTable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaAddTable)
	if !ok {
		that2, ok := that.(MetaAddTable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *MetaAddTableResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaAddTableResp)
	if !ok {
		that2, ok := that.(MetaAddTableResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *MetaAddFields) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaAddFields)
	if !ok {
		that2, ok := that.(MetaAddFields)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Table != that1.Table {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *MetaAddFieldsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaAddFieldsResp)
	if !ok {
		that2, ok := that.(MetaAddFieldsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *MetaRemoveTable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaRemoveTable)
	if !ok {
		that2, ok := that.(MetaRemoveTable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Table != that1.Table {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *MetaRemoveTableResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaRemoveTableResp)
	if !ok {
		that2, ok := that.(MetaRemoveTableResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *MetaRemoveFields) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaRemoveFields)
	if !ok {
		that2, ok := that.(MetaRemoveFields)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Table != that1.Table {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if this.Fields[i] != that1.Fields[i] {
			return false
		}
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *MetaRemoveFieldsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaRemoveFieldsResp)
	if !ok {
		that2, ok := that.(MetaRemoveFieldsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *GetMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMeta)
	if !ok {
		that2, ok := that.(GetMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetMetaResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMetaResp)
	if !ok {
		that2, ok := that.(GetMetaResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *NotifyUpdateMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyUpdateMeta)
	if !ok {
		that2, ok := that.(NotifyUpdateMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *PacketTest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketTest)
	if !ok {
		that2, ok := that.(PacketTest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *GetKvStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetKvStatus)
	if !ok {
		that2, ok := that.(GetKvStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StoreStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreStatus)
	if !ok {
		that2, ok := that.(StoreStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoreID != that1.StoreID {
		return false
	}
	if this.Slotcount != that1.Slotcount {
		return false
	}
	if this.Kvcount != that1.Kvcount {
		return false
	}
	if this.MetaVersion != that1.MetaVersion {
		return false
	}
	if this.Halt != that1.Halt {
		return false
	}
	return true
}
func (this *KvnodeStoreStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeStoreStatus)
	if !ok {
		that2, ok := that.(KvnodeStoreStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoreID != that1.StoreID {
		return false
	}
	if this.RaftID != that1.RaftID {
		return false
	}
	if this.StoreType != that1.StoreType {
		return false
	}
	if this.IsLeader != that1.IsLeader {
		return false
	}
	if this.Progress != that1.Progress {
		return false
	}
	if this.Halt != that1.Halt {
		return false
	}
	if this.MetaVersion != that1.MetaVersion {
		return false
	}
	if this.LastReport != that1.LastReport {
		return false
	}
	return true
}
func (this *KvnodeStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeStatus)
	if !ok {
		that2, ok := that.(KvnodeStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if !this.Stores[i].Equal(that1.Stores[i]) {
			return false
		}
	}
	if this.Service != that1.Service {
		return false
	}
	return true
}
func (this *SetStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetStatus)
	if !ok {
		that2, ok := that.(SetStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.MarkClear != that1.MarkClear {
		return false
	}
	if this.Kvcount != that1.Kvcount {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if !this.Stores[i].Equal(that1.Stores[i]) {
			return false
		}
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *GetKvStatusResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetKvStatusResp)
	if !ok {
		that2, ok := that.(GetKvStatusResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Now != that1.Now {
		return false
	}
	if this.Kvcount != that1.Kvcount {
		return false
	}
	if this.FreeSlotCount != that1.FreeSlotCount {
		return false
	}
	if this.TransferSlotCount != that1.TransferSlotCount {
		return false
	}
	if len(this.Sets) != len(that1.Sets) {
		return false
	}
	for i := range this.Sets {
		if !this.Sets[i].Equal(that1.Sets[i]) {
			return false
		}
	}
	return true
}
func (this *StoreReportStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreReportStatus)
	if !ok {
		that2, ok := that.(StoreReportStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoreID != that1.StoreID {
		return false
	}
	if this.RaftID != that1.RaftID {
		return false
	}
	if this.Isleader != that1.Isleader {
		return false
	}
	if this.Kvcount != that1.Kvcount {
		return false
	}
	if this.Progress != that1.Progress {
		return false
	}
	if this.MetaVersion != that1.MetaVersion {
		return false
	}
	if this.Halt != that1.Halt {
		return false
	}
	return true
}
func (this *KvnodeReportStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvnodeReportStatus)
	if !ok {
		that2, ok := that.(KvnodeReportStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SetID != that1.SetID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if !this.Stores[i].Equal(that1.Stores[i]) {
			return false
		}
	}
	return true
}
func (this *NotifyMissingStores) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyMissingStores)
	if !ok {
		that2, ok := that.(NotifyMissingStores)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Stores) != len(that1.Stores) {
		return false
	}
	for i := range this.Stores {
		if !this.Stores[i].Equal(that1.Stores[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	return true
}
func (this *TrasnferLeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrasnferLeader)
	if !ok {
		that2, ok := that.(TrasnferLeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoreID != that1.StoreID {
		return false
	}
	if this.Transferee != that1.Transferee {
		return false
	}
	return true
}
func (this *ScanField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScanField)
	if !ok {
		that2, ok := that.(ScanField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *GetScanTableMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScanTableMeta)
	if !ok {
		that2, ok := that.(GetScanTableMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Table != that1.Table {
		return false
	}
	return true
}
func (this *GetScanTableMetaResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScanTableMetaResp)
	if !ok {
		that2, ok := that.(GetScanTableMetaResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TabVersion != that1.TabVersion {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *QueryPdLeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryPdLeader)
	if !ok {
		that2, ok := that.(QueryPdLeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QueryPdLeaderResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryPdLeaderResp)
	if !ok {
		that2, ok := that.(QueryPdLeaderResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Yes != that1.Yes {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	return true
}
func (this *AddPdNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddPdNode)
	if !ok {
		that2, ok := that.(AddPdNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.ClientUrl != that1.ClientUrl {
		return false
	}
	return true
}
func (this *AddPdNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddPdNodeResp)
	if !ok {
		that2, ok := that.(AddPdNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	if this.RaftID != that1.RaftID {
		return false
	}
	if this.RaftCluster != that1.RaftCluster {
		return false
	}
	return true
}
func (this *RemovePdNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemovePdNode)
	if !ok {
		that2, ok := that.(RemovePdNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RaftID != that1.RaftID {
		return false
	}
	return true
}
func (this *RemovePdNodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemovePdNodeResp)
	if !ok {
		that2, ok := that.(RemovePdNodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *ListPdMembers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListPdMembers)
	if !ok {
		that2, ok := that.(ListPdMembers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListPdMembersResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListPdMembersResp)
	if !ok {
		that2, ok := that.(ListPdMembersResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if this.Members[i] != that1.Members[i] {
			return false
		}
	}
	return true
}
func (this *ClearStoreCache) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClearStoreCache)
	if !ok {
		that2, ok := that.(ClearStoreCache)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *ClearDBData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClearDBData)
	if !ok {
		that2, ok := that.(ClearDBData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tables) != len(that1.Tables) {
		return false
	}
	for i := range this.Tables {
		if this.Tables[i] != that1.Tables[i] {
			return false
		}
	}
	return true
}
func (this *ClearDBDataResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClearDBDataResp)
	if !ok {
		that2, ok := that.(ClearDBDataResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *ClearCache) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClearCache)
	if !ok {
		that2, ok := that.(ClearCache)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ClearCacheResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClearCacheResp)
	if !ok {
		that2, ok := that.(ClearCacheResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *SuspendKvStore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuspendKvStore)
	if !ok {
		that2, ok := that.(SuspendKvStore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SuspendKvStoreResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuspendKvStoreResp)
	if !ok {
		that2, ok := that.(SuspendKvStoreResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *ResumeKvStore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResumeKvStore)
	if !ok {
		that2, ok := that.(ResumeKvStore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResumeKvStoreResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResumeKvStoreResp)
	if !ok {
		that2, ok := that.(ResumeKvStoreResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *SuspendStore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuspendStore)
	if !ok {
		that2, ok := that.(SuspendStore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *ResumeStore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResumeStore)
	if !ok {
		that2, ok := that.(ResumeStore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *GetDeployment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeployment)
	if !ok {
		that2, ok := that.(GetDeployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ServicePort != that1.ServicePort {
		return false
	}
	if this.RaftPort != that1.RaftPort {
		return false
	}
	return true
}
func (this *Set) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Set)
	if !ok {
		that2, ok := that.(Set)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	if this.MarkClear != that1.MarkClear {
		return false
	}
	return true
}
func (this *GetDeploymentResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeploymentResp)
	if !ok {
		that2, ok := that.(GetDeploymentResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sets) != len(that1.Sets) {
		return false
	}
	for i := range this.Sets {
		if !this.Sets[i].Equal(that1.Sets[i]) {
			return false
		}
	}
	return true
}
func (this *OrderSequenceID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderSequenceID)
	if !ok {
		that2, ok := that.(OrderSequenceID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *OrderSequenceIDResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderSequenceIDResp)
	if !ok {
		that2, ok := that.(OrderSequenceIDResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	return true
}
func (this *QueryRouteInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.QueryRouteInfo{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteInfoKvNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.RouteInfoKvNode{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteInfoSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.RouteInfoSet{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	if this.Slots != nil {
		s = append(s, "Slots: "+fmt.Sprintf("%#v", this.Slots)+",\n")
	}
	if this.Kvnodes != nil {
		s = append(s, "Kvnodes: "+fmt.Sprintf("%#v", this.Kvnodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRouteInfoResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.QueryRouteInfoResp{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Sets != nil {
		s = append(s, "Sets: "+fmt.Sprintf("%#v", this.Sets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryLeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.QueryLeader{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryLeaderResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.QueryLeaderResp{")
	s = append(s, "Leader: "+fmt.Sprintf("%#v", this.Leader)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentKvnode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.DeploymentKvnode{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.DeploymentSet{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.AddNode{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.AddNodeResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemNode{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemNodeResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeBoot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.KvnodeBoot{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.StoreInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "RaftCluster: "+fmt.Sprintf("%#v", this.RaftCluster)+",\n")
	s = append(s, "Slots: "+fmt.Sprintf("%#v", this.Slots)+",\n")
	s = append(s, "RaftID: "+fmt.Sprintf("%#v", this.RaftID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeBootResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&proto.KvnodeBootResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "ServiceHost: "+fmt.Sprintf("%#v", this.ServiceHost)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlySqlHeartBeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.FlySqlHeartBeat{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "MetaVersion: "+fmt.Sprintf("%#v", this.MetaVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlySqlHeartBeatResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.FlySqlHeartBeatResp{")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyNodeStoreOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&proto.NotifyNodeStoreOp{")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "RaftID: "+fmt.Sprintf("%#v", this.RaftID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeStoreOpOk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.NodeStoreOpOk{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsTransInReady) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.IsTransInReady{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsTransInReadyResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.IsTransInReadyResp{")
	s = append(s, "Ready: "+fmt.Sprintf("%#v", this.Ready)+",\n")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifySlotTransOut) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifySlotTransOut{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlotTransOutOk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SlotTransOutOk{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifySlotTransIn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifySlotTransIn{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlotTransInOk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SlotTransInOk{")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.AddSet{")
	if this.Set != nil {
		s = append(s, "Set: "+fmt.Sprintf("%#v", this.Set)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddSetResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.AddSetResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.RemSet{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemSetResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemSetResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMarkClear) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SetMarkClear{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMarkClearResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.SetMarkClearResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFlyGateList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.GetFlyGateList{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFlyGateListResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GetFlyGateListResp{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFlySqlList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.GetFlySqlList{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFlySqlListResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GetFlySqlListResp{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlyGateHeartBeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.FlyGateHeartBeat{")
	s = append(s, "GateService: "+fmt.Sprintf("%#v", this.GateService)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaFiled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.MetaFiled{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Default: "+fmt.Sprintf("%#v", this.Default)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaAddTable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.MetaAddTable{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaAddTableResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.MetaAddTableResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaAddFields) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.MetaAddFields{")
	s = append(s, "Table: "+fmt.Sprintf("%#v", this.Table)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaAddFieldsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.MetaAddFieldsResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaRemoveTable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.MetaRemoveTable{")
	s = append(s, "Table: "+fmt.Sprintf("%#v", this.Table)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaRemoveTableResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.MetaRemoveTableResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaRemoveFields) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.MetaRemoveFields{")
	s = append(s, "Table: "+fmt.Sprintf("%#v", this.Table)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaRemoveFieldsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.MetaRemoveFieldsResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.GetMeta{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMetaResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.GetMetaResp{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyUpdateMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.NotifyUpdateMeta{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PacketTest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PacketTest{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetKvStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.GetKvStatus{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.StoreStatus{")
	s = append(s, "StoreID: "+fmt.Sprintf("%#v", this.StoreID)+",\n")
	s = append(s, "Slotcount: "+fmt.Sprintf("%#v", this.Slotcount)+",\n")
	s = append(s, "Kvcount: "+fmt.Sprintf("%#v", this.Kvcount)+",\n")
	s = append(s, "MetaVersion: "+fmt.Sprintf("%#v", this.MetaVersion)+",\n")
	s = append(s, "Halt: "+fmt.Sprintf("%#v", this.Halt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeStoreStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&proto.KvnodeStoreStatus{")
	s = append(s, "StoreID: "+fmt.Sprintf("%#v", this.StoreID)+",\n")
	s = append(s, "RaftID: "+fmt.Sprintf("%#v", this.RaftID)+",\n")
	s = append(s, "StoreType: "+fmt.Sprintf("%#v", this.StoreType)+",\n")
	s = append(s, "IsLeader: "+fmt.Sprintf("%#v", this.IsLeader)+",\n")
	s = append(s, "Progress: "+fmt.Sprintf("%#v", this.Progress)+",\n")
	s = append(s, "Halt: "+fmt.Sprintf("%#v", this.Halt)+",\n")
	s = append(s, "MetaVersion: "+fmt.Sprintf("%#v", this.MetaVersion)+",\n")
	s = append(s, "LastReport: "+fmt.Sprintf("%#v", this.LastReport)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.KvnodeStatus{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.SetStatus{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "MarkClear: "+fmt.Sprintf("%#v", this.MarkClear)+",\n")
	s = append(s, "Kvcount: "+fmt.Sprintf("%#v", this.Kvcount)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetKvStatusResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.GetKvStatusResp{")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "Kvcount: "+fmt.Sprintf("%#v", this.Kvcount)+",\n")
	s = append(s, "FreeSlotCount: "+fmt.Sprintf("%#v", this.FreeSlotCount)+",\n")
	s = append(s, "TransferSlotCount: "+fmt.Sprintf("%#v", this.TransferSlotCount)+",\n")
	if this.Sets != nil {
		s = append(s, "Sets: "+fmt.Sprintf("%#v", this.Sets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreReportStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&proto.StoreReportStatus{")
	s = append(s, "StoreID: "+fmt.Sprintf("%#v", this.StoreID)+",\n")
	s = append(s, "RaftID: "+fmt.Sprintf("%#v", this.RaftID)+",\n")
	s = append(s, "Isleader: "+fmt.Sprintf("%#v", this.Isleader)+",\n")
	s = append(s, "Kvcount: "+fmt.Sprintf("%#v", this.Kvcount)+",\n")
	s = append(s, "Progress: "+fmt.Sprintf("%#v", this.Progress)+",\n")
	s = append(s, "MetaVersion: "+fmt.Sprintf("%#v", this.MetaVersion)+",\n")
	s = append(s, "Halt: "+fmt.Sprintf("%#v", this.Halt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KvnodeReportStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.KvnodeReportStatus{")
	s = append(s, "SetID: "+fmt.Sprintf("%#v", this.SetID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyMissingStores) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.NotifyMissingStores{")
	if this.Stores != nil {
		s = append(s, "Stores: "+fmt.Sprintf("%#v", this.Stores)+",\n")
	}
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrasnferLeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.TrasnferLeader{")
	s = append(s, "StoreID: "+fmt.Sprintf("%#v", this.StoreID)+",\n")
	s = append(s, "Transferee: "+fmt.Sprintf("%#v", this.Transferee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScanField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ScanField{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScanTableMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GetScanTableMeta{")
	s = append(s, "Table: "+fmt.Sprintf("%#v", this.Table)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScanTableMetaResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.GetScanTableMetaResp{")
	s = append(s, "TabVersion: "+fmt.Sprintf("%#v", this.TabVersion)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryPdLeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.QueryPdLeader{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryPdLeaderResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.QueryPdLeaderResp{")
	s = append(s, "Yes: "+fmt.Sprintf("%#v", this.Yes)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddPdNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.AddPdNode{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "ClientUrl: "+fmt.Sprintf("%#v", this.ClientUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddPdNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.AddPdNodeResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Cluster: "+fmt.Sprintf("%#v", this.Cluster)+",\n")
	s = append(s, "RaftID: "+fmt.Sprintf("%#v", this.RaftID)+",\n")
	s = append(s, "RaftCluster: "+fmt.Sprintf("%#v", this.RaftCluster)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemovePdNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemovePdNode{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "RaftID: "+fmt.Sprintf("%#v", this.RaftID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemovePdNodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.RemovePdNodeResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListPdMembers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.ListPdMembers{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListPdMembersResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.ListPdMembersResp{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClearStoreCache) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.ClearStoreCache{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClearDBData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.ClearDBData{")
	if this.Tables != nil {
		s = append(s, "Tables: "+fmt.Sprintf("%#v", this.Tables)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClearDBDataResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ClearDBDataResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClearCache) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.ClearCache{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClearCacheResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ClearCacheResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuspendKvStore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.SuspendKvStore{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuspendKvStoreResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.SuspendKvStoreResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResumeKvStore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.ResumeKvStore{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResumeKvStoreResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.ResumeKvStoreResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuspendStore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SuspendStore{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResumeStore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.ResumeStore{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeployment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.GetDeployment{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.Node{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ServicePort: "+fmt.Sprintf("%#v", this.ServicePort)+",\n")
	s = append(s, "RaftPort: "+fmt.Sprintf("%#v", this.RaftPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Set) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.Set{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "MarkClear: "+fmt.Sprintf("%#v", this.MarkClear)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeploymentResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GetDeploymentResp{")
	if this.Sets != nil {
		s = append(s, "Sets: "+fmt.Sprintf("%#v", this.Sets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderSequenceID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.OrderSequenceID{")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderSequenceIDResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.OrderSequenceIDResp{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Max: "+fmt.Sprintf("%#v", this.Max)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlyfishServer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueryRouteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRouteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRouteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RouteInfoKvNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteInfoKvNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteInfoKvNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x18
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RouteInfoSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteInfoSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteInfoSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kvnodes) > 0 {
		for iNdEx := len(m.Kvnodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Kvnodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Slots) > 0 {
		for iNdEx := len(m.Slots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Slots[iNdEx])
			copy(dAtA[i:], m.Slots[iNdEx])
			i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Slots[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Stores[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *QueryRouteInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRouteInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRouteInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *QueryLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *QueryLeaderResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLeaderResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLeaderResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Leader))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DeploymentKvnode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentKvnode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentKvnode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x20
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x18
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DeploymentSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x28
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x20
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeBoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeBoot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeBoot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *StoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftID))
	i--
	dAtA[i] = 0x20
	if m.Slots != nil {
		i -= len(m.Slots)
		copy(dAtA[i:], m.Slots)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Slots)))
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.RaftCluster)
	copy(dAtA[i:], m.RaftCluster)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.RaftCluster)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeBootResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeBootResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeBootResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x30
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x28
	i -= len(m.ServiceHost)
	copy(dAtA[i:], m.ServiceHost)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.ServiceHost)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x18
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FlySqlHeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlySqlHeartBeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlySqlHeartBeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MetaVersion))
	i--
	dAtA[i] = 0x10
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FlySqlHeartBeatResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlySqlHeartBeatResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlySqlHeartBeatResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyNodeStoreOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyNodeStoreOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyNodeStoreOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftID))
	i--
	dAtA[i] = 0x38
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x30
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x28
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x20
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Op))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodeStoreOpOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStoreOpOk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeStoreOpOk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *IsTransInReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTransInReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTransInReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *IsTransInReadyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTransInReadyResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTransInReadyResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x10
	i--
	if m.Ready {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifySlotTransOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifySlotTransOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifySlotTransOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SlotTransOutOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotTransOutOk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotTransOutOk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifySlotTransIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifySlotTransIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifySlotTransIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SlotTransInOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotTransInOk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotTransInOk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Set != nil {
		{
			size, err := m.Set.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddSetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSetResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSetResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemSetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemSetResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemSetResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SetMarkClear) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMarkClear) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMarkClear) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SetMarkClearResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMarkClearResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMarkClearResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GetFlyGateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFlyGateList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFlyGateList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetFlyGateListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFlyGateListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFlyGateListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetFlySqlList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFlySqlList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFlySqlList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetFlySqlListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFlySqlListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFlySqlListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlyGateHeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlyGateHeartBeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlyGateHeartBeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.GateService)
	copy(dAtA[i:], m.GateService)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.GateService)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetaFiled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaFiled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaFiled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Default)
	copy(dAtA[i:], m.Default)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Default)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetaAddTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaAddTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaAddTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x18
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetaAddTableResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaAddTableResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaAddTableResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MetaAddFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaAddFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaAddFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x18
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Table)
	copy(dAtA[i:], m.Table)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Table)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetaAddFieldsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaAddFieldsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaAddFieldsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MetaRemoveTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaRemoveTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaRemoveTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	i -= len(m.Table)
	copy(dAtA[i:], m.Table)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Table)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetaRemoveTableResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaRemoveTableResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaRemoveTableResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MetaRemoveFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaRemoveFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaRemoveFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x18
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Table)
	copy(dAtA[i:], m.Table)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Table)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetaRemoveFieldsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaRemoveFieldsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaRemoveFieldsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GetMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMetaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifyUpdateMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyUpdateMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyUpdateMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PacketTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetKvStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKvStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetKvStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StoreStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Halt {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MetaVersion))
	i--
	dAtA[i] = 0x20
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Kvcount))
	i--
	dAtA[i] = 0x18
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Slotcount))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeStoreStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeStoreStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeStoreStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.LastReport))
	i--
	dAtA[i] = 0x40
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MetaVersion))
	i--
	dAtA[i] = 0x38
	i--
	if m.Halt {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Progress))
	i--
	dAtA[i] = 0x28
	i--
	if m.IsLeader {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.StoreType))
	i--
	dAtA[i] = 0x18
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0x1a
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SetStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Kvcount))
	i--
	dAtA[i] = 0x18
	i--
	if m.MarkClear {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GetKvStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKvStatusResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetKvStatusResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.TransferSlotCount))
	i--
	dAtA[i] = 0x20
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.FreeSlotCount))
	i--
	dAtA[i] = 0x18
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Kvcount))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Now))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *StoreReportStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreReportStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreReportStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Halt {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.MetaVersion))
	i--
	dAtA[i] = 0x30
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Progress))
	i--
	dAtA[i] = 0x28
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Kvcount))
	i--
	dAtA[i] = 0x20
	i--
	if m.Isleader {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *KvnodeReportStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvnodeReportStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvnodeReportStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.NodeID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.SetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NotifyMissingStores) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyMissingStores) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyMissingStores) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TrasnferLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrasnferLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrasnferLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Transferee))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.StoreID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ScanField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x10
	i -= len(m.Field)
	copy(dAtA[i:], m.Field)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Field)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetScanTableMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScanTableMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScanTableMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Table)
	copy(dAtA[i:], m.Table)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Table)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetScanTableMetaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScanTableMetaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScanTableMetaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.TabVersion))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *QueryPdLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPdLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPdLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPdLeaderResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPdLeaderResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPdLeaderResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Yes {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddPdNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPdNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPdNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ClientUrl)
	copy(dAtA[i:], m.ClientUrl)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.ClientUrl)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Url)
	copy(dAtA[i:], m.Url)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Url)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AddPdNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPdNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPdNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.RaftCluster)
	copy(dAtA[i:], m.RaftCluster)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.RaftCluster)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Cluster))
	i--
	dAtA[i] = 0x18
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemovePdNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePdNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePdNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RemovePdNodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePdNodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePdNodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ListPdMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPdMembers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPdMembers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListPdMembersResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPdMembersResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPdMembersResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClearStoreCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearStoreCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearStoreCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ClearDBData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearDBData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearDBData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tables[iNdEx])
			copy(dAtA[i:], m.Tables[iNdEx])
			i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Tables[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClearDBDataResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearDBDataResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearDBDataResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ClearCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClearCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SuspendKvStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuspendKvStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuspendKvStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SuspendKvStoreResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuspendKvStoreResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuspendKvStoreResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ResumeKvStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResumeKvStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResumeKvStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResumeKvStoreResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResumeKvStoreResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResumeKvStoreResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SuspendStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuspendStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuspendStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ResumeStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResumeStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResumeStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Store))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GetDeployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x20
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.ServicePort))
	i--
	dAtA[i] = 0x18
	i -= len(m.Host)
	copy(dAtA[i:], m.Host)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Host)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Set) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Set) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Set) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.MarkClear {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GetDeploymentResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeploymentResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeploymentResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for iNdEx := len(m.Sets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyfishServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrderSequenceID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderSequenceID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderSequenceID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *OrderSequenceIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderSequenceIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderSequenceIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFlyfishServer(dAtA, i, uint64(m.Max))
	i--
	dAtA[i] = 0x18
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintFlyfishServer(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Ok {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintFlyfishServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlyfishServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRouteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *RouteInfoKvNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	return n
}

func (m *RouteInfoSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			n += 1 + sovFlyfishServer(uint64(e))
		}
	}
	if len(m.Slots) > 0 {
		for _, b := range m.Slots {
			l = len(b)
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	if len(m.Kvnodes) > 0 {
		for _, e := range m.Kvnodes {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *QueryRouteInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Version))
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *QueryLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *QueryLeaderResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Leader))
	return n
}

func (m *DeploymentKvnode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	return n
}

func (m *DeploymentSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *AddNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	return n
}

func (m *AddNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *RemNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	return n
}

func (m *RemNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *KvnodeBoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	return n
}

func (m *StoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Id))
	l = len(m.RaftCluster)
	n += 1 + l + sovFlyfishServer(uint64(l))
	if m.Slots != nil {
		l = len(m.Slots)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	n += 1 + sovFlyfishServer(uint64(m.RaftID))
	return n
}

func (m *KvnodeBootResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	l = len(m.ServiceHost)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *FlySqlHeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.MetaVersion))
	return n
}

func (m *FlySqlHeartBeatResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *NotifyNodeStoreOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Op))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	n += 1 + sovFlyfishServer(uint64(m.Port))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	n += 1 + sovFlyfishServer(uint64(m.RaftID))
	return n
}

func (m *NodeStoreOpOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IsTransInReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *IsTransInReadyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *NotifySlotTransOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *SlotTransOutOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *NotifySlotTransIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *SlotTransInOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Slot))
	return n
}

func (m *AddSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *AddSetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *RemSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	return n
}

func (m *RemSetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *SetMarkClear) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	return n
}

func (m *SetMarkClearResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *GetFlyGateList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetFlyGateListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *GetFlySqlList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetFlySqlListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *FlyGateHeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GateService)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *MetaFiled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovFlyfishServer(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovFlyfishServer(uint64(l))
	l = len(m.Default)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *MetaAddTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovFlyfishServer(uint64(l))
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *MetaAddTableResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *MetaAddFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Table)
	n += 1 + l + sovFlyfishServer(uint64(l))
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *MetaAddFieldsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *MetaRemoveTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Table)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *MetaRemoveTableResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *MetaRemoveFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Table)
	n += 1 + l + sovFlyfishServer(uint64(l))
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *MetaRemoveFieldsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *GetMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMetaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Version))
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *NotifyUpdateMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	n += 1 + sovFlyfishServer(uint64(m.Version))
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *PacketTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *GetKvStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StoreStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.StoreID))
	n += 1 + sovFlyfishServer(uint64(m.Slotcount))
	n += 1 + sovFlyfishServer(uint64(m.Kvcount))
	n += 1 + sovFlyfishServer(uint64(m.MetaVersion))
	n += 2
	return n
}

func (m *KvnodeStoreStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.StoreID))
	n += 1 + sovFlyfishServer(uint64(m.RaftID))
	n += 1 + sovFlyfishServer(uint64(m.StoreType))
	n += 2
	n += 1 + sovFlyfishServer(uint64(m.Progress))
	n += 2
	n += 1 + sovFlyfishServer(uint64(m.MetaVersion))
	n += 1 + sovFlyfishServer(uint64(m.LastReport))
	return n
}

func (m *KvnodeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	l = len(m.Service)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *SetStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 2
	n += 1 + sovFlyfishServer(uint64(m.Kvcount))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *GetKvStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Now))
	n += 1 + sovFlyfishServer(uint64(m.Kvcount))
	n += 1 + sovFlyfishServer(uint64(m.FreeSlotCount))
	n += 1 + sovFlyfishServer(uint64(m.TransferSlotCount))
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *StoreReportStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.StoreID))
	n += 1 + sovFlyfishServer(uint64(m.RaftID))
	n += 2
	n += 1 + sovFlyfishServer(uint64(m.Kvcount))
	n += 1 + sovFlyfishServer(uint64(m.Progress))
	n += 1 + sovFlyfishServer(uint64(m.MetaVersion))
	n += 2
	return n
}

func (m *KvnodeReportStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.SetID))
	n += 1 + sovFlyfishServer(uint64(m.NodeID))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *NotifyMissingStores) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	if m.Meta != nil {
		l = len(m.Meta)
		n += 1 + l + sovFlyfishServer(uint64(l))
	}
	return n
}

func (m *TrasnferLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.StoreID))
	n += 1 + sovFlyfishServer(uint64(m.Transferee))
	return n
}

func (m *ScanField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.Version))
	return n
}

func (m *GetScanTableMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Table)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *GetScanTableMetaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.TabVersion))
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *QueryPdLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPdLeaderResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Service)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *AddPdNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Id))
	l = len(m.Url)
	n += 1 + l + sovFlyfishServer(uint64(l))
	l = len(m.ClientUrl)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *AddPdNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.Cluster))
	n += 1 + sovFlyfishServer(uint64(m.RaftID))
	l = len(m.RaftCluster)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *RemovePdNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Id))
	n += 1 + sovFlyfishServer(uint64(m.RaftID))
	return n
}

func (m *RemovePdNodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *ListPdMembers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListPdMembersResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *ClearStoreCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *ClearDBData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for _, s := range m.Tables {
			l = len(s)
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *ClearDBDataResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *ClearCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClearCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *SuspendKvStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SuspendKvStoreResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *ResumeKvStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResumeKvStoreResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	return n
}

func (m *SuspendStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *ResumeStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Store))
	return n
}

func (m *GetDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Id))
	l = len(m.Host)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.ServicePort))
	n += 1 + sovFlyfishServer(uint64(m.RaftPort))
	return n
}

func (m *Set) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Id))
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *GetDeploymentResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for _, e := range m.Sets {
			l = e.Size()
			n += 1 + l + sovFlyfishServer(uint64(l))
		}
	}
	return n
}

func (m *OrderSequenceID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFlyfishServer(uint64(m.Count))
	return n
}

func (m *OrderSequenceIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Reason)
	n += 1 + l + sovFlyfishServer(uint64(l))
	n += 1 + sovFlyfishServer(uint64(m.Max))
	return n
}

func sovFlyfishServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlyfishServer(x uint64) (n int) {
	return sovFlyfishServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueryRouteInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryRouteInfo{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteInfoKvNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteInfoKvNode{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteInfoSet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKvnodes := "[]*RouteInfoKvNode{"
	for _, f := range this.Kvnodes {
		repeatedStringForKvnodes += strings.Replace(fmt.Sprintf("%v", f), "RouteInfoKvNode", "RouteInfoKvNode", 1) + ","
	}
	repeatedStringForKvnodes += "}"
	s := strings.Join([]string{`&RouteInfoSet{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`Stores:` + fmt.Sprintf("%v", this.Stores) + `,`,
		`Slots:` + fmt.Sprintf("%v", this.Slots) + `,`,
		`Kvnodes:` + repeatedStringForKvnodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRouteInfoResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSets := "[]*RouteInfoSet{"
	for _, f := range this.Sets {
		repeatedStringForSets += strings.Replace(fmt.Sprintf("%v", f), "RouteInfoSet", "RouteInfoSet", 1) + ","
	}
	repeatedStringForSets += "}"
	s := strings.Join([]string{`&QueryRouteInfoResp{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Sets:` + repeatedStringForSets + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryLeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryLeader{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryLeaderResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryLeaderResp{`,
		`Leader:` + fmt.Sprintf("%v", this.Leader) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentKvnode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentKvnode{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentSet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*DeploymentKvnode{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(fmt.Sprintf("%v", f), "DeploymentKvnode", "DeploymentKvnode", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&DeploymentSet{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddNode{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddNodeResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemNode{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemNodeResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeBoot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KvnodeBoot{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StoreInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StoreInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`RaftCluster:` + fmt.Sprintf("%v", this.RaftCluster) + `,`,
		`Slots:` + fmt.Sprintf("%v", this.Slots) + `,`,
		`RaftID:` + fmt.Sprintf("%v", this.RaftID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeBootResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStores := "[]*StoreInfo{"
	for _, f := range this.Stores {
		repeatedStringForStores += strings.Replace(fmt.Sprintf("%v", f), "StoreInfo", "StoreInfo", 1) + ","
	}
	repeatedStringForStores += "}"
	s := strings.Join([]string{`&KvnodeBootResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`ServiceHost:` + fmt.Sprintf("%v", this.ServiceHost) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`Stores:` + repeatedStringForStores + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlySqlHeartBeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlySqlHeartBeat{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`MetaVersion:` + fmt.Sprintf("%v", this.MetaVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlySqlHeartBeatResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlySqlHeartBeatResp{`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyNodeStoreOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyNodeStoreOp{`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`RaftID:` + fmt.Sprintf("%v", this.RaftID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeStoreOpOk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeStoreOpOk{`,
		`}`,
	}, "")
	return s
}
func (this *IsTransInReady) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsTransInReady{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsTransInReadyResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsTransInReadyResp{`,
		`Ready:` + fmt.Sprintf("%v", this.Ready) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifySlotTransOut) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifySlotTransOut{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlotTransOutOk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlotTransOutOk{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifySlotTransIn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifySlotTransIn{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlotTransInOk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlotTransInOk{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddSet{`,
		`Set:` + strings.Replace(fmt.Sprintf("%v", this.Set), "DeploymentSet", "DeploymentSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddSetResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddSetResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemSet{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemSetResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemSetResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMarkClear) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMarkClear{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMarkClearResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMarkClearResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFlyGateList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFlyGateList{`,
		`}`,
	}, "")
	return s
}
func (this *GetFlyGateListResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFlyGateListResp{`,
		`List:` + fmt.Sprintf("%v", this.List) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFlySqlList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFlySqlList{`,
		`}`,
	}, "")
	return s
}
func (this *GetFlySqlListResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFlySqlListResp{`,
		`List:` + fmt.Sprintf("%v", this.List) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlyGateHeartBeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlyGateHeartBeat{`,
		`GateService:` + fmt.Sprintf("%v", this.GateService) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaFiled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetaFiled{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Default:` + fmt.Sprintf("%v", this.Default) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaAddTable) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*MetaFiled{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "MetaFiled", "MetaFiled", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&MetaAddTable{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaAddTableResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetaAddTableResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaAddFields) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*MetaFiled{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "MetaFiled", "MetaFiled", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&MetaAddFields{`,
		`Table:` + fmt.Sprintf("%v", this.Table) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaAddFieldsResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetaAddFieldsResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaRemoveTable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetaRemoveTable{`,
		`Table:` + fmt.Sprintf("%v", this.Table) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaRemoveTableResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetaRemoveTableResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaRemoveFields) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetaRemoveFields{`,
		`Table:` + fmt.Sprintf("%v", this.Table) + `,`,
		`Fields:` + fmt.Sprintf("%v", this.Fields) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaRemoveFieldsResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetaRemoveFieldsResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMeta{`,
		`}`,
	}, "")
	return s
}
func (this *GetMetaResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMetaResp{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyUpdateMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyUpdateMeta{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PacketTest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketTest{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetKvStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetKvStatus{`,
		`}`,
	}, "")
	return s
}
func (this *StoreStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StoreStatus{`,
		`StoreID:` + fmt.Sprintf("%v", this.StoreID) + `,`,
		`Slotcount:` + fmt.Sprintf("%v", this.Slotcount) + `,`,
		`Kvcount:` + fmt.Sprintf("%v", this.Kvcount) + `,`,
		`MetaVersion:` + fmt.Sprintf("%v", this.MetaVersion) + `,`,
		`Halt:` + fmt.Sprintf("%v", this.Halt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeStoreStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KvnodeStoreStatus{`,
		`StoreID:` + fmt.Sprintf("%v", this.StoreID) + `,`,
		`RaftID:` + fmt.Sprintf("%v", this.RaftID) + `,`,
		`StoreType:` + fmt.Sprintf("%v", this.StoreType) + `,`,
		`IsLeader:` + fmt.Sprintf("%v", this.IsLeader) + `,`,
		`Progress:` + fmt.Sprintf("%v", this.Progress) + `,`,
		`Halt:` + fmt.Sprintf("%v", this.Halt) + `,`,
		`MetaVersion:` + fmt.Sprintf("%v", this.MetaVersion) + `,`,
		`LastReport:` + fmt.Sprintf("%v", this.LastReport) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStores := "[]*KvnodeStoreStatus{"
	for _, f := range this.Stores {
		repeatedStringForStores += strings.Replace(fmt.Sprintf("%v", f), "KvnodeStoreStatus", "KvnodeStoreStatus", 1) + ","
	}
	repeatedStringForStores += "}"
	s := strings.Join([]string{`&KvnodeStatus{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Stores:` + repeatedStringForStores + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStores := "[]*StoreStatus{"
	for _, f := range this.Stores {
		repeatedStringForStores += strings.Replace(fmt.Sprintf("%v", f), "StoreStatus", "StoreStatus", 1) + ","
	}
	repeatedStringForStores += "}"
	repeatedStringForNodes := "[]*KvnodeStatus{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(fmt.Sprintf("%v", f), "KvnodeStatus", "KvnodeStatus", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&SetStatus{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`MarkClear:` + fmt.Sprintf("%v", this.MarkClear) + `,`,
		`Kvcount:` + fmt.Sprintf("%v", this.Kvcount) + `,`,
		`Stores:` + repeatedStringForStores + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetKvStatusResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSets := "[]*SetStatus{"
	for _, f := range this.Sets {
		repeatedStringForSets += strings.Replace(fmt.Sprintf("%v", f), "SetStatus", "SetStatus", 1) + ","
	}
	repeatedStringForSets += "}"
	s := strings.Join([]string{`&GetKvStatusResp{`,
		`Now:` + fmt.Sprintf("%v", this.Now) + `,`,
		`Kvcount:` + fmt.Sprintf("%v", this.Kvcount) + `,`,
		`FreeSlotCount:` + fmt.Sprintf("%v", this.FreeSlotCount) + `,`,
		`TransferSlotCount:` + fmt.Sprintf("%v", this.TransferSlotCount) + `,`,
		`Sets:` + repeatedStringForSets + `,`,
		`}`,
	}, "")
	return s
}
func (this *StoreReportStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StoreReportStatus{`,
		`StoreID:` + fmt.Sprintf("%v", this.StoreID) + `,`,
		`RaftID:` + fmt.Sprintf("%v", this.RaftID) + `,`,
		`Isleader:` + fmt.Sprintf("%v", this.Isleader) + `,`,
		`Kvcount:` + fmt.Sprintf("%v", this.Kvcount) + `,`,
		`Progress:` + fmt.Sprintf("%v", this.Progress) + `,`,
		`MetaVersion:` + fmt.Sprintf("%v", this.MetaVersion) + `,`,
		`Halt:` + fmt.Sprintf("%v", this.Halt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvnodeReportStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStores := "[]*StoreReportStatus{"
	for _, f := range this.Stores {
		repeatedStringForStores += strings.Replace(fmt.Sprintf("%v", f), "StoreReportStatus", "StoreReportStatus", 1) + ","
	}
	repeatedStringForStores += "}"
	s := strings.Join([]string{`&KvnodeReportStatus{`,
		`SetID:` + fmt.Sprintf("%v", this.SetID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Stores:` + repeatedStringForStores + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyMissingStores) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStores := "[]*StoreInfo{"
	for _, f := range this.Stores {
		repeatedStringForStores += strings.Replace(fmt.Sprintf("%v", f), "StoreInfo", "StoreInfo", 1) + ","
	}
	repeatedStringForStores += "}"
	s := strings.Join([]string{`&NotifyMissingStores{`,
		`Stores:` + repeatedStringForStores + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrasnferLeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrasnferLeader{`,
		`StoreID:` + fmt.Sprintf("%v", this.StoreID) + `,`,
		`Transferee:` + fmt.Sprintf("%v", this.Transferee) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScanField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScanField{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScanTableMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetScanTableMeta{`,
		`Table:` + fmt.Sprintf("%v", this.Table) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScanTableMetaResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*ScanField{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "ScanField", "ScanField", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&GetScanTableMetaResp{`,
		`TabVersion:` + fmt.Sprintf("%v", this.TabVersion) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryPdLeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryPdLeader{`,
		`}`,
	}, "")
	return s
}
func (this *QueryPdLeaderResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryPdLeaderResp{`,
		`Yes:` + fmt.Sprintf("%v", this.Yes) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddPdNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddPdNode{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`ClientUrl:` + fmt.Sprintf("%v", this.ClientUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddPdNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddPdNodeResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Cluster:` + fmt.Sprintf("%v", this.Cluster) + `,`,
		`RaftID:` + fmt.Sprintf("%v", this.RaftID) + `,`,
		`RaftCluster:` + fmt.Sprintf("%v", this.RaftCluster) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemovePdNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemovePdNode{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`RaftID:` + fmt.Sprintf("%v", this.RaftID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemovePdNodeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemovePdNodeResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListPdMembers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListPdMembers{`,
		`}`,
	}, "")
	return s
}
func (this *ListPdMembersResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListPdMembersResp{`,
		`Members:` + fmt.Sprintf("%v", this.Members) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClearStoreCache) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClearStoreCache{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClearDBData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClearDBData{`,
		`Tables:` + fmt.Sprintf("%v", this.Tables) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClearDBDataResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClearDBDataResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClearCache) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClearCache{`,
		`}`,
	}, "")
	return s
}
func (this *ClearCacheResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClearCacheResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuspendKvStore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuspendKvStore{`,
		`}`,
	}, "")
	return s
}
func (this *SuspendKvStoreResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuspendKvStoreResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResumeKvStore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResumeKvStore{`,
		`}`,
	}, "")
	return s
}
func (this *ResumeKvStoreResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResumeKvStoreResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuspendStore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuspendStore{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResumeStore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResumeStore{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDeployment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDeployment{`,
		`}`,
	}, "")
	return s
}
func (this *Node) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Node{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`RaftPort:` + fmt.Sprintf("%v", this.RaftPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Set) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*Node{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(fmt.Sprintf("%v", f), "Node", "Node", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&Set{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`MarkClear:` + fmt.Sprintf("%v", this.MarkClear) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDeploymentResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSets := "[]*Set{"
	for _, f := range this.Sets {
		repeatedStringForSets += strings.Replace(fmt.Sprintf("%v", f), "Set", "Set", 1) + ","
	}
	repeatedStringForSets += "}"
	s := strings.Join([]string{`&GetDeploymentResp{`,
		`Sets:` + repeatedStringForSets + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderSequenceID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderSequenceID{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderSequenceIDResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderSequenceIDResp{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlyfishServer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueryRouteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: queryRouteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: queryRouteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteInfoKvNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: routeInfoKvNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: routeInfoKvNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteInfoSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: routeInfoSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: routeInfoSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stores = append(m.Stores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlyfishServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stores) == 0 {
					m.Stores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyfishServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stores = append(m.Stores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots, make([]byte, postIndex-iNdEx))
			copy(m.Slots[len(m.Slots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvnodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kvnodes = append(m.Kvnodes, &RouteInfoKvNode{})
			if err := m.Kvnodes[len(m.Kvnodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRouteInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: queryRouteInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: queryRouteInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &RouteInfoSet{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_leader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_leader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLeaderResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_leader_resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_leader_resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			m.Leader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentKvnode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deploymentKvnode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deploymentKvnode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deploymentSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deploymentSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &DeploymentKvnode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeBoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeBoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeBoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: storeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: storeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots[:0], dAtA[iNdEx:postIndex]...)
			if m.Slots == nil {
				m.Slots = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftID", wireType)
			}
			m.RaftID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeBootResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeBootResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeBootResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, &StoreInfo{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlySqlHeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flySqlHeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flySqlHeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaVersion", wireType)
			}
			m.MetaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlySqlHeartBeatResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flySqlHeartBeatResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flySqlHeartBeatResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyNodeStoreOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyNodeStoreOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyNodeStoreOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftID", wireType)
			}
			m.RaftID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStoreOpOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: nodeStoreOpOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: nodeStoreOpOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTransInReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: isTransInReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: isTransInReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTransInReadyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: isTransInReadyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: isTransInReadyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifySlotTransOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifySlotTransOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifySlotTransOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotTransOutOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: slotTransOutOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: slotTransOutOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifySlotTransIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifySlotTransIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifySlotTransIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotTransInOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: slotTransInOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: slotTransInOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Set == nil {
				m.Set = &DeploymentSet{}
			}
			if err := m.Set.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addSetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addSetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemSetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remSetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remSetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMarkClear) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setMarkClear: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setMarkClear: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMarkClearResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setMarkClearResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setMarkClearResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFlyGateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getFlyGateList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getFlyGateList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFlyGateListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getFlyGateListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getFlyGateListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFlySqlList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getFlySqlList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getFlySqlList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFlySqlListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getFlySqlListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getFlySqlListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlyGateHeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flyGateHeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flyGateHeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaFiled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaFiled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaFiled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Default = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaAddTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaAddTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaAddTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &MetaFiled{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaAddTableResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaAddTableResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaAddTableResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaAddFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaAddFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaAddFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &MetaFiled{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaAddFieldsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaAddFieldsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaAddFieldsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaRemoveTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaRemoveTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaRemoveTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaRemoveTableResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaRemoveTableResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaRemoveTableResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaRemoveFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaRemoveFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaRemoveFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaRemoveFieldsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: metaRemoveFieldsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: metaRemoveFieldsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getMetaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getMetaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyUpdateMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyUpdateMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyUpdateMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: packetTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: packetTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKvStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getKvStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getKvStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: storeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: storeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slotcount", wireType)
			}
			m.Slotcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slotcount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvcount", wireType)
			}
			m.Kvcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kvcount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaVersion", wireType)
			}
			m.MetaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Halt = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeStoreStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeStoreStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeStoreStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftID", wireType)
			}
			m.RaftID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreType", wireType)
			}
			m.StoreType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeader = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Halt = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaVersion", wireType)
			}
			m.MetaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReport", wireType)
			}
			m.LastReport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReport |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, &KvnodeStoreStatus{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: setStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: setStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MarkClear = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvcount", wireType)
			}
			m.Kvcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kvcount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, &StoreStatus{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &KvnodeStatus{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKvStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getKvStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getKvStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvcount", wireType)
			}
			m.Kvcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kvcount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeSlotCount", wireType)
			}
			m.FreeSlotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeSlotCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferSlotCount", wireType)
			}
			m.TransferSlotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransferSlotCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &SetStatus{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreReportStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: storeReportStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: storeReportStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftID", wireType)
			}
			m.RaftID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isleader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isleader = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvcount", wireType)
			}
			m.Kvcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kvcount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaVersion", wireType)
			}
			m.MetaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Halt = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvnodeReportStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvnodeReportStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvnodeReportStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetID", wireType)
			}
			m.SetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, &StoreReportStatus{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyMissingStores) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notifyMissingStores: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notifyMissingStores: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, &StoreInfo{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrasnferLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: trasnferLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: trasnferLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferee", wireType)
			}
			m.Transferee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Transferee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: scanField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: scanField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScanTableMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getScanTableMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getScanTableMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScanTableMetaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getScanTableMetaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getScanTableMetaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabVersion", wireType)
			}
			m.TabVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &ScanField{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPdLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: queryPdLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: queryPdLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPdLeaderResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: queryPdLeaderResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: queryPdLeaderResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Yes = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPdNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addPdNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addPdNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPdNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addPdNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addPdNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftID", wireType)
			}
			m.RaftID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePdNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: removePdNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: removePdNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftID", wireType)
			}
			m.RaftID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePdNodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: removePdNodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: removePdNodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPdMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: listPdMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: listPdMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPdMembersResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: listPdMembersResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: listPdMembersResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearStoreCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clearStoreCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clearStoreCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearDBData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clearDBData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clearDBData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearDBDataResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clearDBDataResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clearDBDataResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clearCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clearCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clearCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clearCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuspendKvStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: suspendKvStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: suspendKvStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuspendKvStoreResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: suspendKvStoreResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: suspendKvStoreResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResumeKvStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: resumeKvStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: resumeKvStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResumeKvStoreResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: resumeKvStoreResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: resumeKvStoreResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuspendStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: suspendStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: suspendStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResumeStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: resumeStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: resumeStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			m.ServicePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Set) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MarkClear = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeploymentResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getDeploymentResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getDeploymentResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sets = append(m.Sets, &Set{})
			if err := m.Sets[len(m.Sets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderSequenceID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: orderSequenceID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: orderSequenceID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderSequenceIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: orderSequenceIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: orderSequenceIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyfishServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlyfishServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlyfishServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlyfishServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyfishServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlyfishServer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFlyfishServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFlyfishServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFlyfishServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFlyfishServer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFlyfishServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlyfishServer   = fmt.Errorf("proto: integer overflow")
)
