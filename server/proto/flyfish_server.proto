syntax = "proto2";
package proto;


import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;


enum ServerCmdType {
  //flygate <-> flykv
  QueryLeader                   = 1;
  QueryLeaderResp               = 2;


  //console <-> pd
  AddNode                       = 103;
  AddNodeResp                   = 104;
  RemNode                       = 111;
  RemNodeResp                   = 112;
  AddSet                        = 113;
  AddSetResp                    = 114;
  RemSet                        = 115;
  RemSetResp                    = 116;
  SetMarkClear                  = 117;
  SetMarkClearResp              = 118;
  GetMeta                       = 119;
  GetMetaResp                   = 120;
  GetKvStatus                   = 121;
  GetKvStatusResp               = 122;
  MetaAddTable                  = 123;
  MetaAddTableResp              = 124;
  MetaAddFields                 = 125;
  MetaAddFieldsResp             = 126;
  MetaRemoveTable               = 127;                
  MetaRemoveTableResp           = 128;
  MetaRemoveFields              = 129;
  MetaRemoveFieldsResp          = 130;
  QueryPdLeader                 = 131;
  QueryPdLeaderResp             = 132;
  AddPdNode                     = 133;
  AddPdNodeResp                 = 134;
  RemovePdNode                  = 135;
  RemovePdNodeResp              = 136; 
  ListPdMembers                 = 137;
  ListPdMembersResp             = 138;
  ClearDBData                   = 139;
  ClearDBDataResp               = 140;
  ClearCache                    = 141;                   //排空所有缓存的kv
  ClearCacheResp                = 142;  
  SuspendKvStore                = 143;                   //挂起所有store,挂起后store不再处理客户端请求，直到resume
  SuspendKvStoreResp            = 144;
  ResumeKvStore                 = 145;
  ResumeKvStoreResp             = 146;
  GetDeployment                 = 147;
  GetDeploymentResp             = 148;


  
  //kvnode <-> pd
  KvnodeBoot                    = 210;                   //kvnode冷启登录  
  KvnodeBootResp                = 211;
  NotifyNodeStoreOp             = 212;
  NodeStoreOpOk                 = 213;
  IsTransInReady                = 214;
  IsTransInReadyResp            = 215;
  NotifySlotTransOut            = 218;
  SlotTransOutOk                = 219;
  NotifySlotTransIn             = 220;
  SlotTransInOk                 = 221;    
  NotifyUpdateMeta              = 222;
  KvnodeReportStatus            = 223;
  TrasnferLeader                = 224;
  ClearStoreCache               = 225;
  NotifyMissingStores           = 226;
  SuspendStore                  = 227;
  ResumeStore                   = 228;   

  //flygate <-> pd
  QueryRouteInfo                = 310;
  QueryRouteInfoResp            = 311;
  FlyGateHeartBeat              = 312;
  GetScanTableMeta              = 313;
  GetScanTableMetaResp          = 314;

  FlySqlHeartBeat               = 510;
  FlySqlHeartBeatResp           = 511; 

  //client <-> pd
  GetFlyGateList                = 410;
  GetFlyGateListResp            = 411;
  GetFlySqlList                 = 412;
  GetFlySqlListResp             = 413;
  OrderSequenceID               = 414;
  OrderSequenceIDResp           = 415;               


  //for test
  PacketTest                    = 1000;
}


message queryRouteInfo {
  optional int64  version       = 1;  
}         


message routeInfoKvNode {
  optional int32  nodeID        = 1;
  optional string host          = 2;
  optional int32  servicePort   = 3;       
}

message routeInfoSet {
  optional int32  setID            = 1;
  repeated int32  stores           = 2;
  repeated bytes  slots            = 3;
  repeated routeInfoKvNode kvnodes = 4;
}

message queryRouteInfoResp {
  optional int64  version          = 1;
  repeated routeInfoSet sets       = 2; 
}


//查询是否store的leader,如果是返回yes=true
message query_leader {
  optional int32 store = 1;
}

message query_leader_resp {
  optional int32 leader = 1;
}

message deploymentKvnode  {
  optional int32  nodeID      = 1;
  optional string host        = 2;
  optional int32  servicePort = 3;
  optional int32  raftPort   = 4; 
}

message deploymentSet  {
  optional int32  setID           = 1;
  repeated deploymentKvnode nodes = 2;
}

message addNode {
  optional int32  setID       = 1;
  optional int32  nodeID      = 2;
  optional string host        = 3;
  optional int32  servicePort = 4;
  optional int32  raftPort    = 5;      
}


message addNodeResp  {
  optional bool ok            = 1;
  optional string reason      = 2;
}

message remNode {
  optional int32  setID       = 1;
  optional int32  nodeID      = 2;     
}


message remNodeResp  {
  optional bool ok            = 1;
  optional string reason      = 2;
}


message kvnodeBoot {
  optional int32  nodeID      = 1;
}

message storeInfo {
  optional int32  id          = 1;
  optional string raftCluster = 2;
  optional bytes  slots       = 3;
  optional uint64 raftID      = 4;
}

message kvnodeBootResp {
  optional bool   ok           = 1;
  optional string reason       = 2;
  optional int32  setID        = 3;
  optional string serviceHost  = 4;
  optional int32  servicePort  = 5;
  optional int32  raftPort     = 6;   
  repeated storeInfo stores    = 7;
  optional bytes  meta         = 8;
}

message flySqlHeartBeat {
  optional string service      = 1;
  optional int64  metaVersion  = 2;  
}

message flySqlHeartBeatResp {
  optional bytes  meta         = 1;   
}


enum StoreOpType {
  AddLearner = 1;
  PromoteLearner = 2;
  RemoveStore = 4;
}

message notifyNodeStoreOp {
  optional int32  op          = 1;
  optional int32  nodeID      = 2;
  optional string host        = 3;
  optional int32  raftPort    = 4;
  optional int32  port        = 5;
  optional int32  store       = 6; 
  optional uint64 raftID      = 7;
}

message nodeStoreOpOk {

}



message  isTransInReady {
  optional int32  store       = 1;
  optional int32  slot        = 2; 
}

message  isTransInReadyResp {
  optional bool   ready       = 1;
  optional int32  slot        = 2;
}

message notifySlotTransOut {
  optional int32  slot        = 1;  
  optional int32  store       = 2;  
}
  
message slotTransOutOk {
  optional int32  slot        = 1; 
}  

message  notifySlotTransIn {
  optional int32  slot        = 1;  
  optional int32  store       = 2; 
}

message slotTransInOk {
  optional int32  slot        = 1; 
}  


message addSet {
  optional deploymentSet set   = 1;
}

message   addSetResp {
  optional bool   ok           = 1;
  optional string reason       = 2;
}


message remSet {
  optional int32 setID         = 1;
}

message   remSetResp {
  optional bool   ok           = 1;
  optional string reason       = 2;
}


message  setMarkClear{
  optional int32 setID         = 1;
}

message  setMarkClearResp{
  optional bool   ok           = 1;
  optional string reason       = 2;
}

message   getFlyGateList {
}

message getFlyGateListResp {
  repeated string list        = 1;
}

message   getFlySqlList {
}

message getFlySqlListResp {
  repeated string list        = 1;
}

message flyGateHeartBeat {
  optional string gateService  = 1;
}

message metaFiled {
  optional string name    = 1;
  optional string type    = 2;
  optional string default = 3;
}


message metaAddTable {
  optional string name      = 1;
  repeated metaFiled fields = 2;
  optional int64    version = 3;
}


message metaAddTableResp {
  optional bool  ok       = 1;  
  optional string reason  = 2; 
}


message metaAddFields {
  optional string table     = 1;
  repeated metaFiled fields = 2;
  optional int64    version = 3;
}

message metaAddFieldsResp {
  optional bool  ok       = 1;  
  optional string reason  = 2; 
}


message metaRemoveTable{
  optional string   table   = 1;
  optional int64    version = 2;
} 

message   metaRemoveTableResp{
  optional bool  ok       = 1;  
  optional string reason  = 2;
}

message   metaRemoveFields{
  optional string table     = 1;
  repeated string fields    = 2;
  optional int64  version   = 3;  
}       
message   metaRemoveFieldsResp{
  optional bool  ok       = 1;  
  optional string reason  = 2;  
}       


message getMeta {
 
}

message getMetaResp {
  optional int64 version  = 1;
  optional bytes meta     = 2;
}

message  notifyUpdateMeta {
  optional int32 store    = 1;
  optional int64 version  = 2;
  optional bytes meta     = 3;
}

message packetTest {
  optional string message = 1;
}

message getKvStatus {
  
}

message storeStatus {
  optional int32 storeID      = 1;
  optional int32 slotcount    = 2;
  optional int32 kvcount      = 3;  
  optional int64 metaVersion  = 4;  
  optional bool  halt         = 5;
}


message kvnodeStoreStatus {
  optional int32  storeID     = 1;
  optional uint64 raftID      = 2;
  optional int32  storeType   = 3;
  optional bool   isLeader    = 4;
  optional uint64 progress    = 5;
  optional bool   halt        = 6;
  optional int64  metaVersion = 7;
  optional int64  lastReport  = 8;  
}

message kvnodeStatus {
  optional int32 nodeID              = 1;
  repeated kvnodeStoreStatus stores  = 2;
  optional string service            = 3;
}

message setStatus {
  optional int32 setID        = 1;
  optional bool  markClear    = 2;
  optional int32 kvcount      = 3;
  repeated storeStatus stores = 4;
  repeated kvnodeStatus nodes = 5;
}

message getKvStatusResp {
  optional int64     now               = 1;
  optional int32     kvcount           = 2;
  optional int32     freeSlotCount     = 3;
  optional int32     transferSlotCount = 4;
  repeated setStatus sets              = 5;
}

message storeReportStatus {
  optional int32  storeID     = 1;
  optional uint64 raftID      = 2;
  optional bool   isleader    = 3;
  optional int32  kvcount     = 4;
  optional uint64 progress    = 5;
  optional int64  metaVersion = 6;
  optional bool   halt        = 7;
}

message kvnodeReportStatus {
  optional int32  setID             = 1;
  optional int32  nodeID            = 2;
  repeated storeReportStatus stores = 3;
}

message notifyMissingStores { 
  repeated storeInfo stores    = 1;
  optional bytes  meta         = 2;
}

message trasnferLeader {
  optional int32  storeID    = 1;
  optional uint64 transferee = 2; 
}


message scanField {
  optional string  field        = 1;
  optional int64   version      = 2;
}

message getScanTableMeta {
  optional string  table        = 1;
}

message getScanTableMetaResp {
  optional int64     tabVersion = 1;
  repeated scanField fields     = 2;
}


message queryPdLeader {

}

message queryPdLeaderResp {
  optional bool yes       = 1;
  optional string service = 2;
}


message addPdNode{
  optional int32 id         = 1;
  optional string url       = 2;
  optional string clientUrl = 3;
}
 
message addPdNodeResp{
  optional bool   ok          = 1;  
  optional string reason      = 2;
  optional uint32 cluster     = 3;
  optional uint64 raftID      = 4;
  optional string raftCluster = 5;   
}

message removePdNode{
  optional int32  id          = 1;
  optional uint64 raftID      = 2;    
}

message removePdNodeResp{
  optional bool  ok       = 1;  
  optional string reason  = 2;   
}

message  listPdMembers {
  
}

message  listPdMembersResp {
  repeated string members = 1;
}

message clearStoreCache {
  optional int32  store   = 1; 
}

message clearDBData {
  repeated string tables  = 1;
}

message clearDBDataResp {
  optional bool  ok       = 1;  
  optional string reason  = 2; 
}

message clearCache {
  
}

message clearCacheResp {
  optional bool  ok       = 1;  
  optional string reason  = 2;   
}

message suspendKvStore {

}


message suspendKvStoreResp {
  optional bool  ok       = 1;  
  optional string reason  = 2;   
}

message resumeKvStore {

}

message resumeKvStoreResp {
  optional bool  ok       = 1;  
  optional string reason  = 2;   
}

message suspendStore {
  optional int32  store = 1;  
}

message resumeStore {
  optional int32  store = 1;  
}

message getDeployment {

}


message node {
  optional int32 id           = 1;
  optional string host        = 2;
  optional int32  servicePort = 3;
  optional int32  raftPort    = 4;
}

message set {
  optional int32 id           = 1;
  repeated node  nodes        = 2;
  optional bool  markClear    = 3;    
}

message  getDeploymentResp {
  repeated set sets           = 1;
}   

message orderSequenceID {
  optional int64  count       = 1;
}

message orderSequenceIDResp {
  optional bool   ok          = 1;  
  optional string reason      = 2;  
  optional int64  max         = 3;
}



