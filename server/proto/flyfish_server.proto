syntax = "proto2";
package proto;


import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;


enum ServerCmdType {
  QueryLeader                   = 1;
  QueryLeaderResp               = 2;
  GateReport                    = 3;
  QueryGateList                 = 4;
  GateList                      = 5;
  NotiReloadKvConf              = 6;
  RemoveGate                    = 7;


  //kvnode <-> pd 消息


  KvnodeBoot                    = 110;                   //kvnode冷启登录  
  KvnodeBootResp                = 111;

  NotifyKvnodeStoreTrans        = 112;
  NotifyKvnodeStoreTransResp    = 113;

  SlotTransferPrepare           = 114;
  SlotTransferPrepareAck        = 115;
  SlotTransferCancel            = 116;
  SlotTransferCommit            = 117;
  
  //控制消息
  AddKvnode                     = 220;                   //添加kvnode
  AddKvnodeResp                 = 221;
  RemKvnode                     = 222;                   //移除kvnode
  RemKvnodeResp                 = 223; 
  AddStore                      = 224;                   //添加store
  AddStoreResp                  = 225;
  RemStore                      = 226;                   //移除store
  RemStoreResp                  = 227;
  KvnodeAddStore                = 228;                   //向kvnode添加一个store
  KvnodeAddStoreResp            = 229;
  KvnodeRemStore                = 230;                   //从kvnode中移除store
  KvnodeRemStoreResp            = 231;  

}

//查询是否store的leader,如果是返回yes=true
message query_leader {
  optional int32 store = 1;
}

message query_leader_resp {
  optional bool yes = 1;
}


message gate_report {
  optional string service      = 1;
  optional string console      = 2;
  optional int32  conf_version = 3;
}

message query_gate_list {
  
}

message gate_list {
  repeated string list  = 1;
}

message notify_reload_kvconf {
  
}

message remove_gate {
  optional string service      = 1;
}


enum KvnodeStoreTransType {
  TransNone     = 0;  
  TransAddStore = 1;
  TransRemStore = 2;
}


message kvnodeBoot {
  optional int32  nodeID   = 1;
}

message storeInfo {
  optional int32  id          = 1;
  optional string raftCluster = 2;
  optional bytes  slots       = 3;
}

message kvnodeBootResp {
  optional bool   ok          = 1;
  optional string reason      = 2;
  optional string service     = 3;   //kvnode服务地址
  optional string udpService  = 4;   //与pd通信的udp地址
  optional string raftService = 5;
  repeated storeInfo stores   = 6;
}

message notifyKvnodeStoreTrans {
  optional int64 transID                  = 1;
  optional KvnodeStoreTransType transType = 2;
  optional int32 nodeId                   = 3;
  optional int32 storeId                  = 4;
}

message notifyKvnodeStoreTransResp {
  optional int64 transID                  = 1;
  optional int32 nodeId                   = 2;
  optional int32 isLeader                 = 3;
}


message addKvnode {
  optional int64  seqno       = 1;
  optional int32  nodeId      = 2;
  optional string service     = 3;       //kvnode服务地址
  optional string udpService  = 4;       //与pd通信的udp地址
  optional string raftService = 5;
}

message addKvnodeResp {
  optional int64  seqno       = 1;
  optional bool   ok          = 2;
  optional string reason      = 3;  
}

message remKvnode {
  optional int64  seqno       = 1;
  optional int32  nodeId      = 2;
}

message remKvnodeResp {
  optional int64  seqno       = 1;
  optional bool   ok          = 2;
  optional string reason      = 3;
}

message addStore {
  optional int64  seqno       = 1;
  optional int32  id          = 2;
}

message addStoreResp {
  optional int64  seqno       = 1;
  optional bool   ok          = 2;
  optional string reason      = 3;  
}

message remStore {
  optional int64  seqno       = 1;
  optional int32  id          = 2;
}

message remStoreResp {
  optional int64  seqno       = 1;
  optional bool   ok          = 2;
  optional string reason      = 3;    
}


message kvnodeAddStore {
  optional int64  seqno       = 1;
  optional int32  nodeId      = 2;
  optional int32  storeId     = 3;
}

message kvnodeAddStoreResp {
  optional int64  seqno       = 1;
  optional bool   ok          = 2;
  optional string reason      = 3;  
}

message  kvnodeRemStore {
  optional int64  seqno       = 1;
  optional int32  nodeId      = 2;
  optional int32  storeId     = 3;
}

message kvnodeRemStoreResp {
  optional int64  seqno       = 1;
  optional bool   ok          = 2;
  optional string reason      = 3;  
} 


message slotTransferPrepare {
  optional int64 transID      = 1;
  optional int32 slot         = 2;
    optional int32 storeIn      = 3;
    optional int32 storeOut     = 4;
}

message slotTransferPrepareAck {
    optional int64 transID  = 1;
    optional int32 storeID  = 2;
    optional bool  ok       = 3;  
}


message slotTransferCancel {
  optional int64 transID  = 1;
    optional int32 storeID  = 2;  
}

message slotTransferCommit {
  optional int64 transID  = 1;
    optional int32 storeID  = 2;  
}