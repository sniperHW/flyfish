syntax = "proto2";
package proto;


import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;


enum ServerCmdType {
  //flygate <-> flykv
  QueryLeader                   = 1;
  QueryLeaderResp               = 2;


  //console <-> pd
  InstallDeployment             = 101;
  InstallDeploymentResp         = 102;
  AddNode                       = 103;
  AddNodeResp                   = 104;
  RemNode                       = 105;
  RemNodeResp                   = 106;
  AddSet                        = 107;
  AddSetResp                    = 108;
  RemSet                        = 109;
  RemSetResp                    = 110;


  //kvnode <-> pd
  KvnodeBoot                    = 210;                   //kvnode冷启登录  
  KvnodeBootResp                = 211;
  NotifyAddNode                 = 212;
  NotifyAddNodeResp             = 213;
  NotifyRemNode                 = 214;
  NotifyRemNodeResp             = 215;
  NotifySlotTransOut            = 216;
  NotifySlotTransOutResp        = 217;
  NotifySlotTransIn             = 218;
  NotifySlotTransInResp         = 219;    


  //flygate <-> pd
  QueryRouteInfo                = 310;
  QueryRouteInfoResp            = 311;


  //client <-> pd
  GetFlyGate                    = 410;
  GetFlyGateResp                = 411;
}


message queryRouteInfo {
  optional string service       = 1;
  optional int64  version       = 2;  
  repeated int32  sets          = 3;
}         


message routeInfoKvNode {
  optional int32  nodeID        = 1;
  optional string host          = 2;
  optional int32  servicePort   = 3;       
}

message routeInfoSet {
  optional int32  setID            = 1;
  repeated int32  stores           = 2;
  repeated bytes  slots            = 3;
  repeated routeInfoKvNode kvnodes = 4;
}

message queryRouteInfoResp {
  repeated routeInfoSet sets       = 1;
  repeated int32  removeSets       = 2;
  optional int64  version          = 3; 
}


//查询是否store的leader,如果是返回yes=true
message query_leader {
  optional int32 store = 1;
}

message query_leader_resp {
  optional int32 leader = 1;
}

message deploymentKvnode  {
  optional int32  nodeID      = 1;
  optional string host        = 2;
  optional int32  servicePort = 3;
  optional int32  raftPort   = 4; 
}

message deploymentSet  {
  optional int32  setID           = 1;
  repeated deploymentKvnode nodes = 2;
}


message installDeployment  {
  repeated deploymentSet sets     = 1;
}

message installDeploymentResp  {
  optional bool ok            = 1;
  optional string reason      = 2;
}

message addNode {
  optional int32  setID       = 1;
  optional int32  nodeID      = 2;
  optional string host        = 3;
  optional int32  servicePort = 4;
  optional int32  raftPort   = 5;      
}


message addNodeResp  {
  optional bool ok            = 1;
  optional string reason      = 2;
}

message remNode {
  optional int32  setID       = 1;
  optional int32  nodeID      = 2;     
}


message remNodeResp  {
  optional bool ok            = 1;
  optional string reason      = 2;
}


message kvnodeBoot {
  optional int32  nodeID      = 1;
}

message storeInfo {
  optional int32  id          = 1;
  optional string raftCluster = 2;
  optional bytes  slots       = 3;
}

message kvnodeBootResp {
  optional bool   ok           = 1;
  optional string reason       = 2;
  optional string serviceHost  = 3;
  optional int32  servicePort  = 4;
  optional int32  raftPort     = 5;   
  repeated storeInfo stores    = 6;
}

message notifyAddNode {
  optional int32  nodeID      = 1;
  optional string host        = 2;
  optional int32  raftPort    = 3;
  repeated int32  stores      = 4; 
}

message notifyAddNodeResp {
  optional int32  nodeID      = 1;
  optional int32  store       = 2;
}


message notifyRemNode {
  optional int32  nodeID      = 1;
  repeated int32  stores      = 2; 
}

message notifyRemNodeResp {
  optional int32  nodeID      = 1;
  optional int32  store       = 2;
}


message notifySlotTransOut {
  optional int32  slot        = 1;  
  optional int32  store       = 2;  
}
  
message notifySlotTransOutResp {
  optional int32  slot        = 1; 
}  

message  notifySlotTransIn {
  optional int32  slot        = 1;  
  optional int32  store       = 2; 
}

message notifySlotTransInResp {
  optional int32  slot        = 1; 
}  


message addSet {
  optional deploymentSet set   = 1;
}

message   addSetResp {
  optional bool   ok           = 1;
  optional string reason       = 2;
}


message remSet {
  optional int32 setID         = 1;
}

message   remSetResp {
  optional bool   ok           = 1;
  optional string reason       = 2;
}


message   getFlyGate {

}

message getFlyGateResp {
  optional string gateService  = 1;
}

