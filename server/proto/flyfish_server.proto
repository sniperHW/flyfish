syntax = "proto2";
package proto;


import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;


enum ServerCmdType {
  //flygate <-> flykv
  QueryLeader                   = 1;
  QueryLeaderResp               = 2;


  //console <-> pd
  InstallDeployment             = 101;
  InstallDeploymentResp         = 102;
  AddNode                       = 103;
  AddNodeResp                   = 104;
  AddLearnerStoreToNode         = 105;
  AddLearnerStoreToNodeResp     = 106;
  PromoteLearnerStore           = 107;
  PromoteLearnerStoreResp       = 108;
  RemNode                       = 109;
  RemNodeResp                   = 110;
  AddSet                        = 111;
  AddSetResp                    = 112;
  RemSet                        = 113;
  RemSetResp                    = 114;
  SetMarkClear                  = 115;
  SetMarkClearResp              = 116;
  SetMeta                       = 117;
  SetMetaResp                   = 118;
  GetMeta                       = 119;
  GetMetaResp                   = 120;
  UpdateMeta                    = 121;
  UpdateMetaResp                = 122;


  //kvnode <-> pd
  KvnodeBoot                    = 210;                   //kvnode冷启登录  
  KvnodeBootResp                = 211;
  //NotifyAddLearner              = 212;
  //NotifyAddLearnerResp          = 213;
  //NotifyPromoteLearner          = 214;
  //NotifyPromoteLearnerResp      = 215; 
  //NotifyRemNode                 = 216;
  //NotifyRemNodeResp             = 217;
  NotifySlotTransOut            = 218;
  NotifySlotTransOutResp        = 219;
  NotifySlotTransIn             = 220;
  NotifySlotTransInResp         = 221;    
  NotifyUpdateMeta              = 222;
  NotifyUpdateMetaResp          = 223;


  //flygate <-> pd
  QueryRouteInfo                = 310;
  QueryRouteInfoResp            = 311;
  FlyGateHeartBeat              = 312;


  //client <-> pd
  GetFlyGateList                = 410;
  GetFlyGateListResp            = 411;
  ChangeFlyGate                 = 412;
  ChangeFlyGateResp             = 413;
}


message queryRouteInfo {
  optional int64  version       = 1;  
  repeated int32  sets          = 2;
}         


message routeInfoKvNode {
  optional int32  nodeID        = 1;
  optional string host          = 2;
  optional int32  servicePort   = 3;       
}

message routeInfoSet {
  optional int32  setID            = 1;
  repeated int32  stores           = 2;
  repeated bytes  slots            = 3;
  repeated routeInfoKvNode kvnodes = 4;
}

message queryRouteInfoResp {
  repeated routeInfoSet sets       = 1;
  repeated int32  removeSets       = 2;
  optional int64  version          = 3; 
}


//查询是否store的leader,如果是返回yes=true
message query_leader {
  optional int32 store = 1;
}

message query_leader_resp {
  optional int32 leader = 1;
}

message deploymentKvnode  {
  optional int32  nodeID      = 1;
  optional string host        = 2;
  optional int32  servicePort = 3;
  optional int32  raftPort   = 4; 
}

message deploymentSet  {
  optional int32  setID           = 1;
  repeated deploymentKvnode nodes = 2;
}


message installDeployment  {
  repeated deploymentSet sets     = 1;
}

message installDeploymentResp  {
  optional bool ok            = 1;
  optional string reason      = 2;
}

message addNode {
  optional int32  setID       = 1;
  optional int32  nodeID      = 2;
  optional string host        = 3;
  optional int32  servicePort = 4;
  optional int32  raftPort    = 5;      
}


message addNodeResp  {
  optional bool ok            = 1;
  optional string reason      = 2;
}

message addLearnerStoreToNode {
  optional int32  setID       = 1;
  optional int32  nodeID      = 2;
  optional int32  store       = 3;  
}
  
message addLearnerStoreToNodeResp {
  optional bool ok            = 1;
  optional string reason      = 2;  
}
  
message promoteLearnerStore {
  optional int32  setID       = 1;
  optional int32  nodeID      = 2;
  optional int32  store       = 3;  
}

message promoteLearnerStoreResp {
  optional bool ok            = 1;
  optional string reason      = 2; 
}


message remNode {
  optional int32  setID       = 1;
  optional int32  nodeID      = 2;     
}


message remNodeResp  {
  optional bool ok            = 1;
  optional string reason      = 2;
}


message kvnodeBoot {
  optional int32  nodeID      = 1;
}

message storeInfo {
  optional int32  id          = 1;
  optional string raftCluster = 2;
  optional bytes  slots       = 3;
}

message kvnodeBootResp {
  optional bool   ok           = 1;
  optional string reason       = 2;
  optional string serviceHost  = 3;
  optional int32  servicePort  = 4;
  optional int32  raftPort     = 5;   
  repeated storeInfo stores    = 6;
  optional int64  metaVersion  = 7;
  optional bytes  meta         = 8;
}

/*
message notifyAddLearner {
  optional int32  nodeID      = 1;
  optional string host        = 2;
  optional int32  raftPort    = 3;
  repeated int32  stores      = 4; 
}

message notifyAddLearnerResp {
  optional int32  nodeID      = 1;
  optional int32  store       = 2;
}


message notifyPromoteLearner {
  optional int32  nodeID      = 1;
  repeated int32  stores      = 2;   
}

message notifyPromoteLearnerResp {
  optional int32  nodeID      = 1;
  optional int32  store       = 2;   
}

message notifyRemNode {
  optional int32  nodeID      = 1;
  repeated int32  stores      = 2; 
}

message notifyRemNodeResp {
  optional int32  nodeID      = 1;
  optional int32  store       = 2;
}
*/


message notifySlotTransOut {
  optional int32  slot        = 1;  
  optional int32  store       = 2;  
}
  
message notifySlotTransOutResp {
  optional int32  slot        = 1; 
}  

message  notifySlotTransIn {
  optional int32  slot        = 1;  
  optional int32  store       = 2; 
}

message notifySlotTransInResp {
  optional int32  slot        = 1; 
}  


message addSet {
  optional deploymentSet set   = 1;
}

message   addSetResp {
  optional bool   ok           = 1;
  optional string reason       = 2;
}


message remSet {
  optional int32 setID         = 1;
}

message   remSetResp {
  optional bool   ok           = 1;
  optional string reason       = 2;
}


message  setMarkClear{
  optional int32 setID         = 1;
}

message  setMarkClearResp{
  optional bool   ok           = 1;
  optional string reason       = 2;
}


message flygate  {
  optional string service      = 1;
  optional int32  msgPerSecond = 2;  
}

message   getFlyGateList {

}

message getFlyGateListResp {
  repeated flygate list        = 1;
}

message flyGateHeartBeat {
  optional string gateService  = 1;
  optional string token        = 2;
  optional int32  msgPerSecond = 3;
}

message changeFlyGate {
  optional string currentGate      = 1;
  optional int32  msgSendPerSecond = 2;
}

message changeFlyGateResp {
  optional bool ok        = 1;
  optional string service = 2;
}


message setMeta {
  optional bytes meta     = 1;
}

message setMetaResp {
  optional bool  ok       = 1;  
  optional string reason  = 2;  
}

message metaFiled {
  optional string name    = 1;
  optional string type    = 2;
  optional string default = 3;
}

message metaTable {
  optional string name      = 1;
  repeated metaFiled fields = 2;
}

message updateMeta {
  repeated metaTable updates = 1;
}

message updateMetaResp {
  optional bool  ok       = 1;  
  optional string reason  = 2;  
}


message getMeta {
 
}

message getMetaResp {
  optional int64 version  = 1;
  optional bytes meta     = 2;
}

message  notifyUpdateMeta {
  optional int32 store    = 1;
  optional int64 version  = 2;
  optional bytes meta     = 3;
}

message  notifyUpdateMetaResp {
  optional int32 store    = 1;
  optional int64 version  = 2; 
}




